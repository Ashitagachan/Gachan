//skipped groundPlane_transform
//skipped Manipulator1
//skipped UniversalManip
//skipped CubeCompass
/////////////////////////////////////////////
// object_persp__
/////////////////////////////////////////////
#if 0
	0.999755, 0, 0.0221426, 0, 
	0.00427939, 0.981147, -0.193217, 0, 
	-0.0217252, 0.193265, 0.980906, 0, 
	11.5148, 36.1467, 154.123, 1
#endif



DX3DOBJECT_START_HASH( object_persp__, 1874424513 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_NULL__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	11.5148, 36.1467, -154.123, 
	0.194489, 25.1549, -3.90409e-018,                // 11.1434, 1441.27, -2.23688e-016
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	11.5148, 36.1467, -154.123, 
	0.194489, 25.1549, -3.90409e-018,                // 11.1434, 1441.27, -2.23688e-016
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_NULL__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_top__
/////////////////////////////////////////////
#if 0
	1, 0, -0, 0, 
	-0, 2.22045e-016, -1, 0, 
	0, 1, 2.22045e-016, 0, 
	-2.60295, 195.173, -13.14, 1
#endif



DX3DOBJECT_START_HASH( object_top__, 248132001 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_NULL__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	-2.60295, 195.173, 13.14, 
	1.5708, -0, 0,                // 90, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	-2.60295, 195.173, 13.14, 
	1.5708, -0, 0,                // 90, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_NULL__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_front__
/////////////////////////////////////////////
#if 0
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	-5.92493, -0.157411, 195.197, 1
#endif



DX3DOBJECT_START_HASH( object_front__, 2853364937 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_NULL__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	-5.92493, -0.157411, -195.197, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	-5.92493, -0.157411, -195.197, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_NULL__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_side__
/////////////////////////////////////////////
#if 0
	2.22045e-016, 0, -1, 0, 
	0, 1, 0, 0, 
	1, 0, 2.22045e-016, 0, 
	195.319, 1.51789, -14.2724, 1
#endif



DX3DOBJECT_START_HASH( object_side__, 746685757 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_NULL__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	195.319, 1.51789, 14.2724, 
	0, -1.5708, 0,                // 0, -90, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	195.319, 1.51789, 14.2724, 
	0, -1.5708, 0,                // 0, -90, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_NULL__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_side1__
/////////////////////////////////////////////
#if 0
	2.22045e-016, 0, -1, 0, 
	0, 1, 0, 0, 
	1, 0, 2.22045e-016, 0, 
	100.1, 10.982, 0.288798, 1
#endif



DX3DOBJECT_START_HASH( object_side1__, 2604188661 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_NULL__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	100.1, 10.982, -0.288798, 
	0, -1.5708, 0,                // 0, -90, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	100.1, 10.982, -0.288798, 
	0, -1.5708, 0,                // 0, -90, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_NULL__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_NOEXP_SEDANA__
/////////////////////////////////////////////


DX3DOBJECT_START_HASH( object_NOEXP_SEDANA__, 180304189 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_NULL__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	-26.1944, 0, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	-26.1944, 0, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_NULL__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_NOEXP_WAGONA__
/////////////////////////////////////////////


DX3DOBJECT_START_HASH( object_NOEXP_WAGONA__, 3684154941 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_NULL__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	26.5534, 0, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	26.5534, 0, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_NOEXP_SEDANA__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_KEIA_BODYR__
/////////////////////////////////////////////
#if 0
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, -0.673368, 0, 1
#endif

DX3DMATERIAL_START( material_carbodycolor )
DX3DMATERIAL_DIFF( 1, 1, 1, 1 )
DX3DMATERIAL_SPEC( 1, 0, 0, 0 )
DX3DMATERIAL_TEX( NULL )
DX3DMATERIAL_SHADER( DEFAULT )
DX3DMATERIAL_FLG( 0 )
DX3DMATERIAL_CALLBACK( -1 )
DX3DMATERIAL_END


DX3DMATERIAL_START( material_carwindow )
DX3DMATERIAL_DIFF( 1, 0.495568, 0.495568, 0.495568 )
DX3DMATERIAL_SPEC( 1, 0.5, 0.5, 0.5 )
DX3DMATERIAL_TEX( NULL )
DX3DMATERIAL_SHADER( DEFAULT )
DX3DMATERIAL_FLG( 0 )
DX3DMATERIAL_CALLBACK( -1 )
DX3DMATERIAL_END


DX3DMATERIAL_START( material_carwinker )
DX3DMATERIAL_DIFF( 1, 0.784, 0.641965, 0 )
DX3DMATERIAL_SPEC( 1, 0.5, 0.5, 0.5 )
DX3DMATERIAL_TEX( NULL )
DX3DMATERIAL_SHADER( DEFAULT )
DX3DMATERIAL_FLG( 0 )
DX3DMATERIAL_CALLBACK( -1 )
DX3DMATERIAL_END


DX3DMATERIAL_START( material_carbodyblack )
DX3DMATERIAL_DIFF( 1, 0, 0, 0 )
DX3DMATERIAL_SPEC( 1, 0, 0, 0 )
DX3DMATERIAL_TEX( NULL )
DX3DMATERIAL_SHADER( DEFAULT )
DX3DMATERIAL_FLG( 0 )
DX3DMATERIAL_CALLBACK( -1 )
DX3DMATERIAL_END


DX3DMATERIAL_START( material_carlight )
DX3DMATERIAL_DIFF( 1, 0.8, 0.786277, 0.6648 )
DX3DMATERIAL_SPEC( 1, 0.5, 0.5, 0.5 )
DX3DMATERIAL_TEX( NULL )
DX3DMATERIAL_SHADER( DEFAULT )
DX3DMATERIAL_FLG( 0 )
DX3DMATERIAL_CALLBACK( -1 )
DX3DMATERIAL_END




#if ((PT_KEIA_BODYR___carbodycolor_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR___carbodycolor_0 == PT_TRILIST ) || ((PT_KEIA_BODYR___carbodycolor_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BODYR___carbodycolor_0 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BODYR___carbodycolor_0 )
DX3DVERT( -6.57116, 8.98116, -14.0404 ) DX3DVNORM( -0.841887, 0.492878, -0.219768 )  //0
DX3DVERT( -6.35941, 8.88118, -14.8853 ) DX3DVNORM( -0.714494, 0.500546, -0.488827 )  //1
DX3DVERT( -5.76264, 9.14685, -14.9618 ) DX3DVNORM( -0.460249, 0.706283, -0.537899 )  //2
DX3DVERT( -6.35264, 7.52912, -15.404 ) DX3DVNORM( -0.654132, 0.472062, -0.590989 )  //3
DX3DVERT( -6.54128, 7.95409, -14.8645 ) DX3DVNORM( -0.901238, 0.315206, -0.297347 )  //4
DX3DVERT( -6.82871, 7.55528, -15.0086 ) DX3DVNORM( -0.803807, 0.493358, -0.332405 )  //5
DX3DVERT( -6.86365, 6.67622, -15.9232 ) DX3DVNORM( -0.835598, 0.411671, -0.363735 )  //6
DX3DVERT( -6.51048, 6.66339, -16.2408 ) DX3DVNORM( -0.465636, 0.591364, -0.658386 )  //7
DX3DVERT( -6.84231, 4.80754, -16.2498 ) DX3DVNORM( -0.84641, -0.0364646, -0.531282 )  //8
DX3DVERT( -6.46395, 2.87958, -16.2969 ) DX3DVNORM( -0.769559, -0.156732, -0.619043 )  //9
DX3DVERT( -6.51995, 4.82123, -16.5648 ) DX3DVNORM( -0.520351, 0.0340986, -0.853271 )  //10
DX3DVERT( -5.75464, 3.32697, -16.7201 ) DX3DVNORM( -0.388022, -0.1036, -0.915809 )  //11
DX3DVERT( -5.741, 10.8518, -7.69346 ) DX3DVNORM( -0.853576, 0.516697, -0.0665673 )  //12
DX3DVERT( -6.61477, 9.56764, -9.65824 ) DX3DVNORM( -0.921213, 0.386043, -0.0483428 )  //13
DX3DVERT( -5.91096, 10.3576, -10.5723 ) DX3DVNORM( -0.772072, 0.628782, -0.0924033 )  //14
DX3DVERT( -6.55531, 9.32279, -11.8666 ) DX3DVNORM( -0.918016, 0.392097, -0.0592193 )  //15
DX3DVERT( -6.92038, 7.33589, -12.9482 ) DX3DVNORM( -0.977872, 0.198933, -0.0647442 )  //16
DX3DVERT( -6.9191, 7.29136, -12.0314 ) DX3DVNORM( -0.984381, 0.174244, 0.0251685 )  //17
DX3DVERT( -6.44033, 8.00111, 15.9722 ) DX3DVNORM( -0.901159, 0.428732, 0.0640382 )  //18
DX3DVERT( -7.0516, 7.08147, 13.5271 ) DX3DVNORM( -0.901159, 0.428732, 0.0640382 )  //19
DX3DVERT( -6.242, 8.46922, 15.6291 ) DX3DVNORM( -0.901159, 0.428732, 0.0640382 )  //20
DX3DVERT( -6.242, 8.46922, 15.6291 ) DX3DVNORM( -0.949818, 0.225028, 0.217272 )  //21
DX3DVERT( -7.0516, 7.08147, 13.5271 ) DX3DVNORM( -0.970695, 0.228976, 0.0729489 )  //22
DX3DVERT( -6.03974, 9.79518, 15.14 ) DX3DVNORM( -0.943651, 0.291964, 0.155816 )  //23
DX3DVERT( -6.82809, 8.03, 12.8495 ) DX3DVNORM( -0.970782, 0.228267, 0.0740002 )  //24
DX3DVERT( -6.9431, 6.82883, 12.0628 ) DX3DVNORM( -0.993067, 0.114981, -0.0244314 )  //25
DX3DVERT( -4.67269, 14.447, 12.8452 ) DX3DVNORM( -0.922256, 0.384881, -0.0361803 )  //26
DX3DVERT( -6.62813, 10.3366, 11.3237 ) DX3DVNORM( -0.965699, 0.222523, 0.133825 )  //27
DX3DVERT( -6.10314, 11.6562, 11.5688 ) DX3DVNORM( -0.922308, 0.382136, 0.0576246 )  //28
DX3DVERT( -6.6361, 9.3856, 2.61874 ) DX3DVNORM( -0.979633, 0.19963, -0.0216245 )  //29
DX3DVERT( -6.10314, 11.2298, 3.49985 ) DX3DVNORM( -0.949372, 0.31314, -0.0252048 )  //30
DX3DVERT( -6.10314, 11.3399, 4.15916 ) DX3DVNORM( -0.940003, 0.34025, -0.0249735 )  //31
DX3DVERT( -6.6715, 9.24484, -4.41678 ) DX3DVNORM( -0.974198, 0.224567, -0.0225151 )  //32
DX3DVERT( -6.62813, 9.58596, -8.62647 ) DX3DVNORM( -0.931513, 0.363708, 0.000223029 )  //33
DX3DVERT( -5.21142, 13.5836, 13.0296 ) DX3DVNORM( -0.913214, 0.40387, -0.0541154 )  //34
DX3DVERT( -4.82181, 14.1882, 13.0357 ) DX3DVNORM( -0.711852, 0.616773, 0.335943 )  //35
DX3DVERT( -5.02558, 13.6658, 13.4823 ) DX3DVNORM( -0.725344, 0.551064, 0.41256 )  //36
DX3DVERT( -4.7573, 14.0876, 13.1807 ) DX3DVNORM( -0.360658, 0.68332, 0.634822 )  //37
DX3DVERT( -7.21802, 10.9251, -7.11136 ) DX3DVNORM( -0.990875, 0.00321581, -0.134742 )  //38
DX3DVERT( -7.2307, 11.6591, -7.00056 ) DX3DVNORM( -0.991211, 0.00536166, -0.13218 )  //39
DX3DVERT( -7.31188, 10.9542, -6.42044 ) DX3DVNORM( -0.995662, 0.0178606, -0.0913131 )  //40
DX3DVERT( -7.26839, 11.9113, -6.69765 ) DX3DVNORM( -0.997265, 0.0251832, -0.0694828 )  //41
DX3DVERT( -7.2708, 11.9315, -6.33754 ) DX3DVNORM( -0.999044, 0.0427593, -0.00907445 )  //42
DX3DVERT( -5.31638, 13.1671, -5.29084 ) DX3DVNORM( -0.893071, 0.449909, -0.00247058 )  //43
DX3DVERT( -5.73974, 12.2384, -5.95772 ) DX3DVNORM( -0.937569, 0.34286, 0.0584109 )  //44
DX3DVERT( -5.81141, 12.125, -6.15896 ) DX3DVNORM( -0.914481, 0.40192, 0.0467425 )  //45
DX3DVERT( -6.10314, 10.756, -6.11994 ) DX3DVNORM( -0.973222, 0.229794, -0.00587407 )  //46
DX3DVERT( -5.80431, 9.62364, -14.149 ) DX3DVNORM( -0.666206, 0.68993, -0.283136 )  //47
DX3DVERT( -5.76511, 10.2448, -11.7339 ) DX3DVNORM( -0.722329, 0.675632, -0.147519 )  //48
DX3DVERT( -6.44033, 8.00111, 15.9722 ) DX3DVNORM( -0.829767, 0.356989, 0.429005 )  //49
DX3DVERT( -6.89158, 6.94526, 15.978 ) DX3DVNORM( -0.938351, 0.0958647, 0.332126 )  //50
DX3DVERT( -7.0516, 7.08147, 13.5271 ) DX3DVNORM( -0.952538, 0.294113, 0.0785387 )  //51
DX3DVERT( -7.04739, 6.45971, 15.1905 ) DX3DVNORM( -0.985596, 0.114695, 0.12428 )  //52
DX3DVERT( -6.65927, 2.98897, 10.0941 ) DX3DVNORM( -0.983275, -0.181871, 0.00965093 )  //53
DX3DVERT( -6.65927, 2.58843, 2.54585 ) DX3DVNORM( -0.962988, -0.269308, 0.0112935 )  //54
DX3DVERT( -6.77061, 3.58986, 10.0744 ) DX3DVNORM( -0.978266, -0.207226, 0.00724487 )  //55
DX3DVERT( -6.98347, 3.50189, 2.55351 ) DX3DVNORM( -0.988749, -0.149022, 0.0129253 )  //56
DX3DVERT( -6.69345, 2.79517, -15.7022 ) DX3DVNORM( -0.909016, -0.179278, -0.376231 )  //57
DX3DVERT( -7.00588, 4.24239, -15.6369 ) DX3DVNORM( -0.960502, -0.0675686, -0.269946 )  //58
DX3DVERT( -6.11619, 3.6595, 16.6038 ) DX3DVNORM( -0.860545, -0.1313, 0.492161 )  //59
DX3DVERT( -6.39256, 4.57057, 16.6223 ) DX3DVNORM( -0.978167, -0.175249, 0.111704 )  //60
DX3DVERT( -6.4861, 6.21291, 16.6158 ) DX3DVNORM( -0.7716, 0.117248, 0.625209 )  //61
DX3DVERT( -6.26894, 8.68022, -15.083 ) DX3DVNORM( -0.633886, 0.376958, -0.675345 )  //62
DX3DVERT( -5.74182, 8.72143, -15.339 ) DX3DVNORM( -0.430799, 0.508105, -0.745816 )  //63
DX3DVERT( -5.81624, 4.88922, -16.8173 ) DX3DVNORM( -0.340708, 0.0376635, -0.939414 )  //64
DX3DVERT( -4.32129, 15.1003, 3.50155 ) DX3DVNORM( -0.808836, 0.588034, 0.000624538 )  //65
DX3DVERT( -4.38506, 15.043, 4.70825 ) DX3DVNORM( -0.827825, 0.560987, -0.000444079 )  //66
DX3DVERT( -4.75679, 14.5006, 4.137 ) DX3DVNORM( -0.831838, 0.554463, 0.0248353 )  //67
DX3DVERT( -4.75679, 14.4766, 5.20322 ) DX3DVNORM( -0.852271, 0.523101, 0.000710866 )  //68
DX3DVERT( -4.99807, 13.7224, -4.13574 ) DX3DVNORM( -0.906422, 0.422201, 0.0120607 )  //69
DX3DVERT( -5.07054, 13.6035, -3.61918 ) DX3DVNORM( -0.89591, 0.443898, -0.017292 )  //70
DX3DVERT( -5.30479, 13.2617, 11.3012 ) DX3DVNORM( -0.890367, 0.45258, 0.0491718 )  //71
DX3DVERT( -4.65125, 14.5679, 11.8228 ) DX3DVNORM( -0.8944, 0.44719, 0.00832597 )  //72
DX3DVERT( -6.995, 4.66434, -9.1048 ) DX3DVNORM( -0.999046, -0.0436282, 0.00189835 )  //73
DX3DVERT( -7.03226, 5.72437, -9.41341 ) DX3DVNORM( -0.999409, -0.0343124, 0.00232065 )  //74
DX3DVERT( -7.03124, 5.96612, 2.57418 ) DX3DVNORM( -0.999341, -0.036075, -0.00397736 )  //75
DX3DVERT( -6.91222, 4.791, 2.56433 ) DX3DVNORM( -0.995098, -0.0987063, -0.00605537 )  //76
DX3DVERT( -6.48849, 3.19556, 16.1895 ) DX3DVNORM( -0.693298, -0.0828318, 0.715875 )  //77
DX3DVERT( -6.9507, 5.27935, 15.983 ) DX3DVNORM( -0.795323, -0.00877084, 0.606123 )  //78
DX3DVERT( -6.96398, 6.96348, -13.9006 ) DX3DVNORM( -0.944658, 0.327834, 0.0120705 )  //79
DX3DVERT( -6.98288, 6.19521, -14.8777 ) DX3DVNORM( -0.992253, 0.10629, -0.0643124 )  //80
DX3DVERT( -7.0377, 6.0611, 10.9679 ) DX3DVNORM( -0.997006, 0.0771991, -0.0043407 )  //81
DX3DVERT( -6.1769, 9.86179, 13.2675 ) DX3DVNORM( -0.959031, 0.279546, -0.0459695 )  //82
DX3DVERT( -4.57612, 14.6601, 9.96332 ) DX3DVNORM( -0.791016, 0.602659, 0.105339 )  //83
DX3DVERT( -4.95835, 14.2459, 9.95837 ) DX3DVNORM( -0.830101, 0.553889, 0.0643311 )  //84
DX3DVERT( -4.45787, 14.9242, 7.0707 ) DX3DVNORM( -0.798161, 0.602377, 0.00900743 )  //85
DX3DVERT( -4.72561, 14.3795, -1.92301 ) DX3DVNORM( -0.890196, 0.455314, -0.0155117 )  //86
DX3DVERT( -4.38367, 15.0766, 1.69344 ) DX3DVNORM( -0.830089, 0.557618, -0.00386528 )  //87
DX3DVERT( -4.75679, 14.6343, 2.93016 ) DX3DVNORM( -0.839172, 0.54369, 0.0138297 )  //88
DX3DVERT( -4.31956, 15.1171, 2.99501 ) DX3DVNORM( -0.763159, 0.645236, 0.0354758 )  //89
DX3DVERT( -5.42864, 13.1938, 4.19159 ) DX3DVNORM( -0.917661, 0.39735, 0.00337504 )  //90
DX3DVERT( -5.42864, 13.2151, 2.78333 ) DX3DVNORM( -0.920267, 0.391143, -0.01074 )  //91
DX3DVERT( -4.50683, 14.8748, -1.92042 ) DX3DVNORM( -0.910152, 0.414237, -0.00551609 )  //92
DX3DVERT( -5.73263, 10.575, -10.5649 ) DX3DVNORM( -0.757654, 0.643306, -0.110075 )  //93
DX3DVERT( -6.62813, 8.84764, 2.59835 ) DX3DVNORM( -0.995173, 0.0981097, -0.00207764 )  //94
DX3DVERT( -7.03124, 6.96141, 2.58253 ) DX3DVNORM( -0.995569, 0.09386, 0.00569523 )  //95
DX3DVERT( -6.65927, 2.68697, -9.01331 ) DX3DVNORM( -0.957112, -0.289647, -0.00641919 )  //96
DX3DVERT( -6.8808, 3.57674, -9.01867 ) DX3DVNORM( -0.987854, -0.155344, -0.0036518 )  //97
DX3DVERT( -7.03608, 5.14044, 10.4031 ) DX3DVNORM( -0.999991, -0.00409155, -0.00110146 )  //98
DX3DVERT( -6.10314, 11.1959, 2.64114 ) DX3DVNORM( -0.95519, 0.295851, -0.00916885 )  //99
DX3DVERT( -7.03124, 6.60482, -10.1204 ) DX3DVNORM( -0.993436, 0.113487, -0.014336 )  //100
DX3DVERT( -6.9191, 7.0469, -10.9858 ) DX3DVNORM( -0.987893, 0.154061, -0.0182685 )  //101
DX3DVERT( -7.02576, 4.25643, 10.1061 ) DX3DVNORM( -0.987287, -0.157515, -0.0212908 )  //102
DX3DVERT( -6.86365, 6.67622, -15.9232 ) DX3DVNORM( -0.917696, 0.0784574, -0.389458 )  //103
DX3DVERT( -6.51048, 6.66339, -16.2408 ) DX3DVNORM( -0.528273, 0.149719, -0.83577 )  //104
DX3DVERT( -5.73379, 7.60088, -15.9673 ) DX3DVNORM( -0.445939, 0.51329, -0.733261 )  //105
DX3DVERT( -5.76299, 7.26077, -16.182 ) DX3DVNORM( -0.341525, 0.505321, -0.792471 )  //106
DX3DVERT( -5.73768, 6.63669, -16.5704 ) DX3DVNORM( -0.327693, 0.489553, -0.808057 )  //107
DX3DVERT( -6.98288, 6.19521, -14.8777 ) DX3DVNORM( -0.994668, 0.0393335, -0.0953366 )  //108
DX3DVERT( -6.96771, 5.20149, -15.4461 ) DX3DVNORM( -0.995997, 0.0453521, -0.0770279 )  //109
DX3DVERT( -5.73768, 6.63669, -16.5704 ) DX3DVNORM( -0.364559, 0.154275, -0.918312 )  //110
DX3DVERT( -5.98553, 7.57004, -15.7938 ) DX3DVNORM( -0.588225, 0.471864, -0.656762 )  //111
DX3DVERT( 0, 2.87959, -16.4276 ) DX3DVNORM( 0.00441769, -0.93151, -0.363688 )  //112
DX3DVERT( 0, 3.23582, -17.19 ) DX3DVNORM( 0.00523202, -0.901875, -0.431965 )  //113
DX3DVERT( -1.53157, 3.23582, -17.1899 ) DX3DVNORM( 0.00274795, -0.886374, -0.462962 )  //114
DX3DVERT( -1.52188, 2.87959, -16.4646 ) DX3DVNORM( -0.0253106, -0.949557, -0.312572 )  //115
DX3DVERT( 0, 8.46922, 16.4663 ) DX3DVNORM( -5.54238e-007, 0.591219, 0.806511 )  //116
DX3DVERT( 0, 8.00111, 16.8095 ) DX3DVNORM( -5.54238e-007, 0.591219, 0.806511 )  //117
DX3DVERT( -1.57624, 8.00111, 16.8095 ) DX3DVNORM( -0.039254, 0.571041, 0.819982 )  //118
DX3DVERT( -1.58803, 8.46922, 16.4663 ) DX3DVNORM( -0.039254, 0.571041, 0.819982 )  //119
DX3DVERT( 0, 14.373, 13.883 ) DX3DVNORM( 0, 0.552557, 0.833475 )  //120
DX3DVERT( 0, 13.7145, 14.3196 ) DX3DVNORM( 0.000587943, 0.486467, 0.873699 )  //121
DX3DVERT( -1.65623, 13.7145, 14.3196 ) DX3DVNORM( -0.0456145, 0.48821, 0.871533 )  //122
DX3DVERT( -1.68014, 14.373, 13.883 ) DX3DVNORM( -0.0495855, 0.551619, 0.832621 )  //123
DX3DVERT( 0, 14.6048, 13.5357 ) DX3DVNORM( 0.0275151, 0.896251, 0.442694 )  //124
DX3DVERT( 0, 14.373, 13.883 ) DX3DVNORM( 0, 0.831815, 0.555053 )  //125
DX3DVERT( -1.68014, 14.373, 13.883 ) DX3DVNORM( -0.0196515, 0.79122, 0.611216 )  //126
DX3DVERT( -1.68919, 14.6048, 13.5357 ) DX3DVNORM( 0.00227208, 0.864495, 0.502637 )  //127
DX3DVERT( 0, 9.63579, -14.9775 ) DX3DVNORM( -0.00093677, 0.786008, -0.618215 )  //128
DX3DVERT( 0, 10.0922, -14.1038 ) DX3DVNORM( 0.0146124, 0.924235, -0.381544 )  //129
DX3DVERT( -1.68797, 10.1232, -14.1136 ) DX3DVNORM( 0.0157041, 0.921623, -0.387768 )  //130
DX3DVERT( -1.67827, 9.63579, -14.9775 ) DX3DVNORM( -0.00358323, 0.778344, -0.627828 )  //131
DX3DVERT( 0, 10.8031, -11.6793 ) DX3DVNORM( 0.0206737, 0.956767, -0.290119 )  //132
DX3DVERT( -1.70763, 10.8349, -11.692 ) DX3DVNORM( 0.0153634, 0.957717, -0.2873 )  //133
DX3DVERT( 0, 4.57057, 16.9654 ) DX3DVNORM( 6.81273e-007, -0.215292, 0.97655 )  //134
DX3DVERT( 0, 3.65951, 16.7645 ) DX3DVNORM( 6.81273e-007, -0.215292, 0.97655 )  //135
DX3DVERT( -1.48967, 3.6595, 16.7645 ) DX3DVNORM( -0.022488, -0.215487, 0.976248 )  //136
DX3DVERT( -1.51125, 4.57057, 16.9654 ) DX3DVNORM( -0.022488, -0.215487, 0.976248 )  //137
DX3DVERT( 0, 8.00111, 16.8095 ) DX3DVNORM( 2.75189e-007, 0.083251, 0.996529 )  //138
DX3DVERT( 0, 6.21291, 16.9589 ) DX3DVNORM( 2.75189e-007, 0.083251, 0.996529 )  //139
DX3DVERT( -1.5504, 6.21291, 16.9589 ) DX3DVNORM( -0.0405097, 0.0965825, 0.9945 )  //140
DX3DVERT( -1.57624, 8.00111, 16.8095 ) DX3DVNORM( -0.0405097, 0.0965825, 0.9945 )  //141
DX3DVERT( 0, 6.21223, 16.7872 ) DX3DVNORM( 6.12159e-005, 0.00396093, 0.999992 )  //142
DX3DVERT( 0, 4.56989, 16.7937 ) DX3DVNORM( 6.12159e-005, 0.00396093, 0.999992 )  //143
DX3DVERT( -1.50724, 4.56996, 16.7937 ) DX3DVNORM( -0.0233581, 0.00354437, 0.999721 )  //144
DX3DVERT( -1.54639, 6.21231, 16.7872 ) DX3DVNORM( -0.0233581, 0.00354437, 0.999721 )  //145
DX3DVERT( 0, 8.00616, -16.4774 ) DX3DVNORM( -0.0113183, 0.670844, -0.741512 )  //146
DX3DVERT( -1.65025, 8.00863, -16.4244 ) DX3DVNORM( -0.0180587, 0.66317, -0.748251 )  //147
DX3DVERT( 0, 15.5905, 3.50155 ) DX3DVNORM( 0.00700667, 0.998691, 0.05066 )  //148
DX3DVERT( 0, 15.4824, 4.70824 ) DX3DVNORM( 0.0136322, 0.998151, 0.0592421 )  //149
DX3DVERT( -1.80455, 15.5332, 4.70825 ) DX3DVNORM( -0.0490353, 0.997249, 0.0555802 )  //150
DX3DVERT( -1.81047, 15.5905, 3.50155 ) DX3DVNORM( -0.0563669, 0.997397, 0.044964 )  //151
DX3DVERT( 0, 15.1016, 11.9216 ) DX3DVNORM( 0.0166354, 0.987419, 0.157247 )  //152
DX3DVERT( 0, 14.8948, 12.4005 ) DX3DVNORM( 0.0488668, 0.95544, 0.291111 )  //153
DX3DVERT( -1.70221, 14.8948, 12.974 ) DX3DVNORM( 0.0109102, 0.956107, 0.292816 )  //154
DX3DVERT( -1.74603, 15.1016, 11.9216 ) DX3DVNORM( -0.0207304, 0.991503, 0.128422 )  //155
DX3DVERT( 0, 3.65951, 16.7645 ) DX3DVNORM( 3.31925e-007, -0.77825, 0.627954 )  //156
DX3DVERT( 0, 3.19556, 16.1895 ) DX3DVNORM( 3.31925e-007, -0.77825, 0.627954 )  //157
DX3DVERT( -1.48339, 3.19556, 16.1895 ) DX3DVNORM( -0.0074266, -0.850427, 0.52604 )  //158
DX3DVERT( -1.48967, 3.6595, 16.7645 ) DX3DVNORM( -0.0143586, -0.778246, 0.627795 )  //159
DX3DVERT( 0, 15.3906, 7.07069 ) DX3DVNORM( 0.00124207, 0.998394, 0.0566386 )  //160
DX3DVERT( 0, 15.2227, 9.98385 ) DX3DVNORM( -0.0104129, 0.998249, 0.058232 )  //161
DX3DVERT( -1.75778, 15.1874, 9.98385 ) DX3DVNORM( -0.0397456, 0.997473, 0.0588812 )  //162
DX3DVERT( -1.79111, 15.3876, 7.0707 ) DX3DVNORM( -0.0436351, 0.997429, 0.0568441 )  //163
DX3DVERT( 0, 15.5668, 1.69343 ) DX3DVNORM( 3.38404e-006, 0.998183, -0.0602609 )  //164
DX3DVERT( 0, 15.6072, 2.99501 ) DX3DVNORM( 3.55383e-006, 1, 0.000968233 )  //165
DX3DVERT( -1.81147, 15.6072, 2.99501 ) DX3DVNORM( -0.0606435, 0.998158, 0.00152757 )  //166
DX3DVERT( -1.81202, 15.5668, 1.69343 ) DX3DVNORM( -0.0586235, 0.996489, -0.0597787 )  //167
DX3DVERT( 0, 15.2423, -1.92042 ) DX3DVNORM( 0.000432527, 0.970329, -0.241789 )  //168
DX3DVERT( -1.80947, 15.2423, -1.92042 ) DX3DVNORM( -0.0467321, 0.971376, -0.232905 )  //169
DX3DVERT( 0, 14.9056, -2.71533 ) DX3DVNORM( 0.000872635, 0.910911, -0.412601 )  //170
DX3DVERT( -1.88331, 14.9077, -2.71857 ) DX3DVNORM( -0.0204505, 0.914552, -0.403951 )  //171
DX3DVERT( 0, 11.1517, -10.5555 ) DX3DVNORM( 0.00981837, 0.950497, -0.310579 )  //172
DX3DVERT( -1.71624, 11.1933, -10.5577 ) DX3DVNORM( -0.00604592, 0.95682, -0.290618 )  //173
DX3DVERT( 0, 11.4407, -9.84271 ) DX3DVNORM( -0.0104821, 0.923228, -0.38411 )  //174
DX3DVERT( -1.72025, 11.4407, -9.69568 ) DX3DVNORM( -0.0338921, 0.927828, -0.371466 )  //175
DX3DVERT( 0, 6.65159, -17.0114 ) DX3DVNORM( -0.00602847, 0.423724, -0.905771 )  //176
DX3DVERT( 0, 7.25808, -16.7171 ) DX3DVNORM( -0.00602847, 0.423724, -0.905771 )  //177
DX3DVERT( -1.61816, 7.25808, -16.7169 ) DX3DVNORM( -0.0429259, 0.437117, -0.89838 )  //178
DX3DVERT( -1.61009, 6.65159, -16.9901 ) DX3DVNORM( -0.0429259, 0.437117, -0.89838 )  //179
DX3DVERT( 0, 7.25808, -16.7171 ) DX3DVNORM( -9.01166e-005, 0.155198, -0.987883 )  //180
DX3DVERT( 0, 7.64479, -16.6563 ) DX3DVNORM( -9.01166e-005, 0.155198, -0.987883 )  //181
DX3DVERT( -1.62592, 7.64479, -16.6562 ) DX3DVNORM( -0.0495893, 0.132066, -0.99 )  //182
DX3DVERT( -1.61816, 7.25808, -16.7169 ) DX3DVNORM( -0.0495893, 0.132066, -0.99 )  //183
DX3DVERT( 0, 4.83635, -17.2955 ) DX3DVNORM( -0.0066463, 0.160177, -0.987066 )  //184
DX3DVERT( 0, 6.65159, -17.0114 ) DX3DVNORM( -0.0066463, 0.160177, -0.987066 )  //185
DX3DVERT( -1.61009, 6.65159, -16.9901 ) DX3DVNORM( -0.0344967, 0.16426, -0.985814 )  //186
DX3DVERT( -1.57051, 4.83635, -17.2954 ) DX3DVNORM( -0.0344967, 0.16426, -0.985814 )  //187
DX3DVERT( -5.03208, 2.90261, -16.3434 ) DX3DVNORM( 0.0395118, -0.909373, -0.414101 )  //188
DX3DVERT( -5.03717, 3.25884, -16.815 ) DX3DVNORM( -0.0712584, -0.768043, -0.636422 )  //189
DX3DVERT( -5.75464, 3.32697, -16.7201 ) DX3DVNORM( -0.0606874, -0.718379, -0.693 )  //190
DX3DVERT( -6.46395, 2.87958, -16.2969 ) DX3DVNORM( -0.0403522, -0.882535, -0.468512 )  //191
DX3DVERT( -5.54254, 8.46922, 15.9518 ) DX3DVNORM( -0.207308, 0.498816, 0.841549 )  //192
DX3DVERT( -5.14556, 8.00111, 16.295 ) DX3DVNORM( -0.207308, 0.498816, 0.841549 )  //193
DX3DVERT( -6.44033, 8.00111, 15.9722 ) DX3DVNORM( -0.260303, 0.534302, 0.804216 )  //194
DX3DVERT( -6.242, 8.46922, 15.6291 ) DX3DVNORM( -0.260303, 0.534302, 0.804216 )  //195
DX3DVERT( -4.50786, 14.269, 13.4907 ) DX3DVNORM( -0.50309, 0.616311, 0.605856 )  //196
DX3DVERT( -4.73112, 13.6922, 13.9273 ) DX3DVNORM( -0.550785, 0.547563, 0.629929 )  //197
DX3DVERT( -4.7573, 14.0876, 13.1807 ) DX3DVNORM( -0.711557, 0.61031, 0.34815 )  //198
DX3DVERT( -5.02558, 13.6658, 13.4823 ) DX3DVNORM( -0.711543, 0.549222, 0.438249 )  //199
DX3DVERT( -4.38703, 14.399, 13.3621 ) DX3DVNORM( -0.427248, 0.762922, 0.48519 )  //200
DX3DVERT( -4.50786, 14.269, 13.4907 ) DX3DVNORM( -0.464936, 0.664387, 0.585171 )  //201
DX3DVERT( -4.7573, 14.0876, 13.1807 ) DX3DVNORM( -0.697375, 0.612272, 0.372547 )  //202
DX3DVERT( -4.82181, 14.1882, 13.0357 ) DX3DVNORM( -0.615971, 0.695516, 0.369916 )  //203
DX3DVERT( -5.63174, 11.257, -8.58251 ) DX3DVNORM( -0.519827, 0.802721, -0.292263 )  //204
DX3DVERT( -5.23328, 13.1799, -5.34817 ) DX3DVNORM( -0.523242, 0.777997, -0.347762 )  //205
DX3DVERT( -5.31638, 13.1671, -5.29084 ) DX3DVNORM( -0.808581, 0.556781, -0.190242 )  //206
DX3DVERT( -5.63725, 11.9374, -7.17319 ) DX3DVNORM( -0.869263, 0.441226, -0.222939 )  //207
DX3DVERT( -5.741, 10.8518, -7.69346 ) DX3DVNORM( -0.809378, 0.54992, -0.206144 )  //208
DX3DVERT( -5.12378, 9.31168, -14.9586 ) DX3DVNORM( -0.152315, 0.753057, -0.640082 )  //209
DX3DVERT( -5.03522, 9.9061, -14.1127 ) DX3DVNORM( -0.20492, 0.892834, -0.401069 )  //210
DX3DVERT( -5.80431, 9.62364, -14.149 ) DX3DVNORM( -0.307949, 0.869944, -0.385181 )  //211
DX3DVERT( -5.76264, 9.14685, -14.9618 ) DX3DVNORM( -0.209069, 0.742664, -0.636192 )  //212
DX3DVERT( -4.93044, 10.6286, -11.6965 ) DX3DVNORM( -0.242404, 0.930241, -0.275485 )  //213
DX3DVERT( -5.76511, 10.2448, -11.7339 ) DX3DVNORM( -0.394508, 0.884167, -0.250225 )  //214
DX3DVERT( -5.11759, 4.57057, 16.7545 ) DX3DVNORM( -0.0718164, -0.0629545, 0.995429 )  //215
DX3DVERT( -5.10869, 3.6595, 16.6402 ) DX3DVNORM( -0.0597113, -0.12736, 0.990057 )  //216
DX3DVERT( -6.11619, 3.6595, 16.6038 ) DX3DVNORM( -0.0734305, -0.0839649, 0.993759 )  //217
DX3DVERT( -6.39256, 4.57057, 16.6223 ) DX3DVNORM( -0.0870645, -0.0418789, 0.995322 )  //218
DX3DVERT( -5.14556, 8.00111, 16.295 ) DX3DVNORM( -0.137447, 0.241607, 0.960591 )  //219
DX3DVERT( -5.14324, 6.21291, 16.748 ) DX3DVNORM( -0.111366, 0.122492, 0.986201 )  //220
DX3DVERT( -6.4861, 6.21291, 16.6158 ) DX3DVNORM( -0.133104, 0.147364, 0.980085 )  //221
DX3DVERT( -6.44033, 8.00111, 15.9722 ) DX3DVNORM( -0.162631, 0.291063, 0.94278 )  //222
DX3DVERT( -4.72208, 8.66714, -15.6238 ) DX3DVNORM( -0.127925, 0.663209, -0.737421 )  //223
DX3DVERT( -5.74182, 8.72143, -15.339 ) DX3DVNORM( -0.168832, 0.652793, -0.738483 )  //224
DX3DVERT( -5.03717, 3.25884, -16.815 ) DX3DVNORM( -0.14878, -0.0826152, -0.985413 )  //225
DX3DVERT( -4.9766, 4.90388, -16.9774 ) DX3DVNORM( -0.147363, 0.0366945, -0.988402 )  //226
DX3DVERT( -5.81624, 4.88922, -16.8173 ) DX3DVNORM( -0.173472, 0.0348436, -0.984222 )  //227
DX3DVERT( -5.75464, 3.32697, -16.7201 ) DX3DVNORM( -0.163759, -0.0796484, -0.98328 )  //228
DX3DVERT( -3.46745, 15.327, 3.50155 ) DX3DVNORM( -0.222569, 0.974917, -0.000406183 )  //229
DX3DVERT( -3.7231, 15.2696, 4.70825 ) DX3DVNORM( -0.238468, 0.970711, 0.0292047 )  //230
DX3DVERT( -4.38506, 15.043, 4.70825 ) DX3DVNORM( -0.30267, 0.952806, 0.0234794 )  //231
DX3DVERT( -4.32129, 15.1003, 3.50155 ) DX3DVNORM( -0.258859, 0.965909, -0.00344618 )  //232
DX3DVERT( -4.55231, 14.5827, -2.84285 ) DX3DVNORM( -0.395874, 0.872556, -0.286232 )  //233
DX3DVERT( -4.99807, 13.7224, -4.13574 ) DX3DVNORM( -0.742966, 0.650046, -0.159503 )  //234
DX3DVERT( -4.17548, 14.7772, 11.9312 ) DX3DVNORM( -0.320208, 0.944106, 0.0783004 )  //235
DX3DVERT( -4.35947, 14.5953, 12.8428 ) DX3DVNORM( -0.356441, 0.902273, 0.242598 )  //236
DX3DVERT( -4.67269, 14.447, 12.8452 ) DX3DVNORM( -0.479937, 0.846016, 0.232202 )  //237
DX3DVERT( -4.65125, 14.5679, 11.8228 ) DX3DVNORM( -0.425618, 0.902563, 0.0650323 )  //238
DX3DVERT( -5.10869, 3.6595, 16.6402 ) DX3DVNORM( -0.0132601, -0.6992, 0.714803 )  //239
DX3DVERT( -4.24627, 3.19556, 16.1895 ) DX3DVNORM( -0.00692238, -0.817145, 0.576391 )  //240
DX3DVERT( -6.48849, 3.19556, 16.1895 ) DX3DVNORM( -0.00816892, -0.684112, 0.729331 )  //241
DX3DVERT( -6.11619, 3.6595, 16.6038 ) DX3DVNORM( -0.00816892, -0.684112, 0.729331 )  //242
DX3DVERT( -3.96116, 15.0857, 7.11405 ) DX3DVNORM( -0.273576, 0.960719, 0.0466319 )  //243
DX3DVERT( -4.00472, 14.9445, 9.96405 ) DX3DVNORM( -0.308376, 0.949882, 0.0512759 )  //244
DX3DVERT( -4.57612, 14.6601, 9.96332 ) DX3DVNORM( -0.407999, 0.911927, 0.0438817 )  //245
DX3DVERT( -4.45787, 14.9242, 7.0707 ) DX3DVNORM( -0.352914, 0.934487, 0.046746 )  //246
DX3DVERT( -3.46993, 15.3032, 1.69344 ) DX3DVNORM( -0.195197, 0.979811, -0.0432287 )  //247
DX3DVERT( -3.46074, 15.2972, 2.99501 ) DX3DVNORM( -0.215096, 0.976532, -0.0109216 )  //248
DX3DVERT( -4.31956, 15.1171, 2.99501 ) DX3DVNORM( -0.227329, 0.973761, -0.0105221 )  //249
DX3DVERT( -4.38367, 15.0766, 1.69344 ) DX3DVNORM( -0.195356, 0.980008, -0.037692 )  //250
DX3DVERT( -3.47083, 14.9787, -1.92042 ) DX3DVNORM( -0.148241, 0.971466, -0.185143 )  //251
DX3DVERT( -4.50683, 14.8748, -1.92042 ) DX3DVNORM( -0.360419, 0.913595, -0.188263 )  //252
DX3DVERT( -6.03974, 9.79518, 15.14 ) DX3DVNORM( -0.646828, 0.385477, 0.658044 )  //253
DX3DVERT( -5.18649, 11.1464, 15.0962 ) DX3DVNORM( -0.395394, 0.442533, 0.804878 )  //254
DX3DVERT( -5.42152, 9.83236, 15.6995 ) DX3DVNORM( -0.382655, 0.34797, 0.855858 )  //255
DX3DVERT( -4.84075, 11.055, -10.548 ) DX3DVNORM( -0.351297, 0.90214, -0.250466 )  //256
DX3DVERT( -5.73263, 10.575, -10.5649 ) DX3DVNORM( -0.59228, 0.772916, -0.227607 )  //257
DX3DVERT( -4.92707, 6.65159, -16.7129 ) DX3DVNORM( -0.125546, 0.509305, -0.851379 )  //258
DX3DVERT( -4.94087, 7.2462, -16.3488 ) DX3DVNORM( -0.125546, 0.509305, -0.851379 )  //259
DX3DVERT( -5.76299, 7.26077, -16.182 ) DX3DVNORM( -0.15964, 0.514906, -0.842251 )  //260
DX3DVERT( -5.73768, 6.63669, -16.5704 ) DX3DVNORM( -0.15964, 0.514906, -0.842251 )  //261
DX3DVERT( -4.94087, 7.2462, -16.3488 ) DX3DVNORM( -0.181044, 0.332673, -0.925501 )  //262
DX3DVERT( -4.96185, 7.57884, -16.2051 ) DX3DVNORM( -0.181044, 0.332673, -0.925501 )  //263
DX3DVERT( -5.73379, 7.60088, -15.9673 ) DX3DVNORM( -0.208217, 0.461931, -0.862128 )  //264
DX3DVERT( -5.76299, 7.26077, -16.182 ) DX3DVNORM( -0.208217, 0.461931, -0.862128 )  //265
DX3DVERT( -4.92707, 6.65159, -16.7129 ) DX3DVNORM( -0.143844, 0.155553, -0.977298 )  //266
DX3DVERT( -5.73768, 6.63669, -16.5704 ) DX3DVNORM( -0.180895, 0.148876, -0.972169 )  //267
DX3DVERT( -3.05293, 3.23582, -17.0934 ) DX3DVNORM( -0.0406636, -0.843299, -0.535904 )  //268
DX3DVERT( -3.03456, 2.87958, -16.5627 ) DX3DVNORM( 0.0314165, -0.950929, -0.307811 )  //269
DX3DVERT( -3.01659, 8.00111, 16.641 ) DX3DVNORM( -0.116025, 0.506097, 0.854636 )  //270
DX3DVERT( -3.72156, 8.46922, 16.2978 ) DX3DVNORM( -0.116025, 0.506097, 0.854636 )  //271
DX3DVERT( -3.06045, 13.7192, 14.1511 ) DX3DVNORM( -0.114282, 0.502055, 0.857252 )  //272
DX3DVERT( -3.07263, 14.373, 13.7145 ) DX3DVNORM( -0.119372, 0.569386, 0.813357 )  //273
DX3DVERT( -3.07263, 14.373, 13.7145 ) DX3DVNORM( -0.11266, 0.700831, 0.704375 )  //274
DX3DVERT( -3.15161, 14.6048, 13.5357 ) DX3DVNORM( -0.117281, 0.812877, 0.570506 )  //275
DX3DVERT( -2.6797, 10.1476, -14.1215 ) DX3DVNORM( -0.0414929, 0.913873, -0.403875 )  //276
DX3DVERT( -2.69045, 9.63579, -14.9775 ) DX3DVNORM( -0.0508645, 0.766496, -0.640231 )  //277
DX3DVERT( -2.6461, 10.8473, -11.7014 ) DX3DVNORM( -0.0370639, 0.956502, -0.289362 )  //278
DX3DVERT( -2.99856, 3.6595, 16.6955 ) DX3DVNORM( -0.0454284, -0.193082, 0.98013 )  //279
DX3DVERT( -2.99814, 4.57057, 16.8963 ) DX3DVNORM( -0.0527335, -0.128257, 0.990338 )  //280
DX3DVERT( -3.01716, 6.21291, 16.8898 ) DX3DVNORM( -0.0867409, 0.101695, 0.991027 )  //281
DX3DVERT( -3.01659, 8.00111, 16.641 ) DX3DVNORM( -0.0964654, 0.150682, 0.983864 )  //282
DX3DVERT( -2.99012, 4.57003, 16.7248 ) DX3DVNORM( -0.0467645, 0.00312587, 0.998901 )  //283
DX3DVERT( -3.00914, 6.21238, 16.7183 ) DX3DVNORM( -0.0467645, 0.00312587, 0.998901 )  //284
DX3DVERT( -3.61496, 8.05554, -16.2859 ) DX3DVNORM( -0.0558244, 0.664295, -0.745382 )  //285
DX3DVERT( -2.81184, 15.419, 4.70825 ) DX3DVNORM( -0.14243, 0.988858, 0.0432719 )  //286
DX3DVERT( -2.45249, 15.5108, 3.50155 ) DX3DVNORM( -0.152846, 0.988029, 0.0208775 )  //287
DX3DVERT( -3.17686, 14.8948, 12.932 ) DX3DVNORM( -0.127886, 0.953561, 0.272702 )  //288
DX3DVERT( -3.15813, 14.9672, 11.9216 ) DX3DVNORM( -0.134685, 0.986296, 0.0952859 )  //289
DX3DVERT( -2.99856, 3.6595, 16.6955 ) DX3DVNORM( -0.0157003, -0.743678, 0.668354 )  //290
DX3DVERT( -3.21562, 15.1268, 9.98385 ) DX3DVNORM( -0.137466, 0.988752, 0.0589211 )  //291
DX3DVERT( -3.132, 15.2502, 7.0707 ) DX3DVNORM( -0.140596, 0.98872, 0.0516357 )  //292
DX3DVERT( -2.46145, 15.5275, 2.99501 ) DX3DVNORM( -0.162102, 0.986763, -0.00462482 )  //293
DX3DVERT( -2.48373, 15.4871, 1.69343 ) DX3DVNORM( -0.156158, 0.986256, -0.0539708 )  //294
DX3DVERT( -2.51693, 15.1626, -1.92042 ) DX3DVNORM( -0.129232, 0.97018, -0.20506 )  //295
DX3DVERT( -2.5206, 14.8714, -2.75325 ) DX3DVNORM( -0.0894177, 0.920662, -0.379981 )  //296
DX3DVERT( -2.61223, 11.1762, -10.5593 ) DX3DVNORM( -0.055311, 0.9633, -0.262667 )  //297
DX3DVERT( -3.68273, 11.4407, -9.27069 ) DX3DVNORM( -0.102888, 0.9325, -0.346204 )  //298
DX3DVERT( -3.22939, 7.25808, -16.5382 ) DX3DVNORM( -0.085565, 0.476664, -0.874912 )  //299
DX3DVERT( -3.19905, 6.65159, -16.8819 ) DX3DVNORM( -0.085565, 0.476664, -0.874912 )  //300
DX3DVERT( -3.58793, 7.64479, -16.4775 ) DX3DVNORM( -0.12463, 0.152612, -0.980396 )  //301
DX3DVERT( -3.22939, 7.25808, -16.5382 ) DX3DVNORM( -0.12463, 0.152612, -0.980396 )  //302
DX3DVERT( -3.19905, 6.65159, -16.8819 ) DX3DVNORM( -0.0844732, 0.165151, -0.982644 )  //303
DX3DVERT( -3.21224, 4.83635, -17.199 ) DX3DVNORM( -0.101647, 0.0821644, -0.991422 )  //304
DX3DVERT( -3.05293, 3.23582, -17.0934 ) DX3DVNORM( -0.133766, -0.0855623, -0.987312 )  //305
DX3DVERT( -5.7568, 12.085, -6.7596 ) DX3DVNORM( -0.737373, 0.630195, -0.243177 )  //306
DX3DVERT( -5.63725, 11.9374, -7.17319 ) DX3DVNORM( -0.737373, 0.630195, -0.243177 )  //307
DX3DVERT( -5.741, 10.8518, -7.69346 ) DX3DVNORM( -0.184043, 0.414208, -0.891381 )  //308
DX3DVERT( -5.63725, 11.9374, -7.17319 ) DX3DVNORM( -0.145378, 0.71895, -0.679688 )  //309
DX3DVERT( -6.33808, 11.8997, -7.08325 ) DX3DVNORM( -0.203377, 0.65563, -0.727178 )  //310
DX3DVERT( -6.34336, 10.9514, -7.48559 ) DX3DVNORM( -0.232669, 0.347815, -0.908234 )  //311
DX3DVERT( -5.7568, 12.085, -6.7596 ) DX3DVNORM( -0.0741581, 0.974243, -0.21296 )  //312
DX3DVERT( -6.448, 12.0628, -6.67524 ) DX3DVNORM( -0.135866, 0.957538, -0.254285 )  //313
DX3DVERT( -5.81141, 12.125, -6.15896 ) DX3DVNORM( -0.237528, 0.00851306, 0.971343 )  //314
DX3DVERT( -6.10314, 10.756, -6.11994 ) DX3DVNORM( -0.237528, 0.00851306, 0.971343 )  //315
DX3DVERT( -6.56343, 10.8782, -6.33192 ) DX3DVNORM( -0.180554, -0.0343769, 0.982964 )  //316
DX3DVERT( -6.54188, 12.0622, -6.23868 ) DX3DVNORM( -0.180554, -0.0343769, 0.982964 )  //317
DX3DVERT( -6.10314, 10.756, -6.11994 ) DX3DVNORM( -0.202804, -0.973718, -0.103655 )  //318
DX3DVERT( -5.741, 10.8518, -7.69346 ) DX3DVNORM( -0.202804, -0.973718, -0.103655 )  //319
DX3DVERT( -6.34336, 10.9514, -7.48559 ) DX3DVNORM( -0.119827, -0.990524, -0.0671058 )  //320
DX3DVERT( -6.56343, 10.8782, -6.33192 ) DX3DVNORM( -0.119827, -0.990524, -0.0671058 )  //321
DX3DVERT( -7.2307, 11.6591, -7.00056 ) DX3DVNORM( -0.258803, 0.58681, -0.767251 )  //322
DX3DVERT( -7.21802, 10.9251, -7.11136 ) DX3DVNORM( -0.279652, 0.278968, -0.918679 )  //323
DX3DVERT( -7.26839, 11.9113, -6.69765 ) DX3DVNORM( -0.197933, 0.93481, -0.294877 )  //324
DX3DVERT( -7.31188, 10.9542, -6.42044 ) DX3DVNORM( -0.122638, -0.0770874, 0.989453 )  //325
DX3DVERT( -7.2708, 11.9315, -6.33754 ) DX3DVNORM( -0.122638, -0.0770874, 0.989453 )  //326
DX3DVERT( -7.21802, 10.9251, -7.11136 ) DX3DVNORM( -0.035832, -0.998908, -0.0299857 )  //327
DX3DVERT( -7.31188, 10.9542, -6.42044 ) DX3DVNORM( -0.035832, -0.998908, -0.0299857 )  //328
DX3DVERT( -1.6145, 9.71103, 16.1621 ) DX3DVNORM( -0.0321245, 0.329294, 0.943681 )  //329
DX3DVERT( 0, 9.69071, 16.1649 ) DX3DVNORM( 0.00183439, 0.329606, 0.944117 )  //330
DX3DVERT( 0, 8.46922, 16.4663 ) DX3DVNORM( 0.000650873, 0.238775, 0.971075 )  //331
DX3DVERT( -1.58803, 8.46922, 16.4663 ) DX3DVNORM( -0.0357881, 0.233852, 0.971613 )  //332
DX3DVERT( -3.69095, 9.81167, 15.9939 ) DX3DVNORM( -0.112437, 0.327136, 0.938264 )  //333
DX3DVERT( -3.72156, 8.46922, 16.2978 ) DX3DVNORM( -0.122455, 0.218408, 0.968144 )  //334
DX3DVERT( -5.81141, 12.125, -6.15896 ) DX3DVNORM( -0.0597271, 0.997133, -0.0464611 )  //335
DX3DVERT( -6.54188, 12.0622, -6.23868 ) DX3DVNORM( -0.117863, 0.991964, -0.045992 )  //336
DX3DVERT( -7.2708, 11.9315, -6.33754 ) DX3DVNORM( -0.175597, 0.983416, -0.0453662 )  //337
DX3DVERT( -1.62906, 11.1081, 15.5191 ) DX3DVNORM( -0.034767, 0.421794, 0.906025 )  //338
DX3DVERT( 0, 11.0719, 15.5315 ) DX3DVNORM( 0.00208691, 0.417472, 0.908687 )  //339
DX3DVERT( -3.47739, 11.1352, 15.3697 ) DX3DVNORM( -0.10472, 0.431559, 0.895986 )  //340
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BODYR___carbodycolor_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BODYR___carbodycolor_0 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 341 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BODYR___carbodycolor_0	NULL
#define vertexbuff_KEIA_BODYR___carbodycolor_0	NULL
#endif




#if ((PT_KEIA_BODYR___carbodycolor_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR___carbodycolor_0 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BODYR___carbodycolor_0 )
	0, 1, 2, // 0 2
	3, 4, 5, // 1 5
	5, 6, 7, // 2 8
	8, 9, 10, // 3 11
	9, 11, 10, // 4 14
	12, 13, 14, // 5 17
	0, 15, 16, // 6 20
	13, 15, 14, // 7 23
	16, 15, 17, // 8 26
	18, 19, 20, // 9 29
	21, 22, 23, // 10 32
	23, 22, 24, // 11 35
	22, 25, 24, // 12 38
	26, 27, 28, // 13 41
	27, 29, 28, // 14 44
	30, 31, 29, // 15 47
	28, 29, 31, // 16 50
	12, 32, 33, // 17 53
	34, 35, 36, // 18 56
	37, 36, 35, // 19 59
	38, 39, 40, // 20 62
	39, 41, 40, // 21 65
	41, 42, 40, // 22 68
	43, 44, 45, // 23 71
	45, 44, 46, // 24 74
	2, 47, 0, // 25 77
	47, 48, 0, // 26 80
	48, 15, 0, // 27 83
	49, 50, 51, // 28 86
	50, 52, 51, // 29 89
	53, 54, 55, // 30 92
	54, 56, 55, // 31 95
	57, 9, 58, // 32 98
	9, 8, 58, // 33 101
	59, 50, 60, // 34 104
	49, 61, 50, // 35 107
	50, 61, 60, // 36 110
	3, 62, 4, // 37 113
	4, 62, 1, // 38 116
	1, 62, 2, // 39 119
	2, 62, 63, // 40 122
	11, 64, 10, // 41 125
	65, 66, 67, // 42 128
	66, 68, 67, // 43 131
	43, 69, 44, // 44 134
	69, 70, 44, // 45 137
	71, 72, 28, // 46 140
	72, 26, 28, // 47 143
	73, 74, 76, // 48 146
	74, 75, 76, // 49 149
	77, 78, 59, // 50 152
	78, 50, 59, // 51 155
	4, 79, 5, // 52 158
	5, 79, 80, // 53 161
	5, 80, 6, // 54 164
	27, 81, 29, // 55 167
	25, 27, 24, // 56 170
	82, 24, 27, // 57 173
	13, 12, 33, // 58 176
	83, 84, 85, // 59 179
	66, 85, 68, // 60 182
	68, 85, 84, // 61 185
	86, 87, 88, // 62 188
	87, 89, 88, // 63 191
	67, 90, 88, // 64 194
	90, 91, 88, // 65 197
	84, 83, 71, // 66 200
	83, 72, 71, // 67 203
	87, 86, 92, // 68 206
	69, 92, 70, // 69 209
	70, 92, 86, // 70 212
	34, 36, 23, // 71 215
	48, 93, 15, // 72 218
	93, 14, 15, // 73 221
	93, 12, 14, // 74 224
	79, 4, 16, // 75 227
	16, 4, 0, // 76 230
	94, 32, 29, // 77 233
	94, 81, 95, // 78 236
	54, 96, 56, // 79 239
	96, 97, 56, // 80 242
	75, 95, 98, // 81 245
	95, 81, 98, // 82 248
	99, 91, 30, // 83 251
	91, 90, 30, // 84 254
	30, 90, 31, // 85 257
	88, 89, 67, // 86 260
	89, 65, 67, // 87 263
	24, 82, 23, // 88 266
	23, 82, 34, // 89 269
	81, 27, 25, // 90 272
	81, 94, 29, // 91 275
	95, 100, 32, // 92 278
	100, 33, 32, // 93 281
	32, 94, 95, // 94 284
	27, 26, 82, // 95 287
	33, 100, 13, // 96 290
	100, 101, 13, // 97 293
	12, 46, 32, // 98 296
	46, 99, 32, // 99 299
	30, 29, 99, // 100 302
	32, 99, 29, // 101 305
	34, 26, 35, // 102 308
	82, 26, 34, // 103 311
	74, 100, 75, // 104 314
	100, 95, 75, // 105 317
	98, 102, 75, // 106 320
	102, 76, 75, // 107 323
	56, 76, 55, // 108 326
	76, 102, 55, // 109 329
	97, 73, 56, // 110 332
	73, 76, 56, // 111 335
	50, 78, 52, // 112 338
	17, 15, 101, // 113 341
	15, 13, 101, // 114 344
	103, 10, 104, // 115 347
	105, 7, 106, // 116 350
	7, 107, 106, // 117 353
	108, 109, 103, // 118 356
	10, 103, 8, // 119 359
	8, 103, 58, // 120 362
	58, 103, 109, // 121 365
	64, 110, 10, // 122 368
	110, 104, 10, // 123 371
	3, 5, 7, // 124 374
	105, 111, 7, // 125 377
	7, 111, 3, // 126 380
	112, 113, 115, // 127 383
	113, 114, 115, // 128 386
	116, 117, 119, // 129 389
	117, 118, 119, // 130 392
	120, 121, 123, // 131 395
	121, 122, 123, // 132 398
	124, 125, 127, // 133 401
	125, 126, 127, // 134 404
	128, 129, 131, // 135 407
	129, 130, 131, // 136 410
	129, 132, 130, // 137 413
	132, 133, 130, // 138 416
	134, 135, 137, // 139 419
	135, 136, 137, // 140 422
	138, 139, 141, // 141 425
	139, 140, 141, // 142 428
	142, 143, 145, // 143 431
	143, 144, 145, // 144 434
	146, 128, 147, // 145 437
	128, 131, 147, // 146 440
	148, 149, 151, // 147 443
	149, 150, 151, // 148 446
	152, 153, 155, // 149 449
	153, 154, 155, // 150 452
	156, 157, 159, // 151 455
	157, 158, 159, // 152 458
	160, 161, 163, // 153 461
	161, 162, 163, // 154 464
	149, 160, 150, // 155 467
	160, 163, 150, // 156 470
	164, 165, 167, // 157 473
	165, 166, 167, // 158 476
	161, 152, 162, // 159 479
	152, 155, 162, // 160 482
	168, 164, 169, // 161 485
	164, 167, 169, // 162 488
	170, 168, 171, // 163 491
	168, 169, 171, // 164 494
	132, 172, 133, // 165 497
	172, 173, 133, // 166 500
	172, 174, 173, // 167 503
	174, 175, 173, // 168 506
	165, 148, 166, // 169 509
	148, 151, 166, // 170 512
	153, 124, 154, // 171 515
	124, 127, 154, // 172 518
	176, 177, 179, // 173 521
	177, 178, 179, // 174 524
	180, 181, 183, // 175 527
	181, 182, 183, // 176 530
	184, 185, 187, // 177 533
	185, 186, 187, // 178 536
	188, 189, 191, // 179 539
	189, 190, 191, // 180 542
	192, 193, 195, // 181 545
	193, 194, 195, // 182 548
	196, 197, 198, // 183 551
	198, 197, 199, // 184 554
	200, 201, 203, // 185 557
	201, 202, 203, // 186 560
	204, 205, 208, // 187 563
	205, 206, 207, // 188 566
	205, 207, 208, // 189 569
	209, 210, 212, // 190 572
	210, 211, 212, // 191 575
	210, 213, 211, // 192 578
	213, 214, 211, // 193 581
	215, 216, 218, // 194 584
	216, 217, 218, // 195 587
	219, 220, 222, // 196 590
	220, 221, 222, // 197 593
	220, 215, 221, // 198 596
	215, 218, 221, // 199 599
	223, 209, 224, // 200 602
	209, 212, 224, // 201 605
	225, 226, 228, // 202 608
	226, 227, 228, // 203 611
	229, 230, 232, // 204 614
	230, 231, 232, // 205 617
	205, 233, 206, // 206 620
	233, 234, 206, // 207 623
	235, 236, 238, // 208 626
	236, 237, 238, // 209 629
	239, 240, 242, // 210 632
	240, 241, 242, // 211 635
	243, 244, 246, // 212 638
	244, 245, 246, // 213 641
	230, 243, 231, // 214 644
	243, 246, 231, // 215 647
	247, 248, 250, // 216 650
	248, 249, 250, // 217 653
	244, 235, 245, // 218 656
	235, 238, 245, // 219 659
	251, 247, 252, // 220 662
	247, 250, 252, // 221 665
	251, 252, 233, // 222 668
	233, 252, 234, // 223 671
	199, 197, 253, // 224 674
	197, 254, 253, // 225 677
	254, 255, 253, // 226 680
	213, 256, 214, // 227 683
	256, 257, 214, // 228 686
	256, 204, 257, // 229 689
	204, 208, 257, // 230 692
	248, 229, 249, // 231 695
	229, 232, 249, // 232 698
	236, 200, 237, // 233 701
	200, 203, 237, // 234 704
	258, 259, 261, // 235 707
	259, 260, 261, // 236 710
	262, 263, 265, // 237 713
	263, 264, 265, // 238 716
	226, 266, 227, // 239 719
	266, 267, 227, // 240 722
	115, 114, 269, // 241 725
	114, 268, 269, // 242 728
	119, 118, 271, // 243 731
	118, 270, 271, // 244 734
	123, 122, 273, // 245 737
	122, 272, 273, // 246 740
	127, 126, 275, // 247 743
	126, 274, 275, // 248 746
	131, 130, 277, // 249 749
	130, 276, 277, // 250 752
	130, 133, 276, // 251 755
	133, 278, 276, // 252 758
	137, 136, 280, // 253 761
	136, 279, 280, // 254 764
	141, 140, 282, // 255 767
	140, 281, 282, // 256 770
	145, 144, 284, // 257 773
	144, 283, 284, // 258 776
	147, 131, 285, // 259 779
	131, 277, 285, // 260 782
	151, 150, 287, // 261 785
	150, 286, 287, // 262 788
	155, 154, 289, // 263 791
	154, 288, 289, // 264 794
	159, 158, 290, // 265 797
	240, 290, 158, // 266 800
	163, 162, 292, // 267 803
	162, 291, 292, // 268 806
	150, 163, 286, // 269 809
	163, 292, 286, // 270 812
	167, 166, 294, // 271 815
	166, 293, 294, // 272 818
	162, 155, 291, // 273 821
	155, 289, 291, // 274 824
	169, 167, 295, // 275 827
	167, 294, 295, // 276 830
	171, 169, 296, // 277 833
	169, 295, 296, // 278 836
	133, 173, 278, // 279 839
	173, 297, 278, // 280 842
	173, 175, 297, // 281 845
	175, 298, 297, // 282 848
	166, 151, 293, // 283 851
	151, 287, 293, // 284 854
	154, 127, 288, // 285 857
	127, 275, 288, // 286 860
	179, 178, 300, // 287 863
	178, 299, 300, // 288 866
	183, 182, 302, // 289 869
	182, 301, 302, // 290 872
	187, 186, 304, // 291 875
	186, 303, 304, // 292 878
	269, 268, 188, // 293 881
	268, 189, 188, // 294 884
	271, 270, 192, // 295 887
	270, 193, 192, // 296 890
	273, 272, 196, // 297 893
	272, 197, 196, // 298 896
	275, 274, 200, // 299 899
	274, 201, 200, // 300 902
	277, 276, 209, // 301 905
	276, 210, 209, // 302 908
	276, 278, 210, // 303 911
	278, 213, 210, // 304 914
	280, 279, 215, // 305 917
	279, 216, 215, // 306 920
	282, 281, 219, // 307 923
	281, 220, 219, // 308 926
	281, 280, 220, // 309 929
	280, 215, 220, // 310 932
	285, 277, 223, // 311 935
	277, 209, 223, // 312 938
	305, 304, 225, // 313 941
	304, 226, 225, // 314 944
	287, 286, 229, // 315 947
	286, 230, 229, // 316 950
	289, 288, 235, // 317 953
	288, 236, 235, // 318 956
	290, 240, 239, // 319 959
	292, 291, 243, // 320 962
	291, 244, 243, // 321 965
	286, 292, 230, // 322 968
	292, 243, 230, // 323 971
	294, 293, 247, // 324 974
	293, 248, 247, // 325 977
	291, 289, 244, // 326 980
	289, 235, 244, // 327 983
	295, 294, 251, // 328 986
	294, 247, 251, // 329 989
	296, 295, 233, // 330 992
	295, 251, 233, // 331 995
	278, 297, 213, // 332 998
	297, 256, 213, // 333 1001
	297, 298, 256, // 334 1004
	298, 204, 256, // 335 1007
	293, 287, 248, // 336 1010
	287, 229, 248, // 337 1013
	288, 275, 236, // 338 1016
	275, 200, 236, // 339 1019
	300, 299, 258, // 340 1022
	299, 259, 258, // 341 1025
	302, 301, 262, // 342 1028
	301, 263, 262, // 343 1031
	304, 303, 226, // 344 1034
	303, 266, 226, // 345 1037
	45, 306, 43, // 346 1040
	306, 307, 43, // 347 1043
	308, 309, 311, // 348 1046
	309, 310, 311, // 349 1049
	309, 312, 310, // 350 1052
	312, 313, 310, // 351 1055
	314, 315, 317, // 352 1058
	315, 316, 317, // 353 1061
	318, 319, 321, // 354 1064
	319, 320, 321, // 355 1067
	311, 310, 323, // 356 1070
	310, 322, 323, // 357 1073
	310, 313, 322, // 358 1076
	313, 324, 322, // 359 1079
	317, 316, 326, // 360 1082
	316, 325, 326, // 361 1085
	321, 320, 328, // 362 1088
	320, 327, 328, // 363 1091
	329, 330, 332, // 364 1094
	330, 331, 332, // 365 1097
	333, 329, 334, // 366 1100
	329, 332, 334, // 367 1103
	1, 0, 4, // 368 1106
	313, 312, 336, // 369 1109
	312, 335, 336, // 370 1112
	324, 313, 337, // 371 1115
	313, 336, 337, // 372 1118
	338, 339, 329, // 373 1121
	339, 330, 329, // 374 1124
	340, 338, 333, // 375 1127
	338, 329, 333, // 376 1130
	254, 340, 255, // 377 1133
	340, 333, 255, // 378 1136
DX3DINDEX_END
#endif

#else
#define index_KEIA_BODYR___carbodycolor_0	NULL
#endif




#if ((PT_KEIA_BODYR___carbodycolor_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BODYR___carbodycolor_0 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BODYR___carbodycolor_0_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BODYR___carbodycolor_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BODYR___carbodycolor_0 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BODYR___carbodycolor_0_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BODYR___carbodycolor_0_VERTEXSTRIP 	NULL
#endif






#if ((PT_KEIA_BODYR___carwindow_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR___carwindow_1 == PT_TRILIST ) || ((PT_KEIA_BODYR___carwindow_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BODYR___carwindow_1 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BODYR___carwindow_1 )
DX3DVERT( -6.10314, 11.6562, 11.5688 ) DX3DVNORM( -0.922308, 0.382136, 0.0576246 )  //0
DX3DVERT( -6.10314, 11.3399, 4.15916 ) DX3DVNORM( -0.940003, 0.34025, -0.0249735 )  //1
DX3DVERT( -5.30479, 13.2617, 11.3012 ) DX3DVNORM( -0.890367, 0.45258, 0.0491718 )  //2
DX3DVERT( -5.42864, 13.1938, 4.19159 ) DX3DVNORM( -0.917661, 0.39735, 0.00337504 )  //3
DX3DVERT( -6.10314, 10.756, -6.11994 ) DX3DVNORM( -0.973222, 0.229794, -0.00587407 )  //4
DX3DVERT( -5.73974, 12.2384, -5.95772 ) DX3DVNORM( -0.937569, 0.34286, 0.0584109 )  //5
DX3DVERT( -6.10314, 11.1959, 2.64114 ) DX3DVNORM( -0.95519, 0.295851, -0.00916885 )  //6
DX3DVERT( -5.42864, 13.2151, 2.78333 ) DX3DVNORM( -0.920267, 0.391143, -0.01074 )  //7
DX3DVERT( -4.95835, 14.2459, 9.95837 ) DX3DVNORM( -0.830101, 0.553889, 0.0643311 )  //8
DX3DVERT( -4.75679, 14.4766, 5.20322 ) DX3DVNORM( -0.852271, 0.523101, 0.000710866 )  //9
DX3DVERT( -4.75679, 14.5006, 4.137 ) DX3DVNORM( -0.831838, 0.554463, 0.0248353 )  //10
DX3DVERT( -5.07054, 13.6035, -3.61918 ) DX3DVNORM( -0.89591, 0.443898, -0.017292 )  //11
DX3DVERT( -4.72561, 14.3795, -1.92301 ) DX3DVNORM( -0.890196, 0.455314, -0.0155117 )  //12
DX3DVERT( -4.75679, 14.6343, 2.93016 ) DX3DVNORM( -0.839172, 0.54369, 0.0138297 )  //13
DX3DVERT( 0, 11.4407, -9.84271 ) DX3DVNORM( -0.0104821, 0.923228, -0.38411 )  //14
DX3DVERT( 0, 13.5163, -5.58214 ) DX3DVNORM( -0.00895116, 0.897776, -0.440362 )  //15
DX3DVERT( -1.75418, 13.5163, -5.58214 ) DX3DVNORM( -0.0252799, 0.895561, -0.444221 )  //16
DX3DVERT( -1.72025, 11.4407, -9.69568 ) DX3DVNORM( -0.0338921, 0.927828, -0.371466 )  //17
DX3DVERT( 0, 14.9056, -2.71533 ) DX3DVNORM( 0.000872635, 0.910911, -0.412601 )  //18
DX3DVERT( -1.88331, 14.9077, -2.71857 ) DX3DVNORM( -0.0204505, 0.914552, -0.403951 )  //19
DX3DVERT( 0, 13.7145, 14.3196 ) DX3DVNORM( 0.000587943, 0.486467, 0.873699 )  //20
DX3DVERT( 0, 11.0719, 15.5315 ) DX3DVNORM( 0.00208691, 0.417472, 0.908687 )  //21
DX3DVERT( -1.62906, 11.1081, 15.5191 ) DX3DVNORM( -0.034767, 0.421794, 0.906025 )  //22
DX3DVERT( -1.65623, 13.7145, 14.3196 ) DX3DVNORM( -0.0456145, 0.48821, 0.871533 )  //23
DX3DVERT( -2.55176, 13.5163, -5.58214 ) DX3DVNORM( -0.101096, 0.887225, -0.450123 )  //24
DX3DVERT( -3.68273, 11.4407, -9.27069 ) DX3DVNORM( -0.102888, 0.9325, -0.346204 )  //25
DX3DVERT( -2.5206, 14.8714, -2.75325 ) DX3DVNORM( -0.0894177, 0.920662, -0.379981 )  //26
DX3DVERT( -3.47739, 11.1352, 15.3697 ) DX3DVNORM( -0.10472, 0.431559, 0.895986 )  //27
DX3DVERT( -3.06045, 13.7192, 14.1511 ) DX3DVNORM( -0.114282, 0.502055, 0.857252 )  //28
DX3DVERT( -5.23328, 13.1799, -5.34817 ) DX3DVNORM( -0.523242, 0.777997, -0.347762 )  //29
DX3DVERT( -5.63174, 11.257, -8.58251 ) DX3DVNORM( -0.519827, 0.802721, -0.292263 )  //30
DX3DVERT( -4.55231, 14.5827, -2.84285 ) DX3DVNORM( -0.395874, 0.872556, -0.286232 )  //31
DX3DVERT( -5.18649, 11.1464, 15.0962 ) DX3DVNORM( -0.395394, 0.442533, 0.804878 )  //32
DX3DVERT( -4.73112, 13.6922, 13.9273 ) DX3DVNORM( -0.550785, 0.547563, 0.629929 )  //33
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BODYR___carwindow_1 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BODYR___carwindow_1 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 34 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BODYR___carwindow_1	NULL
#define vertexbuff_KEIA_BODYR___carwindow_1	NULL
#endif




#if ((PT_KEIA_BODYR___carwindow_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR___carwindow_1 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BODYR___carwindow_1 )
	0, 1, 2, // 0 2
	1, 3, 2, // 1 5
	4, 5, 6, // 2 8
	5, 7, 6, // 3 11
	2, 3, 8, // 4 14
	8, 3, 9, // 5 17
	9, 3, 10, // 6 20
	5, 11, 7, // 7 23
	11, 12, 7, // 8 26
	7, 12, 13, // 9 29
	14, 15, 17, // 10 32
	15, 16, 17, // 11 35
	15, 18, 16, // 12 38
	18, 19, 16, // 13 41
	20, 21, 23, // 14 44
	21, 22, 23, // 15 47
	17, 16, 25, // 16 50
	16, 24, 25, // 17 53
	16, 19, 24, // 18 56
	19, 26, 24, // 19 59
	23, 22, 28, // 20 62
	22, 27, 28, // 21 65
	25, 24, 30, // 22 68
	24, 29, 30, // 23 71
	24, 26, 29, // 24 74
	26, 31, 29, // 25 77
	28, 27, 33, // 26 80
	27, 32, 33, // 27 83
DX3DINDEX_END
#endif

#else
#define index_KEIA_BODYR___carwindow_1	NULL
#endif




#if ((PT_KEIA_BODYR___carwindow_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BODYR___carwindow_1 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BODYR___carwindow_1_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BODYR___carwindow_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BODYR___carwindow_1 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BODYR___carwindow_1_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BODYR___carwindow_1_VERTEXSTRIP 	NULL
#endif






#if ((PT_KEIA_BODYR___carwinker_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR___carwinker_2 == PT_TRILIST ) || ((PT_KEIA_BODYR___carwinker_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BODYR___carwinker_2 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BODYR___carwinker_2 )
DX3DVERT( -6.03974, 9.79518, 15.14 ) DX3DVNORM( -0.646828, 0.385477, 0.658044 )  //0
DX3DVERT( -5.42152, 9.83236, 15.6995 ) DX3DVNORM( -0.382655, 0.34797, 0.855858 )  //1
DX3DVERT( -5.54254, 8.46922, 15.9518 ) DX3DVNORM( -0.363497, 0.250906, 0.897171 )  //2
DX3DVERT( -6.242, 8.46922, 15.6291 ) DX3DVNORM( -0.539063, 0.283469, 0.793131 )  //3
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BODYR___carwinker_2 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BODYR___carwinker_2 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 4 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BODYR___carwinker_2	NULL
#define vertexbuff_KEIA_BODYR___carwinker_2	NULL
#endif




#if ((PT_KEIA_BODYR___carwinker_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR___carwinker_2 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BODYR___carwinker_2 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
DX3DINDEX_END
#endif

#else
#define index_KEIA_BODYR___carwinker_2	NULL
#endif




#if ((PT_KEIA_BODYR___carwinker_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BODYR___carwinker_2 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BODYR___carwinker_2_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BODYR___carwinker_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BODYR___carwinker_2 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BODYR___carwinker_2_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BODYR___carwinker_2_VERTEXSTRIP 	NULL
#endif






#if ((PT_KEIA_BODYR___carbodyblack_3 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR___carbodyblack_3 == PT_TRILIST ) || ((PT_KEIA_BODYR___carbodyblack_3 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BODYR___carbodyblack_3 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BODYR___carbodyblack_3 )
DX3DVERT( 0, 7.93467, -12.0314 ) DX3DVNORM( 0, -0.96727, 0.25375 )  //0
DX3DVERT( 0, 7.62735, -13.2029 ) DX3DVNORM( 0.0217593, -0.950934, 0.308627 )  //1
DX3DVERT( -1.64654, 7.62735, -13.2029 ) DX3DVNORM( 0.58901, -0.763993, 0.263404 )  //2
DX3DVERT( -1.65828, 7.93467, -12.0314 ) DX3DVNORM( 0.580879, -0.785899, 0.211995 )  //3
DX3DVERT( 0, 6.88511, 13.753 ) DX3DVNORM( 0.112346, -0.981522, -0.154899 )  //4
DX3DVERT( 0, 6.94861, 12.2451 ) DX3DVNORM( -0.0195186, -0.904144, 0.426782 )  //5
DX3DVERT( -1.61544, 6.29517, 11.0253 ) DX3DVNORM( 0.547934, -0.703056, 0.4533 )  //6
DX3DVERT( -1.60306, 7.12866, 13.6521 ) DX3DVNORM( 0.616773, -0.770641, -0.160324 )  //7
DX3DVERT( 0, 6.57468, 15.2085 ) DX3DVNORM( 0.219837, -0.795835, -0.564196 )  //8
DX3DVERT( -1.56823, 6.12401, 14.6084 ) DX3DVNORM( 0.620045, -0.622434, -0.477619 )  //9
DX3DVERT( 0, 2.98897, 10.0941 ) DX3DVNORM( 8.46506e-008, -0.998595, 0.0529903 )  //10
DX3DVERT( 0, 2.58843, 2.54585 ) DX3DVNORM( 1.58532e-007, -0.999753, 0.0222432 )  //11
DX3DVERT( -1.49538, 2.58843, 2.54585 ) DX3DVNORM( -0.00602875, -0.999828, 0.0175444 )  //12
DX3DVERT( -1.48551, 2.98897, 10.0941 ) DX3DVNORM( 0.045493, -0.997824, 0.0477188 )  //13
DX3DVERT( 0, 3.58986, 10.0744 ) DX3DVNORM( -0.0141741, -0.0400567, 0.999097 )  //14
DX3DVERT( 0, 2.98897, 10.0941 ) DX3DVNORM( 0, 0.0327704, 0.999463 )  //15
DX3DVERT( -1.48551, 2.98897, 10.0941 ) DX3DVNORM( 0.492441, 0.0470023, 0.869076 )  //16
DX3DVERT( -1.50809, 3.58986, 10.0744 ) DX3DVNORM( 0.488995, -0.00318352, 0.872281 )  //17
DX3DVERT( 0, 2.71001, -15.8935 ) DX3DVNORM( 0.00357888, -0.955984, -0.293396 )  //18
DX3DVERT( 0, 2.87959, -16.4276 ) DX3DVNORM( 0.00441769, -0.93151, -0.363688 )  //19
DX3DVERT( -1.52188, 2.87959, -16.4646 ) DX3DVNORM( -0.0253106, -0.949557, -0.312572 )  //20
DX3DVERT( -1.51699, 2.71001, -15.8935 ) DX3DVNORM( -0.0529906, -0.987003, -0.151716 )  //21
DX3DVERT( 0, 4.65833, -15.9023 ) DX3DVNORM( 0.0621376, 0.0527763, 0.996671 )  //22
DX3DVERT( 0, 2.71001, -15.8935 ) DX3DVNORM( 0.0628282, -0.0444171, 0.997036 )  //23
DX3DVERT( -1.51699, 2.71001, -15.8935 ) DX3DVNORM( 0.565402, -0.0348429, 0.824079 )  //24
DX3DVERT( -1.56942, 4.65833, -15.7079 ) DX3DVNORM( 0.547778, 0.0747048, 0.833281 )  //25
DX3DVERT( 0, 3.24899, -16.9902 ) DX3DVNORM( 6.80385e-005, -0.0657942, -0.997833 )  //26
DX3DVERT( 0, 4.84952, -17.0957 ) DX3DVNORM( 6.80385e-005, -0.0657942, -0.997833 )  //27
DX3DVERT( -1.56443, 4.84988, -17.0959 ) DX3DVNORM( -0.0304002, -0.0676416, -0.997246 )  //28
DX3DVERT( -1.52549, 3.24936, -16.9903 ) DX3DVNORM( -0.0304002, -0.0676416, -0.997246 )  //29
DX3DVERT( 0, 4.66434, -9.1048 ) DX3DVNORM( 1.71615e-007, -0.166176, -0.986096 )  //30
DX3DVERT( 0, 6.10662, -9.48058 ) DX3DVNORM( -1.1321e-007, -0.390041, -0.920798 )  //31
DX3DVERT( -1.59782, 6.10662, -9.48058 ) DX3DVNORM( 0.534065, -0.314516, -0.784764 )  //32
DX3DVERT( -1.55783, 4.66434, -9.1048 ) DX3DVNORM( 0.511652, -0.129289, -0.849409 )  //33
DX3DVERT( 0, 3.19556, 16.1895 ) DX3DVNORM( 0.0314737, -0.0123665, -0.999428 )  //34
DX3DVERT( 0, 5.27935, 16.2105 ) DX3DVNORM( 0.167935, -0.397951, -0.901905 )  //35
DX3DVERT( -1.53319, 5.1627, 16.1169 ) DX3DVNORM( 0.620733, -0.322181, -0.714766 )  //36
DX3DVERT( -1.48339, 3.19556, 16.1895 ) DX3DVNORM( 0.514657, -0.00503068, -0.857381 )  //37
DX3DVERT( 0, 7.29236, -14.261 ) DX3DVNORM( 0.0457522, -0.902874, 0.427464 )  //38
DX3DVERT( 0, 6.53304, -15.4513 ) DX3DVNORM( 0.0255471, -0.643256, 0.765225 )  //39
DX3DVERT( -1.60999, 6.53304, -15.4513 ) DX3DVNORM( 0.606657, -0.506032, 0.613106 )  //40
DX3DVERT( -1.63011, 7.19584, -14.1163 ) DX3DVNORM( 0.596364, -0.721059, 0.352736 )  //41
DX3DVERT( 0, 6.0611, 10.9679 ) DX3DVNORM( -0.0444855, -0.651814, 0.757073 )  //42
DX3DVERT( -1.61271, 6.0611, 10.9679 ) DX3DVNORM( 0.501892, -0.483597, 0.717105 )  //43
DX3DVERT( 0, 2.68697, -9.01331 ) DX3DVNORM( 2.32264e-007, -0.999964, -0.00852502 )  //44
DX3DVERT( -1.50979, 2.68697, -9.01331 ) DX3DVNORM( -0.0575608, -0.998261, -0.0127113 )  //45
DX3DVERT( 0, 2.68697, -9.01331 ) DX3DVNORM( 3.47741e-007, -0.00603051, -0.999982 )  //46
DX3DVERT( 0, 3.57674, -9.01868 ) DX3DVNORM( 4.57135e-007, -0.0425134, -0.999096 )  //47
DX3DVERT( -1.53138, 3.57674, -9.01868 ) DX3DVNORM( 0.503215, -0.0244972, -0.863814 )  //48
DX3DVERT( -1.50979, 2.68697, -9.01331 ) DX3DVNORM( 0.501786, 0.00696224, -0.864964 )  //49
DX3DVERT( 0, 5.14044, 10.4031 ) DX3DVNORM( -0.00720388, -0.412669, 0.910853 )  //50
DX3DVERT( -1.58215, 5.14044, 10.4031 ) DX3DVNORM( 0.521317, -0.337161, 0.783933 )  //51
DX3DVERT( 0, 7.15847, -10.1204 ) DX3DVNORM( 0, -0.747299, -0.664487 )  //52
DX3DVERT( 0, 7.67255, -11.2434 ) DX3DVNORM( 2.29025e-009, -0.930432, -0.366464 )  //53
DX3DVERT( -1.64934, 7.67255, -11.2434 ) DX3DVNORM( 0.577624, -0.756626, -0.306378 )  //54
DX3DVERT( -1.62987, 7.15847, -10.1204 ) DX3DVNORM( 0.577029, -0.598321, -0.555923 )  //55
DX3DVERT( 0, 4.46029, 10.216 ) DX3DVNORM( -0.0213773, -0.205235, 0.978479 )  //56
DX3DVERT( -1.5422, 4.25643, 10.1061 ) DX3DVNORM( 0.498286, -0.147408, 0.85439 )  //57
DX3DVERT( 0, 7.93467, -12.0314 ) DX3DVNORM( 4.57381e-009, -0.948883, -0.315628 )  //58
DX3DVERT( -1.65828, 7.93467, -12.0314 ) DX3DVNORM( 0.578871, -0.771747, -0.263277 )  //59
DX3DVERT( 0, 5.27403, -15.8979 ) DX3DVNORM( 0.031385, -0.095329, 0.994951 )  //60
DX3DVERT( -1.58438, 5.27403, -15.8979 ) DX3DVNORM( 0.557609, -0.0364505, 0.829303 )  //61
DX3DVERT( 0, 7.64479, -16.6563 ) DX3DVNORM( -0.0137569, 0.492402, -0.870259 )  //62
DX3DVERT( 0, 8.00616, -16.4774 ) DX3DVNORM( -0.0137569, 0.492402, -0.870259 )  //63
DX3DVERT( -1.65025, 8.00863, -16.4244 ) DX3DVNORM( -0.0394948, 0.48403, -0.87416 )  //64
DX3DVERT( -1.62592, 7.64479, -16.6562 ) DX3DVNORM( -0.0394948, 0.48403, -0.87416 )  //65
DX3DVERT( -3.41507, 7.93467, -12.0314 ) DX3DVNORM( -0.645977, -0.757294, 0.0960183 )  //66
DX3DVERT( -3.41121, 7.62735, -13.2029 ) DX3DVNORM( -0.657633, -0.727244, 0.196559 )  //67
DX3DVERT( -6.92038, 7.33589, -12.9482 ) DX3DVNORM( 0.115868, -0.95845, 0.260668 )  //68
DX3DVERT( -6.9191, 7.29136, -12.0314 ) DX3DVNORM( 0.135521, -0.983, 0.123871 )  //69
DX3DVERT( -3.37082, 7.12866, 13.6521 ) DX3DVNORM( -0.709921, -0.691754, -0.132241 )  //70
DX3DVERT( -3.37473, 6.29517, 11.0253 ) DX3DVNORM( -0.705888, -0.618226, 0.345713 )  //71
DX3DVERT( -6.9431, 6.82883, 12.0628 ) DX3DVNORM( 0.00276946, -0.884243, 0.467019 )  //72
DX3DVERT( -7.0516, 7.08147, 13.5271 ) DX3DVNORM( -0.00370696, -0.998855, -0.047689 )  //73
DX3DVERT( -3.85553, 6.53112, 15.2521 ) DX3DVNORM( -0.64733, -0.617843, -0.446356 )  //74
DX3DVERT( -7.04739, 6.45971, 15.1905 ) DX3DVNORM( 0.0347003, -0.792844, -0.608436 )  //75
DX3DVERT( -3.32111, 2.98897, 10.0941 ) DX3DVNORM( -0.0949176, -0.994656, 0.040612 )  //76
DX3DVERT( -3.33129, 2.58843, 2.54585 ) DX3DVNORM( 0.0132877, -0.999852, 0.0109561 )  //77
DX3DVERT( -6.65927, 2.58843, 2.54585 ) DX3DVNORM( 1.47623e-007, -0.999753, 0.0222431 )  //78
DX3DVERT( -6.65927, 2.98897, 10.0941 ) DX3DVNORM( 1.53192e-007, -0.998595, 0.0529903 )  //79
DX3DVERT( -3.33096, 3.58986, 10.0744 ) DX3DVNORM( -0.701246, -0.0187405, 0.712673 )  //80
DX3DVERT( -3.32111, 2.98897, 10.0941 ) DX3DVNORM( -0.70094, 0.0118943, 0.713121 )  //81
DX3DVERT( -6.65927, 2.98897, 10.0941 ) DX3DVNORM( 3.48054e-008, 0.0327696, 0.999463 )  //82
DX3DVERT( -6.77061, 3.58986, 10.0744 ) DX3DVNORM( 3.87255e-008, -0.0073835, 0.999973 )  //83
DX3DVERT( -3.26486, 2.73303, -15.8666 ) DX3DVNORM( 0.148363, -0.976778, -0.154575 )  //84
DX3DVERT( -5.03208, 2.90261, -16.3434 ) DX3DVNORM( 0.0395118, -0.909373, -0.414101 )  //85
DX3DVERT( -6.46395, 2.87958, -16.2969 ) DX3DVNORM( -0.0403522, -0.882535, -0.468512 )  //86
DX3DVERT( -6.69345, 2.79517, -15.7022 ) DX3DVNORM( -0.0168793, -0.978069, -0.207595 )  //87
DX3DVERT( -3.3782, 4.75598, -16.0732 ) DX3DVNORM( -0.665441, -0.100838, 0.739608 )  //88
DX3DVERT( -3.26486, 2.73303, -15.8666 ) DX3DVNORM( -0.67625, -0.00370702, 0.736663 )  //89
DX3DVERT( -6.69345, 2.79517, -15.7022 ) DX3DVNORM( 0.0814974, 0.0505603, 0.99539 )  //90
DX3DVERT( -7.00588, 4.24239, -15.6369 ) DX3DVNORM( 0.110975, -0.0962459, 0.989152 )  //91
DX3DVERT( -3.36867, 4.66434, -9.1048 ) DX3DVNORM( -0.697964, -0.130783, -0.704089 )  //92
DX3DVERT( -3.38625, 6.10662, -9.48058 ) DX3DVNORM( -0.689906, -0.313522, -0.652482 )  //93
DX3DVERT( -7.03226, 5.72437, -9.41341 ) DX3DVNORM( 0.0359079, -0.423318, -0.905269 )  //94
DX3DVERT( -6.995, 4.66434, -9.1048 ) DX3DVNORM( 0.00248742, -0.172084, -0.985079 )  //95
DX3DVERT( -4.24627, 3.19556, 16.1895 ) DX3DVNORM( -0.523016, 0.210363, -0.825955 )  //96
DX3DVERT( -3.33653, 5.27935, 16.2105 ) DX3DVNORM( -0.653746, -0.188344, -0.7329 )  //97
DX3DVERT( -6.9507, 5.27935, 15.983 ) DX3DVNORM( 0.0413813, -0.325761, -0.944546 )  //98
DX3DVERT( -6.48849, 3.19556, 16.1895 ) DX3DVNORM( 0.038763, -0.0486091, -0.998065 )  //99
DX3DVERT( -3.40614, 7.19584, -14.1163 ) DX3DVNORM( -0.657246, -0.670799, 0.343592 )  //100
DX3DVERT( -3.39818, 6.53304, -15.4513 ) DX3DVNORM( -0.662737, -0.49785, 0.559397 )  //101
DX3DVERT( -6.98288, 6.19521, -14.8777 ) DX3DVNORM( 0.125013, -0.843901, 0.52173 )  //102
DX3DVERT( -6.96398, 6.96348, -13.9006 ) DX3DVNORM( 0.109786, -0.881972, 0.458336 )  //103
DX3DVERT( -3.37859, 6.0611, 10.9679 ) DX3DVNORM( -0.691799, -0.459002, 0.557433 )  //104
DX3DVERT( -7.0377, 6.0611, 10.9679 ) DX3DVNORM( 0.0192543, -0.647053, 0.762202 )  //105
DX3DVERT( -3.3478, 2.68697, -9.01331 ) DX3DVNORM( 0.12164, -0.992394, -0.0189251 )  //106
DX3DVERT( -6.65927, 2.68697, -9.01331 ) DX3DVNORM( 1.41914e-007, -0.999964, -0.00852506 )  //107
DX3DVERT( -3.3478, 2.68697, -9.01331 ) DX3DVNORM( -0.697438, -0.0116589, -0.71655 )  //108
DX3DVERT( -3.35716, 3.57674, -9.01868 ) DX3DVNORM( -0.697586, -0.0378036, -0.715503 )  //109
DX3DVERT( -6.8808, 3.57674, -9.01867 ) DX3DVNORM( -2.38698e-007, -0.0425139, -0.999096 )  //110
DX3DVERT( -6.65927, 2.68697, -9.01331 ) DX3DVNORM( -4.72512e-007, -0.0060316, -0.999982 )  //111
DX3DVERT( -3.3654, 5.14044, 10.4031 ) DX3DVNORM( -0.700488, -0.31281, 0.641457 )  //112
DX3DVERT( -7.03608, 5.14044, 10.4031 ) DX3DVNORM( 4.16256e-007, -0.423413, 0.905937 )  //113
DX3DVERT( -3.40081, 7.15847, -10.1204 ) DX3DVNORM( -0.673325, -0.568322, -0.47291 )  //114
DX3DVERT( -3.41032, 7.67255, -11.2434 ) DX3DVNORM( -0.643023, -0.719387, -0.262685 )  //115
DX3DVERT( -6.9191, 7.0469, -10.9858 ) DX3DVNORM( 0.148107, -0.926904, -0.344838 )  //116
DX3DVERT( -7.03124, 6.60482, -10.1204 ) DX3DVNORM( 0.102722, -0.758788, -0.643187 )  //117
DX3DVERT( -3.34571, 4.25643, 10.1061 ) DX3DVNORM( -0.703421, -0.146341, 0.695546 )  //118
DX3DVERT( -7.02576, 4.25643, 10.1061 ) DX3DVNORM( 7.81195e-008, -0.18479, 0.982778 )  //119
DX3DVERT( -3.41507, 7.93467, -12.0314 ) DX3DVNORM( -0.635705, -0.744817, -0.202798 )  //120
DX3DVERT( -6.9191, 7.29136, -12.0314 ) DX3DVNORM( 0.162415, -0.950985, -0.26315 )  //121
DX3DVERT( -3.38741, 5.27403, -15.8979 ) DX3DVNORM( -0.64572, -0.258891, 0.718347 )  //122
DX3DVERT( -6.96771, 5.20149, -15.4461 ) DX3DVNORM( 0.145645, -0.323943, 0.934799 )  //123
DX3DVERT( -6.98288, 6.19521, -14.8777 ) DX3DVNORM( 0.152219, -0.404524, 0.90177 )  //124
DX3DVERT( -3.26886, 3.0418, -12.0772 ) DX3DVNORM( 0.947842, -0.146039, 0.283316 )  //125
DX3DVERT( -3.26665, 2.87499, 13.0805 ) DX3DVNORM( 0.970544, -0.17054, 0.170178 )  //126
DX3DVERT( -2.35337, 2.58843, 2.54585 ) DX3DVNORM( 0.00722249, -0.999955, 0.00617041 )  //127
DX3DVERT( -3.26665, 2.87499, 13.0805 ) DX3DVNORM( -0.0495266, -0.998143, 0.0354546 )  //128
DX3DVERT( -3.03456, 2.87958, -16.5627 ) DX3DVNORM( 0.0314165, -0.950929, -0.307811 )  //129
DX3DVERT( -3.26886, 3.0418, -12.0772 ) DX3DVNORM( 0.102833, -0.993293, -0.0528645 )  //130
DX3DVERT( -3.20009, 4.85025, -16.9996 ) DX3DVNORM( -0.0608401, -0.0694261, -0.99573 )  //131
DX3DVERT( -3.04077, 3.24972, -16.8941 ) DX3DVNORM( -0.0608401, -0.0694261, -0.99573 )  //132
DX3DVERT( -3.26886, 3.0418, -12.0772 ) DX3DVNORM( 0.923007, -0.15275, -0.353164 )  //133
DX3DVERT( -3.26886, 3.0418, -12.0772 ) DX3DVNORM( 0.0642997, -0.997658, -0.0233239 )  //134
DX3DVERT( -3.61496, 8.05554, -16.2859 ) DX3DVNORM( -0.14209, 0.474837, -0.868528 )  //135
DX3DVERT( -3.58793, 7.64479, -16.4775 ) DX3DVNORM( -0.14209, 0.474837, -0.868528 )  //136
DX3DVERT( -3.26886, 3.0418, -12.0772 ) DX3DVNORM( -0.999478, -0.0305413, 0.0105638 )  //137
DX3DVERT( -3.26665, 2.87499, 13.0805 ) DX3DVNORM( -0.999447, 0.00296687, -0.0331125 )  //138
DX3DVERT( -3.26886, 3.0418, -12.0772 ) DX3DVNORM( -0.999635, -0.0208675, -0.0171651 )  //139
DX3DVERT( -1.48339, 3.19556, 16.1895 ) DX3DVNORM( -0.0074266, -0.850427, 0.52604 )  //140
DX3DVERT( -3.26665, 2.87499, 13.0805 ) DX3DVNORM( 0, -0.994726, 0.102564 )  //141
DX3DVERT( -4.24627, 3.19556, 16.1895 ) DX3DVNORM( -0.00692238, -0.817145, 0.576391 )  //142
DX3DVERT( 0, 4.83635, -17.2955 ) DX3DVNORM( -0.000116965, -0.997771, 0.0667319 )  //143
DX3DVERT( -1.57051, 4.83635, -17.2954 ) DX3DVNORM( 0.00189778, -0.997712, 0.0675808 )  //144
DX3DVERT( -1.56443, 4.84988, -17.0959 ) DX3DVNORM( 0.00189778, -0.997712, 0.0675808 )  //145
DX3DVERT( 0, 4.84952, -17.0957 ) DX3DVNORM( -0.000116965, -0.997771, 0.0667319 )  //146
DX3DVERT( -1.53157, 3.23582, -17.1899 ) DX3DVNORM( -0.00205121, 0.997712, -0.067574 )  //147
DX3DVERT( 0, 3.23582, -17.19 ) DX3DVNORM( 0.00011936, 0.997771, -0.0667333 )  //148
DX3DVERT( 0, 3.24899, -16.9902 ) DX3DVNORM( 0.00011936, 0.997771, -0.0667333 )  //149
DX3DVERT( -1.52549, 3.24936, -16.9903 ) DX3DVNORM( -0.00205121, 0.997712, -0.067574 )  //150
DX3DVERT( -3.21224, 4.83635, -17.199 ) DX3DVNORM( 0.00391252, -0.997648, 0.0684294 )  //151
DX3DVERT( -3.20009, 4.85025, -16.9996 ) DX3DVNORM( 0.00391252, -0.997648, 0.0684294 )  //152
DX3DVERT( -3.21224, 4.83635, -17.199 ) DX3DVNORM( 0.993263, 0.0944394, -0.067153 )  //153
DX3DVERT( -3.05293, 3.23582, -17.0934 ) DX3DVNORM( 0.993263, 0.0944394, -0.067153 )  //154
DX3DVERT( -3.04077, 3.24972, -16.8941 ) DX3DVNORM( 0.993263, 0.0944394, -0.067153 )  //155
DX3DVERT( -3.20009, 4.85025, -16.9996 ) DX3DVNORM( 0.993263, 0.0944394, -0.067153 )  //156
DX3DVERT( -3.05293, 3.23582, -17.0934 ) DX3DVNORM( -0.00422176, 0.997648, -0.0684143 )  //157
DX3DVERT( -3.04077, 3.24972, -16.8941 ) DX3DVNORM( -0.00422176, 0.997648, -0.0684143 )  //158
DX3DVERT( 0, 4.57057, 16.9654 ) DX3DVNORM( 2.35774e-005, 0.999993, -0.00375271 )  //159
DX3DVERT( -1.51125, 4.57057, 16.9654 ) DX3DVNORM( 0.000101241, 0.999994, -0.00354245 )  //160
DX3DVERT( -1.50724, 4.56996, 16.7937 ) DX3DVNORM( 0.000101241, 0.999994, -0.00354245 )  //161
DX3DVERT( 0, 4.56989, 16.7937 ) DX3DVNORM( 2.35774e-005, 0.999993, -0.00375271 )  //162
DX3DVERT( -1.5504, 6.21291, 16.9589 ) DX3DVNORM( -0.000102162, -0.999994, 0.00354291 )  //163
DX3DVERT( 0, 6.21291, 16.9589 ) DX3DVNORM( -2.29812e-005, -0.999993, 0.0037524 )  //164
DX3DVERT( 0, 6.21223, 16.7872 ) DX3DVNORM( -2.29812e-005, -0.999993, 0.0037524 )  //165
DX3DVERT( -1.54639, 6.21231, 16.7872 ) DX3DVNORM( -0.000102162, -0.999994, 0.00354291 )  //166
DX3DVERT( -2.99814, 4.57057, 16.8963 ) DX3DVNORM( 0.000178904, 0.999994, -0.00333219 )  //167
DX3DVERT( -2.99012, 4.57003, 16.7248 ) DX3DVNORM( 0.000178904, 0.999994, -0.00333219 )  //168
DX3DVERT( -2.99814, 4.57057, 16.8963 ) DX3DVNORM( 0.998841, 0.0117553, 0.0466629 )  //169
DX3DVERT( -3.01716, 6.21291, 16.8898 ) DX3DVNORM( 0.998841, 0.0117553, 0.0466629 )  //170
DX3DVERT( -3.00914, 6.21238, 16.7183 ) DX3DVNORM( 0.998841, 0.0117553, 0.0466629 )  //171
DX3DVERT( -2.99012, 4.57003, 16.7248 ) DX3DVNORM( 0.998841, 0.0117553, 0.0466629 )  //172
DX3DVERT( -3.01716, 6.21291, 16.8898 ) DX3DVNORM( -0.000181343, -0.999994, 0.00333341 )  //173
DX3DVERT( -3.00914, 6.21238, 16.7183 ) DX3DVNORM( -0.000181343, -0.999994, 0.00333341 )  //174
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BODYR___carbodyblack_3 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BODYR___carbodyblack_3 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 175 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BODYR___carbodyblack_3	NULL
#define vertexbuff_KEIA_BODYR___carbodyblack_3	NULL
#endif




#if ((PT_KEIA_BODYR___carbodyblack_3 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR___carbodyblack_3 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BODYR___carbodyblack_3 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
	4, 5, 7, // 2 8
	5, 6, 7, // 3 11
	8, 4, 9, // 4 14
	4, 7, 9, // 5 17
	10, 11, 13, // 6 20
	11, 12, 13, // 7 23
	14, 15, 17, // 8 26
	15, 16, 17, // 9 29
	18, 19, 21, // 10 32
	19, 20, 21, // 11 35
	22, 23, 25, // 12 38
	23, 24, 25, // 13 41
	26, 27, 29, // 14 44
	27, 28, 29, // 15 47
	30, 31, 33, // 16 50
	31, 32, 33, // 17 53
	34, 35, 37, // 18 56
	35, 36, 37, // 19 59
	38, 39, 41, // 20 62
	39, 40, 41, // 21 65
	5, 42, 6, // 22 68
	42, 43, 6, // 23 71
	1, 38, 2, // 24 74
	38, 41, 2, // 25 77
	11, 44, 12, // 26 80
	44, 45, 12, // 27 83
	46, 47, 49, // 28 86
	47, 48, 49, // 29 89
	42, 50, 43, // 30 92
	50, 51, 43, // 31 95
	52, 53, 55, // 32 98
	53, 54, 55, // 33 101
	31, 52, 32, // 34 104
	52, 55, 32, // 35 107
	50, 56, 51, // 36 110
	56, 57, 51, // 37 113
	56, 14, 57, // 38 116
	14, 17, 57, // 39 119
	47, 30, 48, // 40 122
	30, 33, 48, // 41 125
	35, 8, 36, // 42 128
	8, 9, 36, // 43 131
	53, 58, 54, // 44 134
	58, 59, 54, // 45 137
	39, 60, 40, // 46 140
	60, 61, 40, // 47 143
	60, 22, 61, // 48 146
	22, 25, 61, // 49 149
	62, 63, 65, // 50 152
	63, 64, 65, // 51 155
	66, 67, 69, // 52 158
	67, 68, 69, // 53 161
	70, 71, 73, // 54 164
	71, 72, 73, // 55 167
	74, 70, 75, // 56 170
	70, 73, 75, // 57 173
	76, 77, 79, // 58 176
	77, 78, 79, // 59 179
	80, 81, 83, // 60 182
	81, 82, 83, // 61 185
	84, 85, 87, // 62 188
	85, 86, 87, // 63 191
	88, 89, 91, // 64 194
	89, 90, 91, // 65 197
	92, 93, 95, // 66 200
	93, 94, 95, // 67 203
	96, 97, 99, // 68 206
	97, 98, 99, // 69 209
	100, 101, 103, // 70 212
	101, 102, 103, // 71 215
	71, 104, 72, // 72 218
	104, 105, 72, // 73 221
	67, 100, 68, // 74 224
	100, 103, 68, // 75 227
	77, 106, 78, // 76 230
	106, 107, 78, // 77 233
	108, 109, 111, // 78 236
	109, 110, 111, // 79 239
	104, 112, 105, // 80 242
	112, 113, 105, // 81 245
	114, 115, 117, // 82 248
	115, 116, 117, // 83 251
	93, 114, 94, // 84 254
	114, 117, 94, // 85 257
	112, 118, 113, // 86 260
	118, 119, 113, // 87 263
	118, 80, 119, // 88 266
	80, 83, 119, // 89 269
	109, 92, 110, // 90 272
	92, 95, 110, // 91 275
	97, 74, 98, // 92 278
	74, 75, 98, // 93 281
	115, 120, 116, // 94 284
	120, 121, 116, // 95 287
	101, 122, 124, // 96 290
	122, 123, 124, // 97 293
	122, 88, 123, // 98 296
	88, 91, 123, // 99 299
	3, 2, 125, // 100 302
	7, 6, 126, // 101 305
	9, 7, 126, // 102 308
	13, 12, 128, // 103 311
	12, 127, 128, // 104 314
	17, 16, 126, // 105 317
	21, 20, 130, // 106 320
	20, 129, 130, // 107 323
	25, 24, 125, // 108 326
	29, 28, 132, // 109 329
	28, 131, 132, // 110 332
	33, 32, 133, // 111 335
	37, 36, 126, // 112 338
	41, 40, 125, // 113 341
	6, 43, 126, // 114 344
	2, 41, 125, // 115 347
	12, 45, 127, // 116 350
	45, 134, 127, // 117 353
	49, 48, 133, // 118 356
	43, 51, 126, // 119 359
	55, 54, 133, // 120 362
	32, 55, 133, // 121 365
	51, 57, 126, // 122 368
	57, 17, 126, // 123 371
	48, 33, 133, // 124 374
	36, 9, 126, // 125 377
	54, 59, 133, // 126 380
	40, 61, 125, // 127 383
	61, 25, 125, // 128 386
	65, 64, 136, // 129 389
	64, 135, 136, // 130 392
	137, 67, 66, // 131 395
	138, 71, 70, // 132 398
	138, 70, 74, // 133 401
	128, 127, 76, // 134 404
	127, 77, 76, // 135 407
	138, 81, 80, // 136 410
	130, 129, 84, // 137 413
	129, 85, 84, // 138 416
	137, 89, 88, // 139 419
	139, 93, 92, // 140 422
	138, 97, 96, // 141 425
	140, 141, 142, // 142 428
	137, 101, 100, // 143 431
	138, 104, 71, // 144 434
	137, 100, 67, // 145 437
	127, 134, 77, // 146 440
	134, 106, 77, // 147 443
	139, 109, 108, // 148 446
	138, 112, 104, // 149 449
	139, 115, 114, // 150 452
	139, 114, 93, // 151 455
	138, 118, 112, // 152 458
	138, 80, 118, // 153 461
	139, 92, 109, // 154 464
	138, 74, 97, // 155 467
	139, 120, 115, // 156 470
	137, 122, 101, // 157 473
	137, 88, 122, // 158 476
	143, 144, 146, // 159 479
	144, 145, 146, // 160 482
	147, 148, 150, // 161 485
	148, 149, 150, // 162 488
	144, 151, 145, // 163 491
	151, 152, 145, // 164 494
	153, 154, 156, // 165 497
	154, 155, 156, // 166 500
	157, 147, 158, // 167 503
	147, 150, 158, // 168 506
	159, 160, 162, // 169 509
	160, 161, 162, // 170 512
	163, 164, 166, // 171 515
	164, 165, 166, // 172 518
	160, 167, 161, // 173 521
	167, 168, 161, // 174 524
	169, 170, 172, // 175 527
	170, 171, 172, // 176 530
	173, 163, 174, // 177 533
	163, 166, 174, // 178 536
DX3DINDEX_END
#endif

#else
#define index_KEIA_BODYR___carbodyblack_3	NULL
#endif




#if ((PT_KEIA_BODYR___carbodyblack_3 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BODYR___carbodyblack_3 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BODYR___carbodyblack_3_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BODYR___carbodyblack_3 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BODYR___carbodyblack_3 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BODYR___carbodyblack_3_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BODYR___carbodyblack_3_VERTEXSTRIP 	NULL
#endif






#if ((PT_KEIA_BODYR___carlight_4 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR___carlight_4 == PT_TRILIST ) || ((PT_KEIA_BODYR___carlight_4 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BODYR___carlight_4 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BODYR___carlight_4 )
DX3DVERT( -4.96185, 7.57884, -16.2051 ) DX3DVNORM( -0.221852, 0.478803, -0.849429 )  //0
DX3DVERT( -4.72208, 8.66714, -15.6238 ) DX3DVNORM( -0.221852, 0.478803, -0.849429 )  //1
DX3DVERT( -5.74182, 8.72143, -15.339 ) DX3DVNORM( -0.225559, 0.486028, -0.844334 )  //2
DX3DVERT( -5.73379, 7.60088, -15.9673 ) DX3DVNORM( -0.225559, 0.486028, -0.844334 )  //3
DX3DVERT( -3.58793, 7.64479, -16.4775 ) DX3DVNORM( -0.14209, 0.474837, -0.868528 )  //4
DX3DVERT( -3.61496, 8.05554, -16.2859 ) DX3DVNORM( -0.14209, 0.474837, -0.868528 )  //5
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BODYR___carlight_4 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BODYR___carlight_4 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 6 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BODYR___carlight_4	NULL
#define vertexbuff_KEIA_BODYR___carlight_4	NULL
#endif




#if ((PT_KEIA_BODYR___carlight_4 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR___carlight_4 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BODYR___carlight_4 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
	4, 5, 0, // 2 8
	5, 1, 0, // 3 11
DX3DINDEX_END
#endif

#else
#define index_KEIA_BODYR___carlight_4	NULL
#endif




#if ((PT_KEIA_BODYR___carlight_4 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BODYR___carlight_4 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BODYR___carlight_4_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BODYR___carlight_4 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BODYR___carlight_4 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BODYR___carlight_4_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BODYR___carlight_4_VERTEXSTRIP 	NULL
#endif






#if ((PT_KEIA_BODYR___carwinker_5 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR___carwinker_5 == PT_TRILIST ) || ((PT_KEIA_BODYR___carwinker_5 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BODYR___carwinker_5 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BODYR___carwinker_5 )
DX3DVERT( -6.35264, 7.52912, -15.404 ) DX3DVNORM( -0.654132, 0.472062, -0.590989 )  //0
DX3DVERT( -5.98553, 7.57004, -15.7938 ) DX3DVNORM( -0.588225, 0.471864, -0.656762 )  //1
DX3DVERT( -6.26894, 8.68022, -15.083 ) DX3DVNORM( -0.633886, 0.376958, -0.675345 )  //2
DX3DVERT( -5.73379, 7.60088, -15.9673 ) DX3DVNORM( -0.445939, 0.51329, -0.733261 )  //3
DX3DVERT( -5.74182, 8.72143, -15.339 ) DX3DVNORM( -0.430799, 0.508105, -0.745816 )  //4
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BODYR___carwinker_5 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BODYR___carwinker_5 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 5 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BODYR___carwinker_5	NULL
#define vertexbuff_KEIA_BODYR___carwinker_5	NULL
#endif




#if ((PT_KEIA_BODYR___carwinker_5 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR___carwinker_5 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BODYR___carwinker_5 )
	0, 1, 2, // 0 2
	2, 1, 4, // 1 5
	1, 3, 4, // 2 8
DX3DINDEX_END
#endif

#else
#define index_KEIA_BODYR___carwinker_5	NULL
#endif




#if ((PT_KEIA_BODYR___carwinker_5 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BODYR___carwinker_5 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BODYR___carwinker_5_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BODYR___carwinker_5 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BODYR___carwinker_5 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BODYR___carwinker_5_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BODYR___carwinker_5_VERTEXSTRIP 	NULL
#endif






#if ((PT_KEIA_BODYR___carlight_6 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR___carlight_6 == PT_TRILIST ) || ((PT_KEIA_BODYR___carlight_6 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BODYR___carlight_6 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BODYR___carlight_6 )
DX3DVERT( -5.42152, 9.83236, 15.6995 ) DX3DVNORM( -0.382655, 0.34797, 0.855858 )  //0
DX3DVERT( -3.69095, 9.81167, 15.9939 ) DX3DVNORM( -0.112437, 0.327136, 0.938264 )  //1
DX3DVERT( -3.72156, 8.46922, 16.2978 ) DX3DVNORM( -0.122455, 0.218408, 0.968144 )  //2
DX3DVERT( -5.54254, 8.46922, 15.9518 ) DX3DVNORM( -0.363497, 0.250906, 0.897171 )  //3
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BODYR___carlight_6 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BODYR___carlight_6 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 4 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BODYR___carlight_6	NULL
#define vertexbuff_KEIA_BODYR___carlight_6	NULL
#endif




#if ((PT_KEIA_BODYR___carlight_6 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR___carlight_6 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BODYR___carlight_6 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
DX3DINDEX_END
#endif

#else
#define index_KEIA_BODYR___carlight_6	NULL
#endif




#if ((PT_KEIA_BODYR___carlight_6 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BODYR___carlight_6 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BODYR___carlight_6_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BODYR___carlight_6 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BODYR___carlight_6 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BODYR___carlight_6_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BODYR___carlight_6_VERTEXSTRIP 	NULL
#endif




DX3DMODELTBL_START( modeltbl_KEIA_BODYR__ )
DX3DMODEL_START( model_KEIA_BODYR___carbodycolor_0 )
DX3DMODEL_VERTEX( vertex_KEIA_BODYR___carbodycolor_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BODYR___carbodycolor_0 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 1137 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carbodycolor )
DX3DMODEL_END
DX3DMODEL_START( model_KEIA_BODYR___carwindow_1 )
DX3DMODEL_VERTEX( vertex_KEIA_BODYR___carwindow_1 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BODYR___carwindow_1 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 84 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carwindow )
DX3DMODEL_END
DX3DMODEL_START( model_KEIA_BODYR___carwinker_2 )
DX3DMODEL_VERTEX( vertex_KEIA_BODYR___carwinker_2 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BODYR___carwinker_2 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 6 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carwinker )
DX3DMODEL_END
DX3DMODEL_START( model_KEIA_BODYR___carbodyblack_3 )
DX3DMODEL_VERTEX( vertex_KEIA_BODYR___carbodyblack_3 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BODYR___carbodyblack_3 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 537 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carbodyblack )
DX3DMODEL_END
DX3DMODEL_START( model_KEIA_BODYR___carlight_4 )
DX3DMODEL_VERTEX( vertex_KEIA_BODYR___carlight_4 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BODYR___carlight_4 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 12 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carlight )
DX3DMODEL_END
DX3DMODEL_START( model_KEIA_BODYR___carwinker_5 )
DX3DMODEL_VERTEX( vertex_KEIA_BODYR___carwinker_5 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BODYR___carwinker_5 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 9 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carwinker )
DX3DMODEL_END
DX3DMODEL_START( model_KEIA_BODYR___carlight_6 )
DX3DMODEL_VERTEX( vertex_KEIA_BODYR___carlight_6 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BODYR___carlight_6 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 6 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carlight )
DX3DMODEL_END
DX3DMODELTBL_END




DX3DOBJECT_START_HASH( object_KEIA_BODYR__, 830132601 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_KEIA_BODYR__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	0, -0.673368, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	0, -0.673368, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_NULL__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_KEIA_BASE_SHADOW__
/////////////////////////////////////////////
#if 0
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0.993379, 1
#endif

DX3DMATERIAL_START( material_carshadow )
DX3DMATERIAL_DIFF( 1, 0.26, 0.26, 0.26 )
DX3DMATERIAL_SPEC( 1, 0.5, 0.5, 0.5 )
DX3DMATERIAL_TEX( NULL )
DX3DMATERIAL_SHADER( DEFAULT )
DX3DMATERIAL_FLG( 0 )
DX3DMATERIAL_CALLBACK( -1 )
DX3DMATERIAL_END




#if ((PT_KEIA_BASE_SHADOW___carshadow_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_SHADOW___carshadow_0 == PT_TRILIST ) || ((PT_KEIA_BASE_SHADOW___carshadow_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BASE_SHADOW___carshadow_0 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BASE_SHADOW___carshadow_0 )
DX3DVERT( -6.68777, -4.88498e-015, -14.8804 ) DX3DVNORM( 0, 1, -3.10484e-016 )  //0
DX3DVERT( 6.68777, -4.88498e-015, -14.8804 ) DX3DVNORM( 0, 1, -3.10484e-016 )  //1
DX3DVERT( 6.68777, 4.88498e-015, 16.5864 ) DX3DVNORM( 0, 1, -3.10484e-016 )  //2
DX3DVERT( -6.68777, 4.88498e-015, 16.5864 ) DX3DVNORM( 0, 1, -3.10484e-016 )  //3
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BASE_SHADOW___carshadow_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BASE_SHADOW___carshadow_0 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 4 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BASE_SHADOW___carshadow_0	NULL
#define vertexbuff_KEIA_BASE_SHADOW___carshadow_0	NULL
#endif




#if ((PT_KEIA_BASE_SHADOW___carshadow_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_SHADOW___carshadow_0 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BASE_SHADOW___carshadow_0 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
DX3DINDEX_END
#endif

#else
#define index_KEIA_BASE_SHADOW___carshadow_0	NULL
#endif




#if ((PT_KEIA_BASE_SHADOW___carshadow_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BASE_SHADOW___carshadow_0 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BASE_SHADOW___carshadow_0_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BASE_SHADOW___carshadow_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BASE_SHADOW___carshadow_0 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BASE_SHADOW___carshadow_0_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BASE_SHADOW___carshadow_0_VERTEXSTRIP 	NULL
#endif




DX3DMODELTBL_START( modeltbl_KEIA_BASE_SHADOW__ )
DX3DMODEL_START( model_KEIA_BASE_SHADOW___carshadow_0 )
DX3DMODEL_VERTEX( vertex_KEIA_BASE_SHADOW___carshadow_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BASE_SHADOW___carshadow_0 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 6 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carshadow )
DX3DMODEL_END
DX3DMODELTBL_END




DX3DOBJECT_START_HASH( object_KEIA_BASE_SHADOW__, 1798568573 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_KEIA_BASE_SHADOW__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	0, 0, -0.993379, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	0, 0, -0.993379, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_KEIA_BODYR__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_KEIA_BASE_TIREFR__
/////////////////////////////////////////////
#if 0
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	-5.94006, 2.86276, 12.471, 1
#endif

DX3DMATERIAL_START( material_cartire )
DX3DMATERIAL_DIFF( 1, 0.37, 0.37, 0.37 )
DX3DMATERIAL_SPEC( 1, 0, 0, 0 )
DX3DMATERIAL_TEX( NULL )
DX3DMATERIAL_SHADER( DEFAULT )
DX3DMATERIAL_FLG( 0 )
DX3DMATERIAL_CALLBACK( -1 )
DX3DMATERIAL_END


DX3DMATERIAL_START( material_carwheelB )
DX3DMATERIAL_DIFF( 1, 0.446016, 0.446016, 0.446016 )
DX3DMATERIAL_SPEC( 1, 0.5, 0.5, 0.5 )
DX3DMATERIAL_TEX( NULL )
DX3DMATERIAL_SHADER( DEFAULT )
DX3DMATERIAL_FLG( 0 )
DX3DMATERIAL_CALLBACK( -1 )
DX3DMATERIAL_END




#if ((PT_KEIA_BASE_TIREFR___cartire_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIREFR___cartire_0 == PT_TRILIST ) || ((PT_KEIA_BASE_TIREFR___cartire_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BASE_TIREFR___cartire_0 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BASE_TIREFR___cartire_0 )
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.00903158, 0.951018, 0.309003 )  //0
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( -0.00903167, 0.808984, 0.587761 )  //1
DX3DVERT( -0.651165, 2.15934, 1.56885 ) DX3DVNORM( -0.313176, 0.768319, 0.558217 )  //2
DX3DVERT( -0.651165, 2.53846, 0.824794 ) DX3DVNORM( -0.313177, 0.903214, 0.293471 )  //3
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.00903152, 0.587761, 0.808984 )  //4
DX3DVERT( -0.651165, 1.56885, 2.15934 ) DX3DVNORM( -0.313176, 0.558217, 0.768319 )  //5
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.00903127, 0.309004, 0.951018 )  //6
DX3DVERT( -0.651165, 0.824795, 2.53846 ) DX3DVNORM( -0.313177, 0.293472, 0.903214 )  //7
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( -0.00903127, -3.01738e-008, 0.999959 )  //8
DX3DVERT( -0.651165, -4.85044e-008, 2.66909 ) DX3DVNORM( -0.313177, -2.3704e-008, 0.949695 )  //9
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.00903123, -0.309005, 0.951018 )  //10
DX3DVERT( -0.651165, -0.824795, 2.53846 ) DX3DVNORM( -0.313177, -0.293472, 0.903213 )  //11
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( -0.00903142, -0.587762, 0.808984 )  //12
DX3DVERT( -0.651165, -1.56885, 2.15934 ) DX3DVNORM( -0.313176, -0.558217, 0.768319 )  //13
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.0090315, -0.808984, 0.587761 )  //14
DX3DVERT( -0.651165, -2.15934, 1.56885 ) DX3DVNORM( -0.313176, -0.768319, 0.558217 )  //15
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.00903129, -0.951018, 0.309004 )  //16
DX3DVERT( -0.651165, -2.53846, 0.824794 ) DX3DVNORM( -0.313177, -0.903213, 0.293472 )  //17
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( -0.00903119, -0.999959, 1.50869e-008 )  //18
DX3DVERT( -0.651165, -2.66909, 9.70089e-008 ) DX3DVNORM( -0.313177, -0.949695, 1.97533e-008 )  //19
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( -0.00903121, -0.951018, -0.309004 )  //20
DX3DVERT( -0.651165, -2.53846, -0.824794 ) DX3DVNORM( -0.313177, -0.903213, -0.293472 )  //21
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( -0.00903143, -0.808984, -0.587762 )  //22
DX3DVERT( -0.651165, -2.15934, -1.56885 ) DX3DVNORM( -0.313176, -0.768319, -0.558217 )  //23
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.0090314, -0.587762, -0.808984 )  //24
DX3DVERT( -0.651165, -1.56885, -2.15934 ) DX3DVNORM( -0.313176, -0.558217, -0.768319 )  //25
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( -0.00903128, -0.309004, -0.951018 )  //26
DX3DVERT( -0.651165, -0.824794, -2.53846 ) DX3DVNORM( -0.313176, -0.293472, -0.903214 )  //27
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -0.00903141, 7.54344e-009, -0.999959 )  //28
DX3DVERT( -0.651165, -4.85044e-008, -2.66909 ) DX3DVNORM( -0.313177, 1.06668e-007, -0.949695 )  //29
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.00903122, 0.309005, -0.951018 )  //30
DX3DVERT( -0.651165, 0.824794, -2.53846 ) DX3DVNORM( -0.313177, 0.293472, -0.903214 )  //31
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.0090314, 0.587762, -0.808984 )  //32
DX3DVERT( -0.651165, 1.56885, -2.15934 ) DX3DVNORM( -0.313176, 0.558217, -0.768319 )  //33
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.00903159, 0.808984, -0.587762 )  //34
DX3DVERT( -0.651165, 2.15934, -1.56885 ) DX3DVNORM( -0.313176, 0.768319, -0.558217 )  //35
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.0090314, 0.951018, -0.309004 )  //36
DX3DVERT( -0.651165, 2.53846, -0.824794 ) DX3DVNORM( -0.313176, 0.903214, -0.293472 )  //37
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -0.00903151, 0.999959, -5.50671e-007 )  //38
DX3DVERT( -0.651165, 2.66909, 9.70089e-008 ) DX3DVNORM( -0.00903151, 0.999959, -5.50671e-007 )  //39
DX3DVERT( -0.895311, 2.01633, 1.46495 ) DX3DVNORM( -0.586468, 0.655281, 0.47609 )  //40
DX3DVERT( -0.895311, 2.37033, 0.770167 ) DX3DVNORM( -0.586469, 0.770329, 0.250294 )  //41
DX3DVERT( -0.895311, 1.46495, 2.01633 ) DX3DVNORM( -0.586469, 0.47609, 0.655281 )  //42
DX3DVERT( -0.895311, 0.770168, 2.37033 ) DX3DVNORM( -0.586469, 0.250295, 0.770329 )  //43
DX3DVERT( -0.895311, -4.85044e-008, 2.49232 ) DX3DVNORM( -0.586469, -1.50233e-008, 0.809972 )  //44
DX3DVERT( -0.895311, -0.770167, 2.37033 ) DX3DVNORM( -0.586469, -0.250295, 0.770329 )  //45
DX3DVERT( -0.895311, -1.46495, 2.01633 ) DX3DVNORM( -0.586469, -0.47609, 0.655281 )  //46
DX3DVERT( -0.895311, -2.01633, 1.46495 ) DX3DVNORM( -0.586469, -0.655281, 0.47609 )  //47
DX3DVERT( -0.895311, -2.37033, 0.770167 ) DX3DVNORM( -0.58647, -0.770328, 0.250295 )  //48
DX3DVERT( -0.895311, -2.49231, 9.70089e-008 ) DX3DVNORM( -0.58647, -0.809971, 2.25349e-008 )  //49
DX3DVERT( -0.895311, -2.37033, -0.770167 ) DX3DVNORM( -0.586469, -0.770329, -0.250295 )  //50
DX3DVERT( -0.895311, -2.01632, -1.46495 ) DX3DVNORM( -0.586468, -0.655281, -0.47609 )  //51
DX3DVERT( -0.895311, -1.46495, -2.01632 ) DX3DVNORM( -0.586467, -0.47609, -0.655282 )  //52
DX3DVERT( -0.895311, -0.770167, -2.37033 ) DX3DVNORM( -0.586468, -0.250295, -0.770329 )  //53
DX3DVERT( -0.895311, -4.85044e-008, -2.49231 ) DX3DVNORM( -0.586469, 1.95303e-007, -0.809972 )  //54
DX3DVERT( -0.895311, 0.770168, -2.37033 ) DX3DVNORM( -0.586469, 0.250295, -0.770329 )  //55
DX3DVERT( -0.895311, 1.46495, -2.01632 ) DX3DVNORM( -0.586468, 0.47609, -0.655281 )  //56
DX3DVERT( -0.895311, 2.01632, -1.46495 ) DX3DVNORM( -0.586467, 0.655282, -0.47609 )  //57
DX3DVERT( -0.895311, 2.37033, -0.770167 ) DX3DVNORM( -0.586469, 0.770329, -0.250295 )  //58
DX3DVERT( -0.651165, 2.66909, 9.70089e-008 ) DX3DVNORM( -0.586469, 0.809972, -2.17838e-007 )  //59
DX3DVERT( -0.895311, 2.49231, 9.70089e-008 ) DX3DVNORM( -0.586469, 0.809972, -2.17838e-007 )  //60
DX3DVERT( -0.895311, 2.37033, 0.770167 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //61
DX3DVERT( -0.895311, 2.01633, 1.46495 ) DX3DVNORM( -1, 1.27031e-008, -0 )  //62
DX3DVERT( -0.895311, 1.68027, 1.22079 ) DX3DVNORM( -0.958004, -0.231989, -0.16855 )  //63
DX3DVERT( -0.895311, 1.97528, 0.641807 ) DX3DVNORM( -0.958004, -0.272719, -0.0886117 )  //64
DX3DVERT( -0.895311, 1.46495, 2.01633 ) DX3DVNORM( -1, 2.54063e-008, -0 )  //65
DX3DVERT( -0.895311, 1.22079, 1.68027 ) DX3DVNORM( -0.958004, -0.16855, -0.231989 )  //66
DX3DVERT( -0.895311, 0.770168, 2.37033 ) DX3DVNORM( -1, 5.08125e-008, -0 )  //67
DX3DVERT( -0.895311, 0.641807, 1.97528 ) DX3DVNORM( -0.958004, -0.0886118, -0.27272 )  //68
DX3DVERT( -0.895311, -4.85044e-008, 2.49232 ) DX3DVNORM( -1, -4.9738e-014, -0 )  //69
DX3DVERT( -0.895311, -4.85044e-008, 2.07693 ) DX3DVNORM( -0.958004, 2.72763e-008, -0.286754 )  //70
DX3DVERT( -0.895311, -0.770167, 2.37033 ) DX3DVNORM( -1, 4.61853e-014, -0 )  //71
DX3DVERT( -0.895311, -0.641806, 1.97528 ) DX3DVNORM( -0.958004, 0.0886119, -0.272719 )  //72
DX3DVERT( -0.895311, -1.46495, 2.01633 ) DX3DVNORM( -1, 5.08126e-008, -0 )  //73
DX3DVERT( -0.895311, -1.22079, 1.68027 ) DX3DVNORM( -0.958004, 0.16855, -0.231989 )  //74
DX3DVERT( -0.895311, -2.01633, 1.46495 ) DX3DVNORM( -1, 2.54063e-008, -0 )  //75
DX3DVERT( -0.895311, -1.68027, 1.22079 ) DX3DVNORM( -0.958004, 0.231989, -0.16855 )  //76
DX3DVERT( -0.895311, -2.37033, 0.770167 ) DX3DVNORM( -1, 1.27032e-008, -0 )  //77
DX3DVERT( -0.895311, -1.97528, 0.641807 ) DX3DVNORM( -0.958004, 0.272719, -0.0886119 )  //78
DX3DVERT( -0.895311, -2.49231, 9.70089e-008 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //79
DX3DVERT( -0.895311, -2.07693, 9.70089e-008 ) DX3DVNORM( -0.958004, 0.286754, -0 )  //80
DX3DVERT( -0.895311, -2.37033, -0.770167 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //81
DX3DVERT( -0.895311, -1.97528, -0.641807 ) DX3DVNORM( -0.958004, 0.272719, 0.0886119 )  //82
DX3DVERT( -0.895311, -2.01632, -1.46495 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //83
DX3DVERT( -0.895311, -1.68027, -1.22079 ) DX3DVNORM( -0.958004, 0.231989, 0.16855 )  //84
DX3DVERT( -0.895311, -1.46495, -2.01632 ) DX3DVNORM( -1, -5.08125e-008, -0 )  //85
DX3DVERT( -0.895311, -1.22079, -1.68027 ) DX3DVNORM( -0.958004, 0.16855, 0.231989 )  //86
DX3DVERT( -0.895311, -0.770167, -2.37033 ) DX3DVNORM( -1, 1.27898e-013, -0 )  //87
DX3DVERT( -0.895311, -0.641806, -1.97528 ) DX3DVNORM( -0.958004, 0.088612, 0.272719 )  //88
DX3DVERT( -0.895311, -4.85044e-008, -2.49231 ) DX3DVNORM( -1, 5.08126e-008, -0 )  //89
DX3DVERT( -0.895311, -4.85044e-008, -2.07693 ) DX3DVNORM( -0.958004, 2.14314e-008, 0.286754 )  //90
DX3DVERT( -0.895311, 0.770168, -2.37033 ) DX3DVNORM( -1, 1.01625e-007, -0 )  //91
DX3DVERT( -0.895311, 0.641806, -1.97528 ) DX3DVNORM( -0.958004, -0.088612, 0.272719 )  //92
DX3DVERT( -0.895311, 1.46495, -2.01632 ) DX3DVNORM( -1, 1.01625e-007, -0 )  //93
DX3DVERT( -0.895311, 1.22079, -1.68027 ) DX3DVNORM( -0.958004, -0.16855, 0.231989 )  //94
DX3DVERT( -0.895311, 2.01632, -1.46495 ) DX3DVNORM( -1, 0, -0 )  //95
DX3DVERT( -0.895311, 1.68027, -1.22079 ) DX3DVNORM( -0.958004, -0.231989, 0.16855 )  //96
DX3DVERT( -0.895311, 2.37033, -0.770167 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //97
DX3DVERT( -0.895311, 1.97528, -0.641807 ) DX3DVNORM( -0.958004, -0.272719, 0.0886119 )  //98
DX3DVERT( -0.895311, 2.49231, 9.70089e-008 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //99
DX3DVERT( -0.895311, 2.07693, 9.70089e-008 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //100
DX3DVERT( -0.732719, 1.48072, 1.07581 ) DX3DVNORM( -0.682549, -0.591262, -0.429577 )  //101
DX3DVERT( -0.732719, 1.74069, 0.565586 ) DX3DVNORM( -0.682548, -0.695071, -0.225841 )  //102
DX3DVERT( -0.732719, 1.07581, 1.48072 ) DX3DVNORM( -0.682549, -0.429576, -0.591262 )  //103
DX3DVERT( -0.732719, 0.565586, 1.74069 ) DX3DVNORM( -0.682547, -0.225842, -0.695072 )  //104
DX3DVERT( -0.732719, -4.85044e-008, 1.83027 ) DX3DVNORM( -0.682547, 3.85821e-008, -0.730842 )  //105
DX3DVERT( -0.732719, -0.565586, 1.74069 ) DX3DVNORM( -0.682547, 0.225842, -0.695071 )  //106
DX3DVERT( -0.732719, -1.07581, 1.48072 ) DX3DVNORM( -0.682549, 0.429577, -0.591262 )  //107
DX3DVERT( -0.732719, -1.48072, 1.07581 ) DX3DVNORM( -0.682549, 0.591262, -0.429577 )  //108
DX3DVERT( -0.732719, -1.74069, 0.565586 ) DX3DVNORM( -0.682548, 0.695071, -0.225842 )  //109
DX3DVERT( -0.732719, -1.83027, 9.70089e-008 ) DX3DVNORM( -0.682548, 0.730841, -3.85821e-009 )  //110
DX3DVERT( -0.732719, -1.74069, -0.565586 ) DX3DVNORM( -0.682547, 0.695071, 0.225842 )  //111
DX3DVERT( -0.732719, -1.48072, -1.07581 ) DX3DVNORM( -0.682549, 0.591262, 0.429577 )  //112
DX3DVERT( -0.732719, -1.07581, -1.48072 ) DX3DVNORM( -0.68255, 0.429576, 0.591261 )  //113
DX3DVERT( -0.732719, -0.565586, -1.74069 ) DX3DVNORM( -0.682549, 0.225842, 0.695071 )  //114
DX3DVERT( -0.732719, -4.85044e-008, -1.83027 ) DX3DVNORM( -0.682548, 3.47239e-008, 0.730841 )  //115
DX3DVERT( -0.732719, 0.565586, -1.74069 ) DX3DVNORM( -0.682549, -0.225842, 0.69507 )  //116
DX3DVERT( -0.732719, 1.07581, -1.48072 ) DX3DVNORM( -0.68255, -0.429576, 0.591261 )  //117
DX3DVERT( -0.732719, 1.48072, -1.07581 ) DX3DVNORM( -0.682549, -0.591262, 0.429577 )  //118
DX3DVERT( -0.732719, 1.74069, -0.565586 ) DX3DVNORM( -0.682547, -0.695072, 0.225842 )  //119
DX3DVERT( -0.895311, 2.07693, 9.70089e-008 ) DX3DVNORM( -0.83492, -0.550371, 6.17004e-007 )  //120
DX3DVERT( -0.732719, 1.83027, 9.70089e-008 ) DX3DVNORM( -0.83492, -0.550371, 6.17004e-007 )  //121
DX3DVERT( -0.651165, 2.53846, -0.824794 ) DX3DVNORM( 0, 0, -0 )  //122
DX3DVERT( -0.651165, 2.66909, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //123
DX3DVERT( -0.651165, 2.53846, 0.824794 ) DX3DVNORM( 0, 0, -0 )  //124
DX3DVERT( -0.895311, 2.37033, -0.770167 ) DX3DVNORM( 0, 0, -0 )  //125
DX3DVERT( -0.895311, 2.49231, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //126
DX3DVERT( -0.895311, 2.37033, 0.770167 ) DX3DVNORM( 0, 0, -0 )  //127
DX3DVERT( -0.895311, 1.97528, -0.641807 ) DX3DVNORM( 0, 0, -0 )  //128
DX3DVERT( -0.895311, 2.07693, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //129
DX3DVERT( -0.895311, 1.97528, 0.641807 ) DX3DVNORM( 0, 0, -0 )  //130
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BASE_TIREFR___cartire_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BASE_TIREFR___cartire_0 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 131 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BASE_TIREFR___cartire_0	NULL
#define vertexbuff_KEIA_BASE_TIREFR___cartire_0	NULL
#endif




#if ((PT_KEIA_BASE_TIREFR___cartire_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIREFR___cartire_0 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BASE_TIREFR___cartire_0 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
	1, 4, 2, // 2 8
	4, 5, 2, // 3 11
	4, 6, 5, // 4 14
	6, 7, 5, // 5 17
	6, 8, 7, // 6 20
	8, 9, 7, // 7 23
	8, 10, 9, // 8 26
	10, 11, 9, // 9 29
	10, 12, 11, // 10 32
	12, 13, 11, // 11 35
	12, 14, 13, // 12 38
	14, 15, 13, // 13 41
	14, 16, 15, // 14 44
	16, 17, 15, // 15 47
	16, 18, 17, // 16 50
	18, 19, 17, // 17 53
	18, 20, 19, // 18 56
	20, 21, 19, // 19 59
	20, 22, 21, // 20 62
	22, 23, 21, // 21 65
	22, 24, 23, // 22 68
	24, 25, 23, // 23 71
	24, 26, 25, // 24 74
	26, 27, 25, // 25 77
	26, 28, 27, // 26 80
	28, 29, 27, // 27 83
	28, 30, 29, // 28 86
	30, 31, 29, // 29 89
	30, 32, 31, // 30 92
	32, 33, 31, // 31 95
	32, 34, 33, // 32 98
	34, 35, 33, // 33 101
	34, 36, 35, // 34 104
	36, 37, 35, // 35 107
	36, 38, 37, // 36 110
	38, 39, 37, // 37 113
	38, 0, 39, // 38 116
	0, 3, 39, // 39 119
	3, 2, 41, // 40 122
	2, 40, 41, // 41 125
	2, 5, 40, // 42 128
	5, 42, 40, // 43 131
	5, 7, 42, // 44 134
	7, 43, 42, // 45 137
	7, 9, 43, // 46 140
	9, 44, 43, // 47 143
	9, 11, 44, // 48 146
	11, 45, 44, // 49 149
	11, 13, 45, // 50 152
	13, 46, 45, // 51 155
	13, 15, 46, // 52 158
	15, 47, 46, // 53 161
	15, 17, 47, // 54 164
	17, 48, 47, // 55 167
	17, 19, 48, // 56 170
	19, 49, 48, // 57 173
	19, 21, 49, // 58 176
	21, 50, 49, // 59 179
	21, 23, 50, // 60 182
	23, 51, 50, // 61 185
	23, 25, 51, // 62 188
	25, 52, 51, // 63 191
	25, 27, 52, // 64 194
	27, 53, 52, // 65 197
	27, 29, 53, // 66 200
	29, 54, 53, // 67 203
	29, 31, 54, // 68 206
	31, 55, 54, // 69 209
	31, 33, 55, // 70 212
	33, 56, 55, // 71 215
	33, 35, 56, // 72 218
	35, 57, 56, // 73 221
	35, 37, 57, // 74 224
	37, 58, 57, // 75 227
	37, 59, 58, // 76 230
	59, 60, 58, // 77 233
	59, 3, 60, // 78 236
	3, 41, 60, // 79 239
	61, 62, 64, // 80 242
	62, 63, 64, // 81 245
	62, 65, 63, // 82 248
	65, 66, 63, // 83 251
	65, 67, 66, // 84 254
	67, 68, 66, // 85 257
	67, 69, 68, // 86 260
	69, 70, 68, // 87 263
	69, 71, 70, // 88 266
	71, 72, 70, // 89 269
	71, 73, 72, // 90 272
	73, 74, 72, // 91 275
	73, 75, 74, // 92 278
	75, 76, 74, // 93 281
	75, 77, 76, // 94 284
	77, 78, 76, // 95 287
	77, 79, 78, // 96 290
	79, 80, 78, // 97 293
	79, 81, 80, // 98 296
	81, 82, 80, // 99 299
	81, 83, 82, // 100 302
	83, 84, 82, // 101 305
	83, 85, 84, // 102 308
	85, 86, 84, // 103 311
	85, 87, 86, // 104 314
	87, 88, 86, // 105 317
	87, 89, 88, // 106 320
	89, 90, 88, // 107 323
	89, 91, 90, // 108 326
	91, 92, 90, // 109 329
	91, 93, 92, // 110 332
	93, 94, 92, // 111 335
	93, 95, 94, // 112 338
	95, 96, 94, // 113 341
	95, 97, 96, // 114 344
	97, 98, 96, // 115 347
	97, 99, 98, // 116 350
	99, 100, 98, // 117 353
	99, 61, 100, // 118 356
	61, 64, 100, // 119 359
	64, 63, 102, // 120 362
	63, 101, 102, // 121 365
	63, 66, 101, // 122 368
	66, 103, 101, // 123 371
	66, 68, 103, // 124 374
	68, 104, 103, // 125 377
	68, 70, 104, // 126 380
	70, 105, 104, // 127 383
	70, 72, 105, // 128 386
	72, 106, 105, // 129 389
	72, 74, 106, // 130 392
	74, 107, 106, // 131 395
	74, 76, 107, // 132 398
	76, 108, 107, // 133 401
	76, 78, 108, // 134 404
	78, 109, 108, // 135 407
	78, 80, 109, // 136 410
	80, 110, 109, // 137 413
	80, 82, 110, // 138 416
	82, 111, 110, // 139 419
	82, 84, 111, // 140 422
	84, 112, 111, // 141 425
	84, 86, 112, // 142 428
	86, 113, 112, // 143 431
	86, 88, 113, // 144 434
	88, 114, 113, // 145 437
	88, 90, 114, // 146 440
	90, 115, 114, // 147 443
	90, 92, 115, // 148 446
	92, 116, 115, // 149 449
	92, 94, 116, // 150 452
	94, 117, 116, // 151 455
	94, 96, 117, // 152 458
	96, 118, 117, // 153 461
	96, 98, 118, // 154 464
	98, 119, 118, // 155 467
	98, 120, 119, // 156 470
	120, 121, 119, // 157 473
	120, 64, 121, // 158 476
	64, 102, 121, // 159 479
	122, 123, 122, // 160 482
	123, 123, 122, // 161 485
	123, 124, 123, // 162 488
	124, 124, 123, // 163 491
	125, 126, 125, // 164 494
	126, 126, 125, // 165 497
	126, 127, 126, // 166 500
	127, 127, 126, // 167 503
	128, 129, 128, // 168 506
	129, 129, 128, // 169 509
	129, 130, 129, // 170 512
	130, 130, 129, // 171 515
DX3DINDEX_END
#endif

#else
#define index_KEIA_BASE_TIREFR___cartire_0	NULL
#endif




#if ((PT_KEIA_BASE_TIREFR___cartire_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BASE_TIREFR___cartire_0 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BASE_TIREFR___cartire_0_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BASE_TIREFR___cartire_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BASE_TIREFR___cartire_0 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BASE_TIREFR___cartire_0_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BASE_TIREFR___cartire_0_VERTEXSTRIP 	NULL
#endif






#if ((PT_KEIA_BASE_TIREFR___carwheelB_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIREFR___carwheelB_1 == PT_TRILIST ) || ((PT_KEIA_BASE_TIREFR___carwheelB_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BASE_TIREFR___carwheelB_1 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BASE_TIREFR___carwheelB_1 )
DX3DVERT( -0.732719, 1.74069, 0.565586 ) DX3DVNORM( -0.682548, -0.695071, -0.225841 )  //0
DX3DVERT( -0.732719, 1.48072, 1.07581 ) DX3DVNORM( -0.682549, -0.591262, -0.429577 )  //1
DX3DVERT( -0.676385, 1.45504, 1.05715 ) DX3DVNORM( -0.864785, -0.406242, -0.295152 )  //2
DX3DVERT( -0.676385, 1.71051, 0.555777 ) DX3DVNORM( -0.864784, -0.477567, -0.15517 )  //3
DX3DVERT( -0.732719, 1.07581, 1.48072 ) DX3DVNORM( -0.682549, -0.429576, -0.591262 )  //4
DX3DVERT( -0.676385, 1.05715, 1.45504 ) DX3DVNORM( -0.864785, -0.295151, -0.406242 )  //5
DX3DVERT( -0.732719, 0.565586, 1.74069 ) DX3DVNORM( -0.682547, -0.225842, -0.695072 )  //6
DX3DVERT( -0.676385, 0.555776, 1.71051 ) DX3DVNORM( -0.864784, -0.155171, -0.477568 )  //7
DX3DVERT( -0.732719, -4.85044e-008, 1.83027 ) DX3DVNORM( -0.682547, 3.85821e-008, -0.730842 )  //8
DX3DVERT( -0.676385, -4.85044e-008, 1.79853 ) DX3DVNORM( -0.864783, 1.30051e-008, -0.502145 )  //9
DX3DVERT( -0.732719, -0.565586, 1.74069 ) DX3DVNORM( -0.682547, 0.225842, -0.695071 )  //10
DX3DVERT( -0.676385, -0.555777, 1.71051 ) DX3DVNORM( -0.864784, 0.155171, -0.477568 )  //11
DX3DVERT( -0.732719, -1.07581, 1.48072 ) DX3DVNORM( -0.682549, 0.429577, -0.591262 )  //12
DX3DVERT( -0.676385, -1.05715, 1.45504 ) DX3DVNORM( -0.864785, 0.295152, -0.406242 )  //13
DX3DVERT( -0.732719, -1.48072, 1.07581 ) DX3DVNORM( -0.682549, 0.591262, -0.429577 )  //14
DX3DVERT( -0.676385, -1.45504, 1.05715 ) DX3DVNORM( -0.864784, 0.406242, -0.295152 )  //15
DX3DVERT( -0.732719, -1.74069, 0.565586 ) DX3DVNORM( -0.682548, 0.695071, -0.225842 )  //16
DX3DVERT( -0.676385, -1.71051, 0.555777 ) DX3DVNORM( -0.864784, 0.477568, -0.155171 )  //17
DX3DVERT( -0.732719, -1.83027, 9.70089e-008 ) DX3DVNORM( -0.682548, 0.730841, -3.85821e-009 )  //18
DX3DVERT( -0.676385, -1.79853, 9.70089e-008 ) DX3DVNORM( -0.864784, 0.502144, -4.33502e-009 )  //19
DX3DVERT( -0.732719, -1.74069, -0.565586 ) DX3DVNORM( -0.682547, 0.695071, 0.225842 )  //20
DX3DVERT( -0.676385, -1.71051, -0.555777 ) DX3DVNORM( -0.864784, 0.477568, 0.155171 )  //21
DX3DVERT( -0.732719, -1.48072, -1.07581 ) DX3DVNORM( -0.682549, 0.591262, 0.429577 )  //22
DX3DVERT( -0.676385, -1.45504, -1.05715 ) DX3DVNORM( -0.864785, 0.406242, 0.295152 )  //23
DX3DVERT( -0.732719, -1.07581, -1.48072 ) DX3DVNORM( -0.68255, 0.429576, 0.591261 )  //24
DX3DVERT( -0.676385, -1.05715, -1.45504 ) DX3DVNORM( -0.864786, 0.295151, 0.406241 )  //25
DX3DVERT( -0.732719, -0.565586, -1.74069 ) DX3DVNORM( -0.682549, 0.225842, 0.695071 )  //26
DX3DVERT( -0.676385, -0.555776, -1.71051 ) DX3DVNORM( -0.864785, 0.155171, 0.477567 )  //27
DX3DVERT( -0.732719, -4.85044e-008, -1.83027 ) DX3DVNORM( -0.682548, 3.47239e-008, 0.730841 )  //28
DX3DVERT( -0.676385, -4.85044e-008, -1.79853 ) DX3DVNORM( -0.864784, 4.33502e-008, 0.502144 )  //29
DX3DVERT( -0.732719, 0.565586, -1.74069 ) DX3DVNORM( -0.682549, -0.225842, 0.69507 )  //30
DX3DVERT( -0.676385, 0.555776, -1.71051 ) DX3DVNORM( -0.864785, -0.15517, 0.477566 )  //31
DX3DVERT( -0.732719, 1.07581, -1.48072 ) DX3DVNORM( -0.68255, -0.429576, 0.591261 )  //32
DX3DVERT( -0.676385, 1.05715, -1.45504 ) DX3DVNORM( -0.864785, -0.295151, 0.406241 )  //33
DX3DVERT( -0.732719, 1.48072, -1.07581 ) DX3DVNORM( -0.682549, -0.591262, 0.429577 )  //34
DX3DVERT( -0.676385, 1.45504, -1.05715 ) DX3DVNORM( -0.864785, -0.406242, 0.295152 )  //35
DX3DVERT( -0.732719, 1.74069, -0.565586 ) DX3DVNORM( -0.682547, -0.695072, 0.225842 )  //36
DX3DVERT( -0.676385, 1.71051, -0.555777 ) DX3DVNORM( -0.864784, -0.477568, 0.155171 )  //37
DX3DVERT( -0.732719, 1.83027, 9.70089e-008 ) DX3DVNORM( -0.490909, -0.871211, 6.54342e-007 )  //38
DX3DVERT( -0.676385, 1.79853, 9.70089e-008 ) DX3DVNORM( -0.490909, -0.871211, 6.54342e-007 )  //39
DX3DVERT( -0.676385, 0.370518, 1.14034 ) DX3DVNORM( -0.994282, -0.0330002, -0.101564 )  //40
DX3DVERT( -0.676385, 0.704767, 0.970029 ) DX3DVNORM( -0.994282, -0.0627699, -0.0863957 )  //41
DX3DVERT( -0.676385, -4.85044e-008, 1.19902 ) DX3DVNORM( -0.994282, 6.55863e-009, -0.106791 )  //42
DX3DVERT( -0.676385, -0.970028, 0.704767 ) DX3DVNORM( -0.994282, 0.0863957, -0.06277 )  //43
DX3DVERT( -0.676385, -0.704767, 0.970029 ) DX3DVNORM( -0.994282, 0.0627699, -0.0863957 )  //44
DX3DVERT( -0.676385, -1.14034, 0.370518 ) DX3DVNORM( -0.994282, 0.101564, -0.0330001 )  //45
DX3DVERT( -0.676385, -0.970028, -0.704767 ) DX3DVNORM( -0.994282, 0.0863957, 0.06277 )  //46
DX3DVERT( -0.676385, -1.14034, -0.370518 ) DX3DVNORM( -0.994282, 0.101564, 0.0330002 )  //47
DX3DVERT( -0.676385, -0.704767, -0.970028 ) DX3DVNORM( -0.994282, 0.06277, 0.0863956 )  //48
DX3DVERT( -0.676385, 0.370518, -1.14034 ) DX3DVNORM( -0.994282, -0.0330001, 0.101564 )  //49
DX3DVERT( -0.676385, -4.85044e-008, -1.19902 ) DX3DVNORM( -0.994282, 6.55863e-009, 0.106791 )  //50
DX3DVERT( -0.676385, 0.704767, -0.970028 ) DX3DVNORM( -0.994282, -0.06277, 0.0863956 )  //51
DX3DVERT( -0.676385, 1.79853, 9.70089e-008 ) DX3DVNORM( -1, -2.68333e-008, -0 )  //52
DX3DVERT( -0.676385, 1.19902, 9.70089e-008 ) DX3DVNORM( -1, -2.68333e-008, -0 )  //53
DX3DVERT( -0.676385, 1.14034, -0.370518 ) DX3DVNORM( -0.994282, -0.101564, 0.0330001 )  //54
DX3DVERT( -0.676385, 1.14034, 0.370518 ) DX3DVNORM( -0.994282, -0.101564, -0.0330001 )  //55
DX3DVERT( -0.676385, 0.970028, 0.704767 ) DX3DVNORM( -0.994282, -0.0863956, -0.06277 )  //56
DX3DVERT( -0.415742, -4.85044e-008, 9.70089e-008 ) DX3DVNORM( -1, 2.36496e-008, -1.46856e-008 )  //57
DX3DVERT( -0.676385, -0.370518, 1.14034 ) DX3DVNORM( -0.994282, 0.0330002, -0.101564 )  //58
DX3DVERT( -0.676385, -1.19902, 9.70089e-008 ) DX3DVNORM( -0.994282, 0.106791, -1.87389e-009 )  //59
DX3DVERT( -0.676385, -0.370518, -1.14034 ) DX3DVNORM( -0.994282, 0.0330001, 0.101564 )  //60
DX3DVERT( -0.676385, 0.970028, -0.704767 ) DX3DVNORM( -0.994282, -0.0863956, 0.0627701 )  //61
DX3DVERT( -0.676385, 1.19902, 9.70089e-008 ) DX3DVNORM( -0.977178, -0.21242, 6.15021e-008 )  //62
DX3DVERT( -0.732719, 1.74069, -0.565586 ) DX3DVNORM( 0, 0, -0 )  //63
DX3DVERT( -0.732719, 1.83027, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //64
DX3DVERT( -0.732719, 1.74069, 0.565586 ) DX3DVNORM( 0, 0, -0 )  //65
DX3DVERT( -0.676385, 1.71051, -0.555777 ) DX3DVNORM( 0, 0, -0 )  //66
DX3DVERT( -0.676385, 1.79853, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //67
DX3DVERT( -0.676385, 1.71051, 0.555777 ) DX3DVNORM( 0, 0, -0 )  //68
DX3DVERT( -0.676385, 1.14034, -0.370518 ) DX3DVNORM( 0, 0, -0 )  //69
DX3DVERT( -0.676385, 1.19902, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //70
DX3DVERT( -0.676385, 1.14034, 0.370518 ) DX3DVNORM( 0, 0, -0 )  //71
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BASE_TIREFR___carwheelB_1 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BASE_TIREFR___carwheelB_1 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 72 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BASE_TIREFR___carwheelB_1	NULL
#define vertexbuff_KEIA_BASE_TIREFR___carwheelB_1	NULL
#endif




#if ((PT_KEIA_BASE_TIREFR___carwheelB_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIREFR___carwheelB_1 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BASE_TIREFR___carwheelB_1 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
	1, 4, 2, // 2 8
	4, 5, 2, // 3 11
	4, 6, 5, // 4 14
	6, 7, 5, // 5 17
	6, 8, 7, // 6 20
	8, 9, 7, // 7 23
	8, 10, 9, // 8 26
	10, 11, 9, // 9 29
	10, 12, 11, // 10 32
	12, 13, 11, // 11 35
	12, 14, 13, // 12 38
	14, 15, 13, // 13 41
	14, 16, 15, // 14 44
	16, 17, 15, // 15 47
	16, 18, 17, // 16 50
	18, 19, 17, // 17 53
	18, 20, 19, // 18 56
	20, 21, 19, // 19 59
	20, 22, 21, // 20 62
	22, 23, 21, // 21 65
	22, 24, 23, // 22 68
	24, 25, 23, // 23 71
	24, 26, 25, // 24 74
	26, 27, 25, // 25 77
	26, 28, 27, // 26 80
	28, 29, 27, // 27 83
	28, 30, 29, // 28 86
	30, 31, 29, // 29 89
	30, 32, 31, // 30 92
	32, 33, 31, // 31 95
	32, 34, 33, // 32 98
	34, 35, 33, // 33 101
	34, 36, 35, // 34 104
	36, 37, 35, // 35 107
	36, 38, 37, // 36 110
	38, 39, 37, // 37 113
	38, 0, 39, // 38 116
	0, 3, 39, // 39 119
	5, 7, 41, // 40 122
	7, 40, 41, // 41 125
	7, 9, 40, // 42 128
	9, 42, 40, // 43 131
	13, 15, 44, // 44 134
	15, 43, 44, // 45 137
	15, 17, 43, // 46 140
	17, 45, 43, // 47 143
	21, 23, 47, // 48 146
	23, 46, 47, // 49 149
	23, 25, 46, // 50 152
	25, 48, 46, // 51 155
	29, 31, 50, // 52 158
	31, 49, 50, // 53 161
	31, 33, 49, // 54 164
	33, 51, 49, // 55 167
	37, 52, 54, // 56 170
	52, 53, 54, // 57 173
	52, 3, 53, // 58 176
	3, 55, 53, // 59 179
	55, 56, 57, // 60 182
	56, 41, 57, // 61 185
	41, 40, 57, // 62 188
	40, 42, 57, // 63 191
	42, 58, 57, // 64 194
	58, 44, 57, // 65 197
	44, 43, 57, // 66 200
	43, 45, 57, // 67 203
	45, 59, 57, // 68 206
	59, 47, 57, // 69 209
	47, 46, 57, // 70 212
	46, 48, 57, // 71 215
	48, 60, 57, // 72 218
	60, 50, 57, // 73 221
	50, 49, 57, // 74 224
	49, 51, 57, // 75 227
	51, 61, 57, // 76 230
	61, 54, 57, // 77 233
	54, 62, 57, // 78 236
	62, 55, 57, // 79 239
	63, 64, 63, // 80 242
	64, 64, 63, // 81 245
	64, 65, 64, // 82 248
	65, 65, 64, // 83 251
	66, 67, 66, // 84 254
	67, 67, 66, // 85 257
	67, 68, 67, // 86 260
	68, 68, 67, // 87 263
	69, 70, 69, // 88 266
	70, 70, 69, // 89 269
	70, 71, 70, // 90 272
	71, 71, 70, // 91 275
DX3DINDEX_END
#endif

#else
#define index_KEIA_BASE_TIREFR___carwheelB_1	NULL
#endif




#if ((PT_KEIA_BASE_TIREFR___carwheelB_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BASE_TIREFR___carwheelB_1 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BASE_TIREFR___carwheelB_1_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BASE_TIREFR___carwheelB_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BASE_TIREFR___carwheelB_1 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BASE_TIREFR___carwheelB_1_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BASE_TIREFR___carwheelB_1_VERTEXSTRIP 	NULL
#endif






#if ((PT_KEIA_BASE_TIREFR___carbodyblack_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIREFR___carbodyblack_2 == PT_TRILIST ) || ((PT_KEIA_BASE_TIREFR___carbodyblack_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BASE_TIREFR___carbodyblack_2 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BASE_TIREFR___carbodyblack_2 )
DX3DVERT( -0.676385, 1.71051, 0.555777 ) DX3DVNORM( -0.864784, -0.477567, -0.15517 )  //0
DX3DVERT( -0.676385, 1.45504, 1.05715 ) DX3DVNORM( -0.864785, -0.406242, -0.295152 )  //1
DX3DVERT( -0.676385, 0.970028, 0.704767 ) DX3DVNORM( -0.994282, -0.0863956, -0.06277 )  //2
DX3DVERT( -0.676385, 1.14034, 0.370518 ) DX3DVNORM( -0.994282, -0.101564, -0.0330001 )  //3
DX3DVERT( -0.676385, 1.05715, 1.45504 ) DX3DVNORM( -0.864785, -0.295151, -0.406242 )  //4
DX3DVERT( -0.676385, 0.704767, 0.970029 ) DX3DVNORM( -0.994282, -0.0627699, -0.0863957 )  //5
DX3DVERT( -0.676385, -4.85044e-008, 1.79853 ) DX3DVNORM( -0.864783, 1.30051e-008, -0.502145 )  //6
DX3DVERT( -0.676385, -0.555777, 1.71051 ) DX3DVNORM( -0.864784, 0.155171, -0.477568 )  //7
DX3DVERT( -0.676385, -0.370518, 1.14034 ) DX3DVNORM( -0.994282, 0.0330002, -0.101564 )  //8
DX3DVERT( -0.676385, -4.85044e-008, 1.19902 ) DX3DVNORM( -0.994282, 6.55863e-009, -0.106791 )  //9
DX3DVERT( -0.676385, -1.05715, 1.45504 ) DX3DVNORM( -0.864785, 0.295152, -0.406242 )  //10
DX3DVERT( -0.676385, -0.704767, 0.970029 ) DX3DVNORM( -0.994282, 0.0627699, -0.0863957 )  //11
DX3DVERT( -0.676385, -1.71051, 0.555777 ) DX3DVNORM( -0.864784, 0.477568, -0.155171 )  //12
DX3DVERT( -0.676385, -1.79853, 9.70089e-008 ) DX3DVNORM( -0.864784, 0.502144, -4.33502e-009 )  //13
DX3DVERT( -0.676385, -1.19902, 9.70089e-008 ) DX3DVNORM( -0.994282, 0.106791, -1.87389e-009 )  //14
DX3DVERT( -0.676385, -1.14034, 0.370518 ) DX3DVNORM( -0.994282, 0.101564, -0.0330001 )  //15
DX3DVERT( -0.676385, -1.71051, -0.555777 ) DX3DVNORM( -0.864784, 0.477568, 0.155171 )  //16
DX3DVERT( -0.676385, -1.14034, -0.370518 ) DX3DVNORM( -0.994282, 0.101564, 0.0330002 )  //17
DX3DVERT( -0.676385, -1.05715, -1.45504 ) DX3DVNORM( -0.864786, 0.295151, 0.406241 )  //18
DX3DVERT( -0.676385, -0.555776, -1.71051 ) DX3DVNORM( -0.864785, 0.155171, 0.477567 )  //19
DX3DVERT( -0.676385, -0.370518, -1.14034 ) DX3DVNORM( -0.994282, 0.0330001, 0.101564 )  //20
DX3DVERT( -0.676385, -0.704767, -0.970028 ) DX3DVNORM( -0.994282, 0.06277, 0.0863956 )  //21
DX3DVERT( -0.676385, -4.85044e-008, -1.79853 ) DX3DVNORM( -0.864784, 4.33502e-008, 0.502144 )  //22
DX3DVERT( -0.676385, -4.85044e-008, -1.19902 ) DX3DVNORM( -0.994282, 6.55863e-009, 0.106791 )  //23
DX3DVERT( -0.676385, 1.05715, -1.45504 ) DX3DVNORM( -0.864785, -0.295151, 0.406241 )  //24
DX3DVERT( -0.676385, 1.45504, -1.05715 ) DX3DVNORM( -0.864785, -0.406242, 0.295152 )  //25
DX3DVERT( -0.676385, 0.970028, -0.704767 ) DX3DVNORM( -0.994282, -0.0863956, 0.0627701 )  //26
DX3DVERT( -0.676385, 0.704767, -0.970028 ) DX3DVNORM( -0.994282, -0.06277, 0.0863956 )  //27
DX3DVERT( -0.676385, 1.71051, -0.555777 ) DX3DVNORM( -0.864784, -0.477568, 0.155171 )  //28
DX3DVERT( -0.676385, 1.14034, -0.370518 ) DX3DVNORM( -0.994282, -0.101564, 0.0330001 )  //29
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( 0, 0, -0 )  //30
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( 0, 0, -0 )  //31
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( 0, 0, -0 )  //32
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( 0, 0, -0 )  //33
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( 0, 0, -0 )  //34
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( 0, 0, -0 )  //35
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( 0, 0, -0 )  //36
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( 0, 0, -0 )  //37
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( 0, 0, -0 )  //38
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( 0, 2.29447e-014, -0 )  //39
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( 0, 0, -0 )  //40
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( 0, 0, -0 )  //41
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( 0, 0, -0 )  //42
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( 0, 0, -0 )  //43
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( 0, 0, -0 )  //44
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( 0, 0, -0 )  //45
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( 0, 0, -0 )  //46
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( 0, 0, -0 )  //47
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( 0, 0, -0 )  //48
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( 0, 2.29447e-014, -0 )  //49
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.99999, -0.00403789, -0.00205869 )  //50
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( -0.99999, -0.00403789, -0.00205869 )  //51
DX3DVERT( 0.807322, 2.16494, 1.57292 ) DX3DVNORM( -0.99999, -0.00403789, -0.00205869 )  //52
DX3DVERT( 0.807322, 2.54504, 0.826932 ) DX3DVNORM( -0.99999, -0.00403789, -0.00205869 )  //53
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( -0.99999, -0.00320476, -0.00320651 )  //54
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.99999, -0.00320476, -0.00320651 )  //55
DX3DVERT( 0.807322, 1.57292, 2.16494 ) DX3DVNORM( -0.99999, -0.00320476, -0.00320651 )  //56
DX3DVERT( 0.807322, 2.16494, 1.57292 ) DX3DVNORM( -0.99999, -0.00320476, -0.00320651 )  //57
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.99999, -0.00205486, -0.00404004 )  //58
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.99999, -0.00205486, -0.00404004 )  //59
DX3DVERT( 0.807322, 0.826932, 2.54503 ) DX3DVNORM( -0.99999, -0.00205486, -0.00404004 )  //60
DX3DVERT( 0.807322, 1.57292, 2.16494 ) DX3DVNORM( -0.99999, -0.00205486, -0.00404004 )  //61
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.99999, -0.000709209, -0.00447809 )  //62
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( -0.99999, -0.000709209, -0.00447809 )  //63
DX3DVERT( 0.807322, -4.85044e-008, 2.67601 ) DX3DVNORM( -0.99999, -0.000709209, -0.00447809 )  //64
DX3DVERT( 0.807322, 0.826932, 2.54503 ) DX3DVNORM( -0.99999, -0.000709209, -0.00447809 )  //65
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( -0.99999, 0.000709337, -0.00447889 )  //66
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.99999, 0.000709337, -0.00447889 )  //67
DX3DVERT( 0.807322, -0.826932, 2.54504 ) DX3DVNORM( -0.99999, 0.000709337, -0.00447889 )  //68
DX3DVERT( 0.807322, -4.85044e-008, 2.67601 ) DX3DVNORM( -0.99999, 0.000709337, -0.00447889 )  //69
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.99999, 0.00205336, -0.00404044 )  //70
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( -0.99999, 0.00205336, -0.00404044 )  //71
DX3DVERT( 0.807322, -1.57292, 2.16494 ) DX3DVNORM( -0.99999, 0.00205336, -0.00404044 )  //72
DX3DVERT( 0.807322, -0.826932, 2.54504 ) DX3DVNORM( -0.99999, 0.00205336, -0.00404044 )  //73
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( -0.99999, 0.0032051, -0.00320296 )  //74
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.99999, 0.0032051, -0.00320296 )  //75
DX3DVERT( 0.807322, -2.16494, 1.57292 ) DX3DVNORM( -0.99999, 0.0032051, -0.00320296 )  //76
DX3DVERT( 0.807322, -1.57292, 2.16494 ) DX3DVNORM( -0.99999, 0.0032051, -0.00320296 )  //77
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.99999, 0.00404322, -0.00205631 )  //78
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.99999, 0.00404322, -0.00205631 )  //79
DX3DVERT( 0.807322, -2.54503, 0.826932 ) DX3DVNORM( -0.99999, 0.00404322, -0.00205631 )  //80
DX3DVERT( 0.807322, -2.16494, 1.57292 ) DX3DVNORM( -0.99999, 0.00404322, -0.00205631 )  //81
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.99999, 0.00447931, -0.000709303 )  //82
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( -0.99999, 0.00447931, -0.000709303 )  //83
DX3DVERT( 0.807322, -2.67601, 9.70089e-008 ) DX3DVNORM( -0.99999, 0.00447931, -0.000709303 )  //84
DX3DVERT( 0.807322, -2.54503, 0.826932 ) DX3DVNORM( -0.99999, 0.00447931, -0.000709303 )  //85
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( -0.99999, 0.00448858, 0.000709304 )  //86
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( -0.99999, 0.00448858, 0.000709304 )  //87
DX3DVERT( 0.807322, -2.54503, -0.826932 ) DX3DVNORM( -0.99999, 0.00448858, 0.000709304 )  //88
DX3DVERT( 0.807322, -2.67601, 9.70089e-008 ) DX3DVNORM( -0.99999, 0.00448858, 0.000709304 )  //89
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( -0.99999, 0.00403308, 0.0020585 )  //90
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( -0.99999, 0.00403308, 0.0020585 )  //91
DX3DVERT( 0.807322, -2.16494, -1.57292 ) DX3DVNORM( -0.99999, 0.00403308, 0.0020585 )  //92
DX3DVERT( 0.807322, -2.54503, -0.826932 ) DX3DVNORM( -0.99999, 0.00403308, 0.0020585 )  //93
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( -0.99999, 0.00320682, 0.00320628 )  //94
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.99999, 0.00320682, 0.00320628 )  //95
DX3DVERT( 0.807322, -1.57292, -2.16493 ) DX3DVNORM( -0.99999, 0.00320682, 0.00320628 )  //96
DX3DVERT( 0.807322, -2.16494, -1.57292 ) DX3DVNORM( -0.99999, 0.00320682, 0.00320628 )  //97
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.99999, 0.00205542, 0.00403597 )  //98
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( -0.99999, 0.00205542, 0.00403597 )  //99
DX3DVERT( 0.807322, -0.826932, -2.54504 ) DX3DVNORM( -0.99999, 0.00205542, 0.00403597 )  //100
DX3DVERT( 0.807322, -1.57292, -2.16493 ) DX3DVNORM( -0.99999, 0.00205542, 0.00403597 )  //101
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( -0.99999, 0.000709175, 0.00447423 )  //102
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -0.99999, 0.000709175, 0.00447423 )  //103
DX3DVERT( 0.807322, -4.85044e-008, -2.67601 ) DX3DVNORM( -0.99999, 0.000709175, 0.00447423 )  //104
DX3DVERT( 0.807322, -0.826932, -2.54504 ) DX3DVNORM( -0.99999, 0.000709175, 0.00447423 )  //105
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -0.99999, -0.000709885, 0.00447474 )  //106
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.99999, -0.000709885, 0.00447474 )  //107
DX3DVERT( 0.807322, 0.826932, -2.54504 ) DX3DVNORM( -0.99999, -0.000709885, 0.00447474 )  //108
DX3DVERT( 0.807322, -4.85044e-008, -2.67601 ) DX3DVNORM( -0.99999, -0.000709885, 0.00447474 )  //109
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.99999, -0.0020405, 0.00400667 )  //110
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.99999, -0.0020405, 0.00400667 )  //111
DX3DVERT( 0.807322, 1.57292, -2.16494 ) DX3DVNORM( -0.99999, -0.0020405, 0.00400667 )  //112
DX3DVERT( 0.807322, 0.826932, -2.54504 ) DX3DVNORM( -0.99999, -0.0020405, 0.00400667 )  //113
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.99999, -0.00318311, 0.00317948 )  //114
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.99999, -0.00318311, 0.00317948 )  //115
DX3DVERT( 0.807322, 2.16494, -1.57292 ) DX3DVNORM( -0.99999, -0.00318311, 0.00317948 )  //116
DX3DVERT( 0.807322, 1.57292, -2.16494 ) DX3DVNORM( -0.99999, -0.00318311, 0.00317948 )  //117
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.99999, -0.00403532, 0.00205632 )  //118
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.99999, -0.00403532, 0.00205632 )  //119
DX3DVERT( 0.807322, 2.54503, -0.826932 ) DX3DVNORM( -0.99999, -0.00403532, 0.00205632 )  //120
DX3DVERT( 0.807322, 2.16494, -1.57292 ) DX3DVNORM( -0.99999, -0.00403532, 0.00205632 )  //121
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.99999, -0.00448358, 0.000709277 )  //122
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -0.99999, -0.00448358, 0.000709277 )  //123
DX3DVERT( 0.807322, 2.67601, 9.70089e-008 ) DX3DVNORM( -0.99999, -0.00448358, 0.000709277 )  //124
DX3DVERT( 0.807322, 2.54503, -0.826932 ) DX3DVNORM( -0.99999, -0.00448358, 0.000709277 )  //125
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -0.99999, -0.00447732, -0.000709335 )  //126
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.99999, -0.00447732, -0.000709335 )  //127
DX3DVERT( 0.807322, 2.54504, 0.826932 ) DX3DVNORM( -0.99999, -0.00447732, -0.000709335 )  //128
DX3DVERT( 0.807322, 2.67601, 9.70089e-008 ) DX3DVNORM( -0.99999, -0.00447732, -0.000709335 )  //129
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.000205232, -0.309088, 0.951033 )  //130
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.000205232, -0.309088, 0.951033 )  //131
DX3DVERT( 0.807322, 2.54504, 0.826932 ) DX3DVNORM( -0.000205232, -0.309088, 0.951033 )  //132
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( 0.0022658, -0.587692, 0.809081 )  //133
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.0022658, -0.587692, 0.809081 )  //134
DX3DVERT( 0.807322, 2.16494, 1.57292 ) DX3DVNORM( 0.0022658, -0.587692, 0.809081 )  //135
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.997855, -0.0583282, -0.0297197 )  //136
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( -0.997855, -0.0583282, -0.0297197 )  //137
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0583282, -0.0297197 )  //138
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.00109155, -0.809041, 0.58775 )  //139
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00109155, -0.809041, 0.58775 )  //140
DX3DVERT( 0.807322, 1.57292, 2.16494 ) DX3DVNORM( -0.00109155, -0.809041, 0.58775 )  //141
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( -0.997855, -0.0462896, -0.0462896 )  //142
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.997855, -0.0462896, -0.0462896 )  //143
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0462896, -0.0462896 )  //144
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.000905487, -0.951071, 0.308971 )  //145
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.000905487, -0.951071, 0.308971 )  //146
DX3DVERT( 0.807322, 0.826932, 2.54503 ) DX3DVNORM( -0.000905487, -0.951071, 0.308971 )  //147
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.997855, -0.0297196, -0.0583283 )  //148
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.997855, -0.0297196, -0.0583283 )  //149
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0297196, -0.0583283 )  //150
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( 6.57274e-007, -1, 2.94362e-009 )  //151
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 6.57274e-007, -1, 2.94362e-009 )  //152
DX3DVERT( 0.807322, -4.85044e-008, 2.67601 ) DX3DVNORM( 6.57274e-007, -1, 2.94362e-009 )  //153
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.997855, -0.0102408, -0.0646574 )  //154
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( -0.997855, -0.0102408, -0.0646574 )  //155
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0102408, -0.0646574 )  //156
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.00100501, -0.951042, -0.30906 )  //157
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00100501, -0.951042, -0.30906 )  //158
DX3DVERT( 0.807322, -0.826932, 2.54504 ) DX3DVNORM( -0.00100501, -0.951042, -0.30906 )  //159
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( -0.997855, 0.0102408, -0.0646574 )  //160
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.997855, 0.0102408, -0.0646574 )  //161
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0102408, -0.0646574 )  //162
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( 3.86533e-005, -0.809, -0.587809 )  //163
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 3.86533e-005, -0.809, -0.587809 )  //164
DX3DVERT( 0.807322, -1.57292, 2.16494 ) DX3DVNORM( 3.86533e-005, -0.809, -0.587809 )  //165
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.997855, 0.0297197, -0.0583283 )  //166
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( -0.997855, 0.0297197, -0.0583283 )  //167
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0297197, -0.0583283 )  //168
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.00229266, -0.587827, -0.808983 )  //169
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00229266, -0.587827, -0.808983 )  //170
DX3DVERT( 0.807322, -2.16494, 1.57292 ) DX3DVNORM( -0.00229266, -0.587827, -0.808983 )  //171
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( -0.997855, 0.0462895, -0.0462896 )  //172
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.997855, 0.0462895, -0.0462896 )  //173
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0462895, -0.0462896 )  //174
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.000413168, -0.309045, -0.951047 )  //175
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.000413168, -0.309045, -0.951047 )  //176
DX3DVERT( 0.807322, -2.54503, 0.826932 ) DX3DVNORM( -0.000413168, -0.309045, -0.951047 )  //177
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.997855, 0.0583282, -0.0297197 )  //178
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.997855, 0.0583282, -0.0297197 )  //179
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0583282, -0.0297197 )  //180
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( 6.57345e-007, -2.94888e-009, -1 )  //181
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 6.57345e-007, -2.94888e-009, -1 )  //182
DX3DVERT( 0.807322, -2.67601, 9.70089e-008 ) DX3DVNORM( 6.57345e-007, -2.94888e-009, -1 )  //183
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.997855, 0.0646574, -0.0102407 )  //184
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( -0.997855, 0.0646574, -0.0102407 )  //185
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0646574, -0.0102407 )  //186
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( 0.000881559, 0.309004, -0.95106 )  //187
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.000881559, 0.309004, -0.95106 )  //188
DX3DVERT( 0.807322, -2.54503, -0.826932 ) DX3DVNORM( 0.000881559, 0.309004, -0.95106 )  //189
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( -0.997855, 0.0646574, 0.0102407 )  //190
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( -0.997855, 0.0646574, 0.0102407 )  //191
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0646574, 0.0102407 )  //192
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( 0.000601854, 0.587748, -0.809044 )  //193
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.000601854, 0.587748, -0.809044 )  //194
DX3DVERT( 0.807322, -2.16494, -1.57292 ) DX3DVNORM( 0.000601854, 0.587748, -0.809044 )  //195
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( -0.997855, 0.0583282, 0.0297197 )  //196
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( -0.997855, 0.0583282, 0.0297197 )  //197
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0583282, 0.0297197 )  //198
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.00126643, 0.808994, -0.587815 )  //199
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00126643, 0.808994, -0.587815 )  //200
DX3DVERT( 0.807322, -1.57292, -2.16493 ) DX3DVNORM( -0.00126643, 0.808994, -0.587815 )  //201
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( -0.997855, 0.0462895, 0.0462896 )  //202
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.997855, 0.0462895, 0.0462896 )  //203
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0462895, 0.0462896 )  //204
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( 0.00143018, 0.951022, -0.309121 )  //205
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.00143018, 0.951022, -0.309121 )  //206
DX3DVERT( 0.807322, -0.826932, -2.54504 ) DX3DVNORM( 0.00143018, 0.951022, -0.309121 )  //207
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.997855, 0.0297197, 0.0583283 )  //208
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( -0.997855, 0.0297197, 0.0583283 )  //209
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0297197, 0.0583283 )  //210
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -6.57365e-007, 1, 2.94415e-009 )  //211
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -6.57365e-007, 1, 2.94415e-009 )  //212
DX3DVERT( 0.807322, -4.85044e-008, -2.67601 ) DX3DVNORM( -6.57365e-007, 1, 2.94415e-009 )  //213
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( -0.997855, 0.0102408, 0.0646574 )  //214
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -0.997855, 0.0102408, 0.0646574 )  //215
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0102408, 0.0646574 )  //216
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.00201088, 0.951027, 0.309102 )  //217
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00201088, 0.951027, 0.309102 )  //218
DX3DVERT( 0.807322, 0.826932, -2.54504 ) DX3DVNORM( -0.00201088, 0.951027, 0.309102 )  //219
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -0.997855, -0.0102408, 0.0646574 )  //220
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.997855, -0.0102408, 0.0646574 )  //221
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0102408, 0.0646574 )  //222
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.0013701, 0.808891, 0.587958 )  //223
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.0013701, 0.808891, 0.587958 )  //224
DX3DVERT( 0.807322, 1.57292, -2.16494 ) DX3DVNORM( -0.0013701, 0.808891, 0.587958 )  //225
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.997855, -0.0297197, 0.0583283 )  //226
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.997855, -0.0297197, 0.0583283 )  //227
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0297197, 0.0583283 )  //228
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.00421282, 0.587463, 0.80924 )  //229
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00421282, 0.587463, 0.80924 )  //230
DX3DVERT( 0.807322, 2.16494, -1.57292 ) DX3DVNORM( -0.00421282, 0.587463, 0.80924 )  //231
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.997855, -0.0462895, 0.0462896 )  //232
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.997855, -0.0462895, 0.0462896 )  //233
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0462895, 0.0462896 )  //234
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.000799616, 0.308986, 0.951066 )  //235
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.000799616, 0.308986, 0.951066 )  //236
DX3DVERT( 0.807322, 2.54503, -0.826932 ) DX3DVNORM( -0.000799616, 0.308986, 0.951066 )  //237
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.997855, -0.0583282, 0.0297197 )  //238
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.997855, -0.0583282, 0.0297197 )  //239
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0583282, 0.0297197 )  //240
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -6.57372e-007, -2.94871e-009, 1 )  //241
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -6.57372e-007, -2.94871e-009, 1 )  //242
DX3DVERT( 0.807322, 2.67601, 9.70089e-008 ) DX3DVNORM( -6.57372e-007, -2.94871e-009, 1 )  //243
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.997855, -0.0646574, 0.0102407 )  //244
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -0.997855, -0.0646574, 0.0102407 )  //245
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0646574, 0.0102407 )  //246
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -0.997855, -0.0646574, -0.0102407 )  //247
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.997855, -0.0646574, -0.0102407 )  //248
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0646574, -0.0102407 )  //249
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0, 0, -0 )  //250
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( 0.997855, 0.0583281, 0.0297197 )  //251
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( 0.997855, 0.0583281, 0.0297197 )  //252
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0583281, 0.0297197 )  //253
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( 0.997855, 0.0462896, 0.0462896 )  //254
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( 0.997855, 0.0462896, 0.0462896 )  //255
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0462896, 0.0462896 )  //256
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( 0.997855, 0.0297197, 0.0583283 )  //257
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( 0.997855, 0.0297197, 0.0583283 )  //258
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0297197, 0.0583283 )  //259
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( 0.997855, 0.0102408, 0.0646574 )  //260
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( 0.997855, 0.0102408, 0.0646574 )  //261
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0102408, 0.0646574 )  //262
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( 0.997855, -0.0102408, 0.0646574 )  //263
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( 0.997855, -0.0102408, 0.0646574 )  //264
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0102408, 0.0646574 )  //265
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( 0.997855, -0.0297197, 0.0583283 )  //266
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( 0.997855, -0.0297197, 0.0583283 )  //267
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0297197, 0.0583283 )  //268
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( 0.997855, -0.0462895, 0.0462896 )  //269
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( 0.997855, -0.0462895, 0.0462896 )  //270
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0462895, 0.0462896 )  //271
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( 0.997855, -0.0583282, 0.0297197 )  //272
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( 0.997855, -0.0583282, 0.0297197 )  //273
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0583282, 0.0297197 )  //274
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( 0.997855, -0.0646574, 0.0102407 )  //275
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( 0.997855, -0.0646574, 0.0102407 )  //276
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0646574, 0.0102407 )  //277
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( 0.997855, -0.0646574, -0.0102407 )  //278
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( 0.997855, -0.0646574, -0.0102407 )  //279
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0646574, -0.0102407 )  //280
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( 0.997855, -0.0583282, -0.0297197 )  //281
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( 0.997855, -0.0583282, -0.0297197 )  //282
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0583282, -0.0297197 )  //283
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( 0.997855, -0.0462895, -0.0462896 )  //284
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( 0.997855, -0.0462895, -0.0462896 )  //285
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0462895, -0.0462896 )  //286
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( 0.997855, -0.0297197, -0.0583283 )  //287
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( 0.997855, -0.0297197, -0.0583283 )  //288
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0297197, -0.0583283 )  //289
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( 0.997855, -0.0102408, -0.0646574 )  //290
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( 0.997855, -0.0102408, -0.0646574 )  //291
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0102408, -0.0646574 )  //292
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( 0.997855, 0.0102408, -0.0646574 )  //293
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( 0.997855, 0.0102408, -0.0646574 )  //294
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0102408, -0.0646574 )  //295
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( 0.997855, 0.0297198, -0.0583283 )  //296
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( 0.997855, 0.0297198, -0.0583283 )  //297
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0297198, -0.0583283 )  //298
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( 0.997855, 0.0462895, -0.0462896 )  //299
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( 0.997855, 0.0462895, -0.0462896 )  //300
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0462895, -0.0462896 )  //301
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( 0.997855, 0.0583283, -0.0297197 )  //302
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( 0.997855, 0.0583283, -0.0297197 )  //303
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0583283, -0.0297197 )  //304
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( 0.997855, 0.0646574, -0.0102407 )  //305
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( 0.997855, 0.0646574, -0.0102407 )  //306
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0646574, -0.0102407 )  //307
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( 0.997855, 0.0646575, 0.0102407 )  //308
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( 0.997855, 0.0646575, 0.0102407 )  //309
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0646575, 0.0102407 )  //310
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BASE_TIREFR___carbodyblack_2 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BASE_TIREFR___carbodyblack_2 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 311 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BASE_TIREFR___carbodyblack_2	NULL
#define vertexbuff_KEIA_BASE_TIREFR___carbodyblack_2	NULL
#endif




#if ((PT_KEIA_BASE_TIREFR___carbodyblack_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIREFR___carbodyblack_2 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BASE_TIREFR___carbodyblack_2 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
	1, 4, 2, // 2 8
	4, 5, 2, // 3 11
	6, 7, 9, // 4 14
	7, 8, 9, // 5 17
	7, 10, 8, // 6 20
	10, 11, 8, // 7 23
	12, 13, 15, // 8 26
	13, 14, 15, // 9 29
	13, 16, 14, // 10 32
	16, 17, 14, // 11 35
	18, 19, 21, // 12 38
	19, 20, 21, // 13 41
	19, 22, 20, // 14 44
	22, 23, 20, // 15 47
	24, 25, 27, // 16 50
	25, 26, 27, // 17 53
	25, 28, 26, // 18 56
	28, 29, 26, // 19 59
	30, 31, 30, // 20 62
	31, 31, 30, // 21 65
	32, 30, 32, // 22 68
	30, 30, 32, // 23 71
	33, 32, 33, // 24 74
	32, 32, 33, // 25 77
	34, 33, 34, // 26 80
	33, 33, 34, // 27 83
	35, 34, 35, // 28 86
	34, 34, 35, // 29 89
	36, 35, 36, // 30 92
	35, 35, 36, // 31 95
	37, 36, 37, // 32 98
	36, 36, 37, // 33 101
	38, 37, 38, // 34 104
	37, 37, 38, // 35 107
	39, 38, 39, // 36 110
	38, 38, 39, // 37 113
	40, 39, 40, // 38 116
	39, 39, 40, // 39 119
	41, 40, 41, // 40 122
	40, 40, 41, // 41 125
	42, 41, 42, // 42 128
	41, 41, 42, // 43 131
	43, 42, 43, // 44 134
	42, 42, 43, // 45 137
	44, 43, 44, // 46 140
	43, 43, 44, // 47 143
	45, 44, 45, // 48 146
	44, 44, 45, // 49 149
	46, 45, 46, // 50 152
	45, 45, 46, // 51 155
	47, 46, 47, // 52 158
	46, 46, 47, // 53 161
	48, 47, 48, // 54 164
	47, 47, 48, // 55 167
	49, 48, 49, // 56 170
	48, 48, 49, // 57 173
	31, 49, 31, // 58 176
	49, 49, 31, // 59 179
	31, 30, 31, // 60 182
	30, 30, 31, // 61 185
	30, 32, 30, // 62 188
	32, 32, 30, // 63 191
	32, 33, 32, // 64 194
	33, 33, 32, // 65 197
	33, 34, 33, // 66 200
	34, 34, 33, // 67 203
	34, 35, 34, // 68 206
	35, 35, 34, // 69 209
	35, 36, 35, // 70 212
	36, 36, 35, // 71 215
	36, 37, 36, // 72 218
	37, 37, 36, // 73 221
	37, 38, 37, // 74 224
	38, 38, 37, // 75 227
	38, 39, 38, // 76 230
	39, 39, 38, // 77 233
	39, 40, 39, // 78 236
	40, 40, 39, // 79 239
	40, 41, 40, // 80 242
	41, 41, 40, // 81 245
	41, 42, 41, // 82 248
	42, 42, 41, // 83 251
	42, 43, 42, // 84 254
	43, 43, 42, // 85 257
	43, 44, 43, // 86 260
	44, 44, 43, // 87 263
	44, 45, 44, // 88 266
	45, 45, 44, // 89 269
	45, 46, 45, // 90 272
	46, 46, 45, // 91 275
	46, 47, 46, // 92 278
	47, 47, 46, // 93 281
	47, 48, 47, // 94 284
	48, 48, 47, // 95 287
	48, 49, 48, // 96 290
	49, 49, 48, // 97 293
	49, 31, 49, // 98 296
	31, 31, 49, // 99 299
	31, 31, 31, // 100 302
	31, 31, 31, // 101 305
	30, 30, 30, // 102 308
	30, 30, 30, // 103 311
	30, 31, 30, // 104 314
	31, 31, 30, // 105 317
	32, 32, 32, // 106 320
	32, 32, 32, // 107 323
	32, 30, 32, // 108 326
	30, 30, 32, // 109 329
	33, 33, 33, // 110 332
	33, 33, 33, // 111 335
	33, 32, 33, // 112 338
	32, 32, 33, // 113 341
	34, 34, 34, // 114 344
	34, 34, 34, // 115 347
	34, 33, 34, // 116 350
	33, 33, 34, // 117 353
	35, 35, 35, // 118 356
	35, 35, 35, // 119 359
	35, 34, 35, // 120 362
	34, 34, 35, // 121 365
	36, 36, 36, // 122 368
	36, 36, 36, // 123 371
	36, 35, 36, // 124 374
	35, 35, 36, // 125 377
	37, 37, 37, // 126 380
	37, 37, 37, // 127 383
	37, 36, 37, // 128 386
	36, 36, 37, // 129 389
	38, 38, 38, // 130 392
	38, 38, 38, // 131 395
	38, 37, 38, // 132 398
	37, 37, 38, // 133 401
	39, 39, 39, // 134 404
	39, 39, 39, // 135 407
	39, 38, 39, // 136 410
	38, 38, 39, // 137 413
	40, 40, 40, // 138 416
	40, 40, 40, // 139 419
	40, 39, 40, // 140 422
	39, 39, 40, // 141 425
	41, 41, 41, // 142 428
	41, 41, 41, // 143 431
	41, 40, 41, // 144 434
	40, 40, 41, // 145 437
	42, 42, 42, // 146 440
	42, 42, 42, // 147 443
	42, 41, 42, // 148 446
	41, 41, 42, // 149 449
	43, 43, 43, // 150 452
	43, 43, 43, // 151 455
	43, 42, 43, // 152 458
	42, 42, 43, // 153 461
	44, 44, 44, // 154 464
	44, 44, 44, // 155 467
	44, 43, 44, // 156 470
	43, 43, 44, // 157 473
	45, 45, 45, // 158 476
	45, 45, 45, // 159 479
	45, 44, 45, // 160 482
	44, 44, 45, // 161 485
	46, 46, 46, // 162 488
	46, 46, 46, // 163 491
	46, 45, 46, // 164 494
	45, 45, 46, // 165 497
	47, 47, 47, // 166 500
	47, 47, 47, // 167 503
	47, 46, 47, // 168 506
	46, 46, 47, // 169 509
	48, 48, 48, // 170 512
	48, 48, 48, // 171 515
	48, 47, 48, // 172 518
	47, 47, 48, // 173 521
	49, 49, 49, // 174 524
	49, 49, 49, // 175 527
	49, 48, 49, // 176 530
	48, 48, 49, // 177 533
	31, 49, 31, // 178 536
	49, 49, 31, // 179 539
	50, 51, 53, // 180 542
	51, 52, 53, // 181 545
	54, 55, 57, // 182 548
	55, 56, 57, // 183 551
	58, 59, 61, // 184 554
	59, 60, 61, // 185 557
	62, 63, 65, // 186 560
	63, 64, 65, // 187 563
	66, 67, 69, // 188 566
	67, 68, 69, // 189 569
	70, 71, 73, // 190 572
	71, 72, 73, // 191 575
	74, 75, 77, // 192 578
	75, 76, 77, // 193 581
	78, 79, 81, // 194 584
	79, 80, 81, // 195 587
	82, 83, 85, // 196 590
	83, 84, 85, // 197 593
	86, 87, 89, // 198 596
	87, 88, 89, // 199 599
	90, 91, 93, // 200 602
	91, 92, 93, // 201 605
	94, 95, 97, // 202 608
	95, 96, 97, // 203 611
	98, 99, 101, // 204 614
	99, 100, 101, // 205 617
	102, 103, 105, // 206 620
	103, 104, 105, // 207 623
	106, 107, 109, // 208 626
	107, 108, 109, // 209 629
	110, 111, 113, // 210 632
	111, 112, 113, // 211 635
	114, 115, 117, // 212 638
	115, 116, 117, // 213 641
	118, 119, 121, // 214 644
	119, 120, 121, // 215 647
	122, 123, 125, // 216 650
	123, 124, 125, // 217 653
	126, 127, 129, // 218 656
	127, 128, 129, // 219 659
	130, 130, 132, // 220 662
	130, 131, 132, // 221 665
	133, 133, 135, // 222 668
	133, 134, 135, // 223 671
	136, 137, 138, // 224 674
	139, 139, 141, // 225 677
	139, 140, 141, // 226 680
	142, 143, 144, // 227 683
	145, 145, 147, // 228 686
	145, 146, 147, // 229 689
	148, 149, 150, // 230 692
	151, 151, 153, // 231 695
	151, 152, 153, // 232 698
	154, 155, 156, // 233 701
	157, 157, 159, // 234 704
	157, 158, 159, // 235 707
	160, 161, 162, // 236 710
	163, 163, 165, // 237 713
	163, 164, 165, // 238 716
	166, 167, 168, // 239 719
	169, 169, 171, // 240 722
	169, 170, 171, // 241 725
	172, 173, 174, // 242 728
	175, 175, 177, // 243 731
	175, 176, 177, // 244 734
	178, 179, 180, // 245 737
	181, 181, 183, // 246 740
	181, 182, 183, // 247 743
	184, 185, 186, // 248 746
	187, 187, 189, // 249 749
	187, 188, 189, // 250 752
	190, 191, 192, // 251 755
	193, 193, 195, // 252 758
	193, 194, 195, // 253 761
	196, 197, 198, // 254 764
	199, 199, 201, // 255 767
	199, 200, 201, // 256 770
	202, 203, 204, // 257 773
	205, 205, 207, // 258 776
	205, 206, 207, // 259 779
	208, 209, 210, // 260 782
	211, 211, 213, // 261 785
	211, 212, 213, // 262 788
	214, 215, 216, // 263 791
	217, 217, 219, // 264 794
	217, 218, 219, // 265 797
	220, 221, 222, // 266 800
	223, 223, 225, // 267 803
	223, 224, 225, // 268 806
	226, 227, 228, // 269 809
	229, 229, 231, // 270 812
	229, 230, 231, // 271 815
	232, 233, 234, // 272 818
	235, 235, 237, // 273 821
	235, 236, 237, // 274 824
	238, 239, 240, // 275 827
	241, 241, 243, // 276 830
	241, 242, 243, // 277 833
	244, 245, 246, // 278 836
	247, 248, 249, // 279 839
	130, 130, 132, // 280 842
	130, 131, 132, // 281 845
	133, 133, 135, // 282 848
	133, 134, 135, // 283 851
	136, 137, 138, // 284 854
	139, 139, 141, // 285 857
	139, 140, 141, // 286 860
	142, 143, 144, // 287 863
	145, 145, 147, // 288 866
	145, 146, 147, // 289 869
	148, 149, 150, // 290 872
	151, 151, 153, // 291 875
	151, 152, 153, // 292 878
	154, 155, 156, // 293 881
	157, 157, 159, // 294 884
	157, 158, 159, // 295 887
	160, 161, 162, // 296 890
	163, 163, 165, // 297 893
	163, 164, 165, // 298 896
	166, 167, 168, // 299 899
	169, 169, 171, // 300 902
	169, 170, 171, // 301 905
	172, 173, 174, // 302 908
	175, 175, 177, // 303 911
	175, 176, 177, // 304 914
	178, 179, 180, // 305 917
	181, 181, 183, // 306 920
	181, 182, 183, // 307 923
	184, 185, 186, // 308 926
	187, 187, 189, // 309 929
	187, 188, 189, // 310 932
	190, 191, 192, // 311 935
	193, 193, 195, // 312 938
	193, 194, 195, // 313 941
	196, 197, 198, // 314 944
	199, 199, 201, // 315 947
	199, 200, 201, // 316 950
	202, 203, 204, // 317 953
	205, 205, 207, // 318 956
	205, 206, 207, // 319 959
	208, 209, 210, // 320 962
	211, 211, 213, // 321 965
	211, 212, 213, // 322 968
	214, 215, 216, // 323 971
	217, 217, 219, // 324 974
	217, 218, 219, // 325 977
	220, 221, 222, // 326 980
	223, 223, 225, // 327 983
	223, 224, 225, // 328 986
	226, 227, 228, // 329 989
	229, 229, 231, // 330 992
	229, 230, 231, // 331 995
	232, 233, 234, // 332 998
	235, 235, 237, // 333 1001
	235, 236, 237, // 334 1004
	238, 239, 240, // 335 1007
	241, 241, 243, // 336 1010
	241, 242, 243, // 337 1013
	244, 245, 246, // 338 1016
	247, 248, 249, // 339 1019
	31, 31, 250, // 340 1022
	31, 31, 250, // 341 1025
	30, 30, 250, // 342 1028
	30, 30, 250, // 343 1031
	251, 252, 253, // 344 1034
	32, 32, 250, // 345 1037
	32, 32, 250, // 346 1040
	254, 255, 256, // 347 1043
	33, 33, 250, // 348 1046
	33, 33, 250, // 349 1049
	257, 258, 259, // 350 1052
	34, 34, 250, // 351 1055
	34, 34, 250, // 352 1058
	260, 261, 262, // 353 1061
	35, 35, 250, // 354 1064
	35, 35, 250, // 355 1067
	263, 264, 265, // 356 1070
	36, 36, 250, // 357 1073
	36, 36, 250, // 358 1076
	266, 267, 268, // 359 1079
	37, 37, 250, // 360 1082
	37, 37, 250, // 361 1085
	269, 270, 271, // 362 1088
	38, 38, 250, // 363 1091
	38, 38, 250, // 364 1094
	272, 273, 274, // 365 1097
	39, 39, 250, // 366 1100
	39, 39, 250, // 367 1103
	275, 276, 277, // 368 1106
	40, 40, 250, // 369 1109
	40, 40, 250, // 370 1112
	278, 279, 280, // 371 1115
	41, 41, 250, // 372 1118
	41, 41, 250, // 373 1121
	281, 282, 283, // 374 1124
	42, 42, 250, // 375 1127
	42, 42, 250, // 376 1130
	284, 285, 286, // 377 1133
	43, 43, 250, // 378 1136
	43, 43, 250, // 379 1139
	287, 288, 289, // 380 1142
	44, 44, 250, // 381 1145
	44, 44, 250, // 382 1148
	290, 291, 292, // 383 1151
	45, 45, 250, // 384 1154
	45, 45, 250, // 385 1157
	293, 294, 295, // 386 1160
	46, 46, 250, // 387 1163
	46, 46, 250, // 388 1166
	296, 297, 298, // 389 1169
	47, 47, 250, // 390 1172
	47, 47, 250, // 391 1175
	299, 300, 301, // 392 1178
	48, 48, 250, // 393 1181
	48, 48, 250, // 394 1184
	302, 303, 304, // 395 1187
	49, 49, 250, // 396 1190
	49, 49, 250, // 397 1193
	305, 306, 307, // 398 1196
	308, 309, 310, // 399 1199
DX3DINDEX_END
#endif

#else
#define index_KEIA_BASE_TIREFR___carbodyblack_2	NULL
#endif




#if ((PT_KEIA_BASE_TIREFR___carbodyblack_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BASE_TIREFR___carbodyblack_2 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BASE_TIREFR___carbodyblack_2_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BASE_TIREFR___carbodyblack_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BASE_TIREFR___carbodyblack_2 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BASE_TIREFR___carbodyblack_2_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BASE_TIREFR___carbodyblack_2_VERTEXSTRIP 	NULL
#endif




DX3DMODELTBL_START( modeltbl_KEIA_BASE_TIREFR__ )
DX3DMODEL_START( model_KEIA_BASE_TIREFR___cartire_0 )
DX3DMODEL_VERTEX( vertex_KEIA_BASE_TIREFR___cartire_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BASE_TIREFR___cartire_0 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 516 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_cartire )
DX3DMODEL_END
DX3DMODEL_START( model_KEIA_BASE_TIREFR___carwheelB_1 )
DX3DMODEL_VERTEX( vertex_KEIA_BASE_TIREFR___carwheelB_1 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BASE_TIREFR___carwheelB_1 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 276 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carwheelB )
DX3DMODEL_END
DX3DMODEL_START( model_KEIA_BASE_TIREFR___carbodyblack_2 )
DX3DMODEL_VERTEX( vertex_KEIA_BASE_TIREFR___carbodyblack_2 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BASE_TIREFR___carbodyblack_2 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 1200 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carbodyblack )
DX3DMODEL_END
DX3DMODELTBL_END




DX3DOBJECT_START_HASH( object_KEIA_BASE_TIREFR__, 314585185 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_KEIA_BASE_TIREFR__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	-5.94006, 2.86276, -12.471, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	-5.94006, 2.86276, -12.471, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_KEIA_BASE_SHADOW__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_KEIA_BASE_TIREFL__
/////////////////////////////////////////////
#if 0
	-1, 0, -1.22465e-016, 0, 
	0, 1, 0, 0, 
	-1.22465e-016, -0, 1, 0, 
	5.94, 2.86276, 12.471, 1
#endif



#if ((PT_KEIA_BASE_TIREFL___cartire_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIREFL___cartire_0 == PT_TRILIST ) || ((PT_KEIA_BASE_TIREFL___cartire_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BASE_TIREFL___cartire_0 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BASE_TIREFL___cartire_0 )
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.00903158, 0.951018, 0.309003 )  //0
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( -0.00903167, 0.808984, 0.587761 )  //1
DX3DVERT( -0.651165, 2.15934, 1.56885 ) DX3DVNORM( -0.313176, 0.768319, 0.558217 )  //2
DX3DVERT( -0.651165, 2.53846, 0.824794 ) DX3DVNORM( -0.313177, 0.903214, 0.293471 )  //3
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.00903152, 0.587761, 0.808984 )  //4
DX3DVERT( -0.651165, 1.56885, 2.15934 ) DX3DVNORM( -0.313176, 0.558217, 0.768319 )  //5
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.00903127, 0.309004, 0.951018 )  //6
DX3DVERT( -0.651165, 0.824795, 2.53846 ) DX3DVNORM( -0.313177, 0.293472, 0.903214 )  //7
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( -0.00903127, -3.01738e-008, 0.999959 )  //8
DX3DVERT( -0.651165, -4.85044e-008, 2.66909 ) DX3DVNORM( -0.313177, -2.3704e-008, 0.949695 )  //9
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.00903123, -0.309005, 0.951018 )  //10
DX3DVERT( -0.651165, -0.824795, 2.53846 ) DX3DVNORM( -0.313177, -0.293472, 0.903213 )  //11
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( -0.00903142, -0.587762, 0.808984 )  //12
DX3DVERT( -0.651165, -1.56885, 2.15934 ) DX3DVNORM( -0.313176, -0.558217, 0.768319 )  //13
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.0090315, -0.808984, 0.587761 )  //14
DX3DVERT( -0.651165, -2.15934, 1.56885 ) DX3DVNORM( -0.313176, -0.768319, 0.558217 )  //15
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.00903129, -0.951018, 0.309004 )  //16
DX3DVERT( -0.651165, -2.53846, 0.824794 ) DX3DVNORM( -0.313177, -0.903213, 0.293472 )  //17
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( -0.00903119, -0.999959, 1.50869e-008 )  //18
DX3DVERT( -0.651165, -2.66909, 9.70089e-008 ) DX3DVNORM( -0.313177, -0.949695, 1.97533e-008 )  //19
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( -0.00903121, -0.951018, -0.309004 )  //20
DX3DVERT( -0.651165, -2.53846, -0.824794 ) DX3DVNORM( -0.313177, -0.903213, -0.293472 )  //21
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( -0.00903143, -0.808984, -0.587762 )  //22
DX3DVERT( -0.651165, -2.15934, -1.56885 ) DX3DVNORM( -0.313176, -0.768319, -0.558217 )  //23
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.0090314, -0.587762, -0.808984 )  //24
DX3DVERT( -0.651165, -1.56885, -2.15934 ) DX3DVNORM( -0.313176, -0.558217, -0.768319 )  //25
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( -0.00903128, -0.309004, -0.951018 )  //26
DX3DVERT( -0.651165, -0.824794, -2.53846 ) DX3DVNORM( -0.313176, -0.293472, -0.903214 )  //27
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -0.00903141, 7.54344e-009, -0.999959 )  //28
DX3DVERT( -0.651165, -4.85044e-008, -2.66909 ) DX3DVNORM( -0.313177, 1.06668e-007, -0.949695 )  //29
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.00903122, 0.309005, -0.951018 )  //30
DX3DVERT( -0.651165, 0.824794, -2.53846 ) DX3DVNORM( -0.313177, 0.293472, -0.903214 )  //31
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.0090314, 0.587762, -0.808984 )  //32
DX3DVERT( -0.651165, 1.56885, -2.15934 ) DX3DVNORM( -0.313176, 0.558217, -0.768319 )  //33
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.00903159, 0.808984, -0.587762 )  //34
DX3DVERT( -0.651165, 2.15934, -1.56885 ) DX3DVNORM( -0.313176, 0.768319, -0.558217 )  //35
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.0090314, 0.951018, -0.309004 )  //36
DX3DVERT( -0.651165, 2.53846, -0.824794 ) DX3DVNORM( -0.313176, 0.903214, -0.293472 )  //37
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -0.00903151, 0.999959, -5.50671e-007 )  //38
DX3DVERT( -0.651165, 2.66909, 9.70089e-008 ) DX3DVNORM( -0.00903151, 0.999959, -5.50671e-007 )  //39
DX3DVERT( -0.895311, 2.01633, 1.46495 ) DX3DVNORM( -0.586468, 0.655281, 0.47609 )  //40
DX3DVERT( -0.895311, 2.37033, 0.770167 ) DX3DVNORM( -0.586469, 0.770329, 0.250294 )  //41
DX3DVERT( -0.895311, 1.46495, 2.01633 ) DX3DVNORM( -0.586469, 0.47609, 0.655281 )  //42
DX3DVERT( -0.895311, 0.770168, 2.37033 ) DX3DVNORM( -0.586469, 0.250295, 0.770329 )  //43
DX3DVERT( -0.895311, -4.85044e-008, 2.49232 ) DX3DVNORM( -0.586469, -1.50233e-008, 0.809972 )  //44
DX3DVERT( -0.895311, -0.770167, 2.37033 ) DX3DVNORM( -0.586469, -0.250295, 0.770329 )  //45
DX3DVERT( -0.895311, -1.46495, 2.01633 ) DX3DVNORM( -0.586469, -0.47609, 0.655281 )  //46
DX3DVERT( -0.895311, -2.01633, 1.46495 ) DX3DVNORM( -0.586469, -0.655281, 0.47609 )  //47
DX3DVERT( -0.895311, -2.37033, 0.770167 ) DX3DVNORM( -0.58647, -0.770328, 0.250295 )  //48
DX3DVERT( -0.895311, -2.49231, 9.70089e-008 ) DX3DVNORM( -0.58647, -0.809971, 2.25349e-008 )  //49
DX3DVERT( -0.895311, -2.37033, -0.770167 ) DX3DVNORM( -0.586469, -0.770329, -0.250295 )  //50
DX3DVERT( -0.895311, -2.01632, -1.46495 ) DX3DVNORM( -0.586468, -0.655281, -0.47609 )  //51
DX3DVERT( -0.895311, -1.46495, -2.01632 ) DX3DVNORM( -0.586467, -0.47609, -0.655282 )  //52
DX3DVERT( -0.895311, -0.770167, -2.37033 ) DX3DVNORM( -0.586468, -0.250295, -0.770329 )  //53
DX3DVERT( -0.895311, -4.85044e-008, -2.49231 ) DX3DVNORM( -0.586469, 1.95303e-007, -0.809972 )  //54
DX3DVERT( -0.895311, 0.770168, -2.37033 ) DX3DVNORM( -0.586469, 0.250295, -0.770329 )  //55
DX3DVERT( -0.895311, 1.46495, -2.01632 ) DX3DVNORM( -0.586468, 0.47609, -0.655281 )  //56
DX3DVERT( -0.895311, 2.01632, -1.46495 ) DX3DVNORM( -0.586467, 0.655282, -0.47609 )  //57
DX3DVERT( -0.895311, 2.37033, -0.770167 ) DX3DVNORM( -0.586469, 0.770329, -0.250295 )  //58
DX3DVERT( -0.651165, 2.66909, 9.70089e-008 ) DX3DVNORM( -0.586469, 0.809972, -2.17838e-007 )  //59
DX3DVERT( -0.895311, 2.49231, 9.70089e-008 ) DX3DVNORM( -0.586469, 0.809972, -2.17838e-007 )  //60
DX3DVERT( -0.895311, 2.37033, 0.770167 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //61
DX3DVERT( -0.895311, 2.01633, 1.46495 ) DX3DVNORM( -1, 1.27031e-008, -0 )  //62
DX3DVERT( -0.895311, 1.68027, 1.22079 ) DX3DVNORM( -0.958004, -0.231989, -0.16855 )  //63
DX3DVERT( -0.895311, 1.97528, 0.641807 ) DX3DVNORM( -0.958004, -0.272719, -0.0886117 )  //64
DX3DVERT( -0.895311, 1.46495, 2.01633 ) DX3DVNORM( -1, 2.54063e-008, -0 )  //65
DX3DVERT( -0.895311, 1.22079, 1.68027 ) DX3DVNORM( -0.958004, -0.16855, -0.231989 )  //66
DX3DVERT( -0.895311, 0.770168, 2.37033 ) DX3DVNORM( -1, 5.08125e-008, -0 )  //67
DX3DVERT( -0.895311, 0.641807, 1.97528 ) DX3DVNORM( -0.958004, -0.0886118, -0.27272 )  //68
DX3DVERT( -0.895311, -4.85044e-008, 2.49232 ) DX3DVNORM( -1, -4.9738e-014, -0 )  //69
DX3DVERT( -0.895311, -4.85044e-008, 2.07693 ) DX3DVNORM( -0.958004, 2.72763e-008, -0.286754 )  //70
DX3DVERT( -0.895311, -0.770167, 2.37033 ) DX3DVNORM( -1, 4.61853e-014, -0 )  //71
DX3DVERT( -0.895311, -0.641806, 1.97528 ) DX3DVNORM( -0.958004, 0.0886119, -0.272719 )  //72
DX3DVERT( -0.895311, -1.46495, 2.01633 ) DX3DVNORM( -1, 5.08126e-008, -0 )  //73
DX3DVERT( -0.895311, -1.22079, 1.68027 ) DX3DVNORM( -0.958004, 0.16855, -0.231989 )  //74
DX3DVERT( -0.895311, -2.01633, 1.46495 ) DX3DVNORM( -1, 2.54063e-008, -0 )  //75
DX3DVERT( -0.895311, -1.68027, 1.22079 ) DX3DVNORM( -0.958004, 0.231989, -0.16855 )  //76
DX3DVERT( -0.895311, -2.37033, 0.770167 ) DX3DVNORM( -1, 1.27032e-008, -0 )  //77
DX3DVERT( -0.895311, -1.97528, 0.641807 ) DX3DVNORM( -0.958004, 0.272719, -0.0886119 )  //78
DX3DVERT( -0.895311, -2.49231, 9.70089e-008 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //79
DX3DVERT( -0.895311, -2.07693, 9.70089e-008 ) DX3DVNORM( -0.958004, 0.286754, -0 )  //80
DX3DVERT( -0.895311, -2.37033, -0.770167 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //81
DX3DVERT( -0.895311, -1.97528, -0.641807 ) DX3DVNORM( -0.958004, 0.272719, 0.0886119 )  //82
DX3DVERT( -0.895311, -2.01632, -1.46495 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //83
DX3DVERT( -0.895311, -1.68027, -1.22079 ) DX3DVNORM( -0.958004, 0.231989, 0.16855 )  //84
DX3DVERT( -0.895311, -1.46495, -2.01632 ) DX3DVNORM( -1, -5.08125e-008, -0 )  //85
DX3DVERT( -0.895311, -1.22079, -1.68027 ) DX3DVNORM( -0.958004, 0.16855, 0.231989 )  //86
DX3DVERT( -0.895311, -0.770167, -2.37033 ) DX3DVNORM( -1, 1.27898e-013, -0 )  //87
DX3DVERT( -0.895311, -0.641806, -1.97528 ) DX3DVNORM( -0.958004, 0.088612, 0.272719 )  //88
DX3DVERT( -0.895311, -4.85044e-008, -2.49231 ) DX3DVNORM( -1, 5.08126e-008, -0 )  //89
DX3DVERT( -0.895311, -4.85044e-008, -2.07693 ) DX3DVNORM( -0.958004, 2.14314e-008, 0.286754 )  //90
DX3DVERT( -0.895311, 0.770168, -2.37033 ) DX3DVNORM( -1, 1.01625e-007, -0 )  //91
DX3DVERT( -0.895311, 0.641806, -1.97528 ) DX3DVNORM( -0.958004, -0.088612, 0.272719 )  //92
DX3DVERT( -0.895311, 1.46495, -2.01632 ) DX3DVNORM( -1, 1.01625e-007, -0 )  //93
DX3DVERT( -0.895311, 1.22079, -1.68027 ) DX3DVNORM( -0.958004, -0.16855, 0.231989 )  //94
DX3DVERT( -0.895311, 2.01632, -1.46495 ) DX3DVNORM( -1, 0, -0 )  //95
DX3DVERT( -0.895311, 1.68027, -1.22079 ) DX3DVNORM( -0.958004, -0.231989, 0.16855 )  //96
DX3DVERT( -0.895311, 2.37033, -0.770167 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //97
DX3DVERT( -0.895311, 1.97528, -0.641807 ) DX3DVNORM( -0.958004, -0.272719, 0.0886119 )  //98
DX3DVERT( -0.895311, 2.49231, 9.70089e-008 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //99
DX3DVERT( -0.895311, 2.07693, 9.70089e-008 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //100
DX3DVERT( -0.732719, 1.48072, 1.07581 ) DX3DVNORM( -0.682549, -0.591262, -0.429577 )  //101
DX3DVERT( -0.732719, 1.74069, 0.565586 ) DX3DVNORM( -0.682548, -0.695071, -0.225841 )  //102
DX3DVERT( -0.732719, 1.07581, 1.48072 ) DX3DVNORM( -0.682549, -0.429576, -0.591262 )  //103
DX3DVERT( -0.732719, 0.565586, 1.74069 ) DX3DVNORM( -0.682547, -0.225842, -0.695072 )  //104
DX3DVERT( -0.732719, -4.85044e-008, 1.83027 ) DX3DVNORM( -0.682547, 3.85821e-008, -0.730842 )  //105
DX3DVERT( -0.732719, -0.565586, 1.74069 ) DX3DVNORM( -0.682547, 0.225842, -0.695071 )  //106
DX3DVERT( -0.732719, -1.07581, 1.48072 ) DX3DVNORM( -0.682549, 0.429577, -0.591262 )  //107
DX3DVERT( -0.732719, -1.48072, 1.07581 ) DX3DVNORM( -0.682549, 0.591262, -0.429577 )  //108
DX3DVERT( -0.732719, -1.74069, 0.565586 ) DX3DVNORM( -0.682548, 0.695071, -0.225842 )  //109
DX3DVERT( -0.732719, -1.83027, 9.70089e-008 ) DX3DVNORM( -0.682548, 0.730841, -3.85821e-009 )  //110
DX3DVERT( -0.732719, -1.74069, -0.565586 ) DX3DVNORM( -0.682547, 0.695071, 0.225842 )  //111
DX3DVERT( -0.732719, -1.48072, -1.07581 ) DX3DVNORM( -0.682549, 0.591262, 0.429577 )  //112
DX3DVERT( -0.732719, -1.07581, -1.48072 ) DX3DVNORM( -0.68255, 0.429576, 0.591261 )  //113
DX3DVERT( -0.732719, -0.565586, -1.74069 ) DX3DVNORM( -0.682549, 0.225842, 0.695071 )  //114
DX3DVERT( -0.732719, -4.85044e-008, -1.83027 ) DX3DVNORM( -0.682548, 3.47239e-008, 0.730841 )  //115
DX3DVERT( -0.732719, 0.565586, -1.74069 ) DX3DVNORM( -0.682549, -0.225842, 0.69507 )  //116
DX3DVERT( -0.732719, 1.07581, -1.48072 ) DX3DVNORM( -0.68255, -0.429576, 0.591261 )  //117
DX3DVERT( -0.732719, 1.48072, -1.07581 ) DX3DVNORM( -0.682549, -0.591262, 0.429577 )  //118
DX3DVERT( -0.732719, 1.74069, -0.565586 ) DX3DVNORM( -0.682547, -0.695072, 0.225842 )  //119
DX3DVERT( -0.895311, 2.07693, 9.70089e-008 ) DX3DVNORM( -0.83492, -0.550371, 6.17004e-007 )  //120
DX3DVERT( -0.732719, 1.83027, 9.70089e-008 ) DX3DVNORM( -0.83492, -0.550371, 6.17004e-007 )  //121
DX3DVERT( -0.651165, 2.53846, -0.824794 ) DX3DVNORM( 0, 0, -0 )  //122
DX3DVERT( -0.651165, 2.66909, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //123
DX3DVERT( -0.651165, 2.53846, 0.824794 ) DX3DVNORM( 0, 0, -0 )  //124
DX3DVERT( -0.895311, 2.37033, -0.770167 ) DX3DVNORM( 0, 0, -0 )  //125
DX3DVERT( -0.895311, 2.49231, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //126
DX3DVERT( -0.895311, 2.37033, 0.770167 ) DX3DVNORM( 0, 0, -0 )  //127
DX3DVERT( -0.895311, 1.97528, -0.641807 ) DX3DVNORM( 0, 0, -0 )  //128
DX3DVERT( -0.895311, 2.07693, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //129
DX3DVERT( -0.895311, 1.97528, 0.641807 ) DX3DVNORM( 0, 0, -0 )  //130
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BASE_TIREFL___cartire_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BASE_TIREFL___cartire_0 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 131 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BASE_TIREFL___cartire_0	NULL
#define vertexbuff_KEIA_BASE_TIREFL___cartire_0	NULL
#endif




#if ((PT_KEIA_BASE_TIREFL___cartire_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIREFL___cartire_0 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BASE_TIREFL___cartire_0 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
	1, 4, 2, // 2 8
	4, 5, 2, // 3 11
	4, 6, 5, // 4 14
	6, 7, 5, // 5 17
	6, 8, 7, // 6 20
	8, 9, 7, // 7 23
	8, 10, 9, // 8 26
	10, 11, 9, // 9 29
	10, 12, 11, // 10 32
	12, 13, 11, // 11 35
	12, 14, 13, // 12 38
	14, 15, 13, // 13 41
	14, 16, 15, // 14 44
	16, 17, 15, // 15 47
	16, 18, 17, // 16 50
	18, 19, 17, // 17 53
	18, 20, 19, // 18 56
	20, 21, 19, // 19 59
	20, 22, 21, // 20 62
	22, 23, 21, // 21 65
	22, 24, 23, // 22 68
	24, 25, 23, // 23 71
	24, 26, 25, // 24 74
	26, 27, 25, // 25 77
	26, 28, 27, // 26 80
	28, 29, 27, // 27 83
	28, 30, 29, // 28 86
	30, 31, 29, // 29 89
	30, 32, 31, // 30 92
	32, 33, 31, // 31 95
	32, 34, 33, // 32 98
	34, 35, 33, // 33 101
	34, 36, 35, // 34 104
	36, 37, 35, // 35 107
	36, 38, 37, // 36 110
	38, 39, 37, // 37 113
	38, 0, 39, // 38 116
	0, 3, 39, // 39 119
	3, 2, 41, // 40 122
	2, 40, 41, // 41 125
	2, 5, 40, // 42 128
	5, 42, 40, // 43 131
	5, 7, 42, // 44 134
	7, 43, 42, // 45 137
	7, 9, 43, // 46 140
	9, 44, 43, // 47 143
	9, 11, 44, // 48 146
	11, 45, 44, // 49 149
	11, 13, 45, // 50 152
	13, 46, 45, // 51 155
	13, 15, 46, // 52 158
	15, 47, 46, // 53 161
	15, 17, 47, // 54 164
	17, 48, 47, // 55 167
	17, 19, 48, // 56 170
	19, 49, 48, // 57 173
	19, 21, 49, // 58 176
	21, 50, 49, // 59 179
	21, 23, 50, // 60 182
	23, 51, 50, // 61 185
	23, 25, 51, // 62 188
	25, 52, 51, // 63 191
	25, 27, 52, // 64 194
	27, 53, 52, // 65 197
	27, 29, 53, // 66 200
	29, 54, 53, // 67 203
	29, 31, 54, // 68 206
	31, 55, 54, // 69 209
	31, 33, 55, // 70 212
	33, 56, 55, // 71 215
	33, 35, 56, // 72 218
	35, 57, 56, // 73 221
	35, 37, 57, // 74 224
	37, 58, 57, // 75 227
	37, 59, 58, // 76 230
	59, 60, 58, // 77 233
	59, 3, 60, // 78 236
	3, 41, 60, // 79 239
	61, 62, 64, // 80 242
	62, 63, 64, // 81 245
	62, 65, 63, // 82 248
	65, 66, 63, // 83 251
	65, 67, 66, // 84 254
	67, 68, 66, // 85 257
	67, 69, 68, // 86 260
	69, 70, 68, // 87 263
	69, 71, 70, // 88 266
	71, 72, 70, // 89 269
	71, 73, 72, // 90 272
	73, 74, 72, // 91 275
	73, 75, 74, // 92 278
	75, 76, 74, // 93 281
	75, 77, 76, // 94 284
	77, 78, 76, // 95 287
	77, 79, 78, // 96 290
	79, 80, 78, // 97 293
	79, 81, 80, // 98 296
	81, 82, 80, // 99 299
	81, 83, 82, // 100 302
	83, 84, 82, // 101 305
	83, 85, 84, // 102 308
	85, 86, 84, // 103 311
	85, 87, 86, // 104 314
	87, 88, 86, // 105 317
	87, 89, 88, // 106 320
	89, 90, 88, // 107 323
	89, 91, 90, // 108 326
	91, 92, 90, // 109 329
	91, 93, 92, // 110 332
	93, 94, 92, // 111 335
	93, 95, 94, // 112 338
	95, 96, 94, // 113 341
	95, 97, 96, // 114 344
	97, 98, 96, // 115 347
	97, 99, 98, // 116 350
	99, 100, 98, // 117 353
	99, 61, 100, // 118 356
	61, 64, 100, // 119 359
	64, 63, 102, // 120 362
	63, 101, 102, // 121 365
	63, 66, 101, // 122 368
	66, 103, 101, // 123 371
	66, 68, 103, // 124 374
	68, 104, 103, // 125 377
	68, 70, 104, // 126 380
	70, 105, 104, // 127 383
	70, 72, 105, // 128 386
	72, 106, 105, // 129 389
	72, 74, 106, // 130 392
	74, 107, 106, // 131 395
	74, 76, 107, // 132 398
	76, 108, 107, // 133 401
	76, 78, 108, // 134 404
	78, 109, 108, // 135 407
	78, 80, 109, // 136 410
	80, 110, 109, // 137 413
	80, 82, 110, // 138 416
	82, 111, 110, // 139 419
	82, 84, 111, // 140 422
	84, 112, 111, // 141 425
	84, 86, 112, // 142 428
	86, 113, 112, // 143 431
	86, 88, 113, // 144 434
	88, 114, 113, // 145 437
	88, 90, 114, // 146 440
	90, 115, 114, // 147 443
	90, 92, 115, // 148 446
	92, 116, 115, // 149 449
	92, 94, 116, // 150 452
	94, 117, 116, // 151 455
	94, 96, 117, // 152 458
	96, 118, 117, // 153 461
	96, 98, 118, // 154 464
	98, 119, 118, // 155 467
	98, 120, 119, // 156 470
	120, 121, 119, // 157 473
	120, 64, 121, // 158 476
	64, 102, 121, // 159 479
	122, 123, 122, // 160 482
	123, 123, 122, // 161 485
	123, 124, 123, // 162 488
	124, 124, 123, // 163 491
	125, 126, 125, // 164 494
	126, 126, 125, // 165 497
	126, 127, 126, // 166 500
	127, 127, 126, // 167 503
	128, 129, 128, // 168 506
	129, 129, 128, // 169 509
	129, 130, 129, // 170 512
	130, 130, 129, // 171 515
DX3DINDEX_END
#endif

#else
#define index_KEIA_BASE_TIREFL___cartire_0	NULL
#endif




#if ((PT_KEIA_BASE_TIREFL___cartire_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BASE_TIREFL___cartire_0 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BASE_TIREFL___cartire_0_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BASE_TIREFL___cartire_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BASE_TIREFL___cartire_0 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BASE_TIREFL___cartire_0_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BASE_TIREFL___cartire_0_VERTEXSTRIP 	NULL
#endif






#if ((PT_KEIA_BASE_TIREFL___carwheelB_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIREFL___carwheelB_1 == PT_TRILIST ) || ((PT_KEIA_BASE_TIREFL___carwheelB_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BASE_TIREFL___carwheelB_1 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BASE_TIREFL___carwheelB_1 )
DX3DVERT( -0.732719, 1.74069, 0.565586 ) DX3DVNORM( -0.682548, -0.695071, -0.225841 )  //0
DX3DVERT( -0.732719, 1.48072, 1.07581 ) DX3DVNORM( -0.682549, -0.591262, -0.429577 )  //1
DX3DVERT( -0.676385, 1.45504, 1.05715 ) DX3DVNORM( -0.864785, -0.406242, -0.295152 )  //2
DX3DVERT( -0.676385, 1.71051, 0.555777 ) DX3DVNORM( -0.864784, -0.477567, -0.15517 )  //3
DX3DVERT( -0.732719, 1.07581, 1.48072 ) DX3DVNORM( -0.682549, -0.429576, -0.591262 )  //4
DX3DVERT( -0.676385, 1.05715, 1.45504 ) DX3DVNORM( -0.864785, -0.295151, -0.406242 )  //5
DX3DVERT( -0.732719, 0.565586, 1.74069 ) DX3DVNORM( -0.682547, -0.225842, -0.695072 )  //6
DX3DVERT( -0.676385, 0.555776, 1.71051 ) DX3DVNORM( -0.864784, -0.155171, -0.477568 )  //7
DX3DVERT( -0.732719, -4.85044e-008, 1.83027 ) DX3DVNORM( -0.682547, 3.85821e-008, -0.730842 )  //8
DX3DVERT( -0.676385, -4.85044e-008, 1.79853 ) DX3DVNORM( -0.864783, 1.30051e-008, -0.502145 )  //9
DX3DVERT( -0.732719, -0.565586, 1.74069 ) DX3DVNORM( -0.682547, 0.225842, -0.695071 )  //10
DX3DVERT( -0.676385, -0.555777, 1.71051 ) DX3DVNORM( -0.864784, 0.155171, -0.477568 )  //11
DX3DVERT( -0.732719, -1.07581, 1.48072 ) DX3DVNORM( -0.682549, 0.429577, -0.591262 )  //12
DX3DVERT( -0.676385, -1.05715, 1.45504 ) DX3DVNORM( -0.864785, 0.295152, -0.406242 )  //13
DX3DVERT( -0.732719, -1.48072, 1.07581 ) DX3DVNORM( -0.682549, 0.591262, -0.429577 )  //14
DX3DVERT( -0.676385, -1.45504, 1.05715 ) DX3DVNORM( -0.864784, 0.406242, -0.295152 )  //15
DX3DVERT( -0.732719, -1.74069, 0.565586 ) DX3DVNORM( -0.682548, 0.695071, -0.225842 )  //16
DX3DVERT( -0.676385, -1.71051, 0.555777 ) DX3DVNORM( -0.864784, 0.477568, -0.155171 )  //17
DX3DVERT( -0.732719, -1.83027, 9.70089e-008 ) DX3DVNORM( -0.682548, 0.730841, -3.85821e-009 )  //18
DX3DVERT( -0.676385, -1.79853, 9.70089e-008 ) DX3DVNORM( -0.864784, 0.502144, -4.33502e-009 )  //19
DX3DVERT( -0.732719, -1.74069, -0.565586 ) DX3DVNORM( -0.682547, 0.695071, 0.225842 )  //20
DX3DVERT( -0.676385, -1.71051, -0.555777 ) DX3DVNORM( -0.864784, 0.477568, 0.155171 )  //21
DX3DVERT( -0.732719, -1.48072, -1.07581 ) DX3DVNORM( -0.682549, 0.591262, 0.429577 )  //22
DX3DVERT( -0.676385, -1.45504, -1.05715 ) DX3DVNORM( -0.864785, 0.406242, 0.295152 )  //23
DX3DVERT( -0.732719, -1.07581, -1.48072 ) DX3DVNORM( -0.68255, 0.429576, 0.591261 )  //24
DX3DVERT( -0.676385, -1.05715, -1.45504 ) DX3DVNORM( -0.864786, 0.295151, 0.406241 )  //25
DX3DVERT( -0.732719, -0.565586, -1.74069 ) DX3DVNORM( -0.682549, 0.225842, 0.695071 )  //26
DX3DVERT( -0.676385, -0.555776, -1.71051 ) DX3DVNORM( -0.864785, 0.155171, 0.477567 )  //27
DX3DVERT( -0.732719, -4.85044e-008, -1.83027 ) DX3DVNORM( -0.682548, 3.47239e-008, 0.730841 )  //28
DX3DVERT( -0.676385, -4.85044e-008, -1.79853 ) DX3DVNORM( -0.864784, 4.33502e-008, 0.502144 )  //29
DX3DVERT( -0.732719, 0.565586, -1.74069 ) DX3DVNORM( -0.682549, -0.225842, 0.69507 )  //30
DX3DVERT( -0.676385, 0.555776, -1.71051 ) DX3DVNORM( -0.864785, -0.15517, 0.477566 )  //31
DX3DVERT( -0.732719, 1.07581, -1.48072 ) DX3DVNORM( -0.68255, -0.429576, 0.591261 )  //32
DX3DVERT( -0.676385, 1.05715, -1.45504 ) DX3DVNORM( -0.864785, -0.295151, 0.406241 )  //33
DX3DVERT( -0.732719, 1.48072, -1.07581 ) DX3DVNORM( -0.682549, -0.591262, 0.429577 )  //34
DX3DVERT( -0.676385, 1.45504, -1.05715 ) DX3DVNORM( -0.864785, -0.406242, 0.295152 )  //35
DX3DVERT( -0.732719, 1.74069, -0.565586 ) DX3DVNORM( -0.682547, -0.695072, 0.225842 )  //36
DX3DVERT( -0.676385, 1.71051, -0.555777 ) DX3DVNORM( -0.864784, -0.477568, 0.155171 )  //37
DX3DVERT( -0.732719, 1.83027, 9.70089e-008 ) DX3DVNORM( -0.490909, -0.871211, 6.54342e-007 )  //38
DX3DVERT( -0.676385, 1.79853, 9.70089e-008 ) DX3DVNORM( -0.490909, -0.871211, 6.54342e-007 )  //39
DX3DVERT( -0.676385, 0.370518, 1.14034 ) DX3DVNORM( -0.994282, -0.0330002, -0.101564 )  //40
DX3DVERT( -0.676385, 0.704767, 0.970029 ) DX3DVNORM( -0.994282, -0.0627699, -0.0863957 )  //41
DX3DVERT( -0.676385, -4.85044e-008, 1.19902 ) DX3DVNORM( -0.994282, 6.55863e-009, -0.106791 )  //42
DX3DVERT( -0.676385, -0.970028, 0.704767 ) DX3DVNORM( -0.994282, 0.0863957, -0.06277 )  //43
DX3DVERT( -0.676385, -0.704767, 0.970029 ) DX3DVNORM( -0.994282, 0.0627699, -0.0863957 )  //44
DX3DVERT( -0.676385, -1.14034, 0.370518 ) DX3DVNORM( -0.994282, 0.101564, -0.0330001 )  //45
DX3DVERT( -0.676385, -0.970028, -0.704767 ) DX3DVNORM( -0.994282, 0.0863957, 0.06277 )  //46
DX3DVERT( -0.676385, -1.14034, -0.370518 ) DX3DVNORM( -0.994282, 0.101564, 0.0330002 )  //47
DX3DVERT( -0.676385, -0.704767, -0.970028 ) DX3DVNORM( -0.994282, 0.06277, 0.0863956 )  //48
DX3DVERT( -0.676385, 0.370518, -1.14034 ) DX3DVNORM( -0.994282, -0.0330001, 0.101564 )  //49
DX3DVERT( -0.676385, -4.85044e-008, -1.19902 ) DX3DVNORM( -0.994282, 6.55863e-009, 0.106791 )  //50
DX3DVERT( -0.676385, 0.704767, -0.970028 ) DX3DVNORM( -0.994282, -0.06277, 0.0863956 )  //51
DX3DVERT( -0.676385, 1.79853, 9.70089e-008 ) DX3DVNORM( -1, -2.68333e-008, -0 )  //52
DX3DVERT( -0.676385, 1.19902, 9.70089e-008 ) DX3DVNORM( -1, -2.68333e-008, -0 )  //53
DX3DVERT( -0.676385, 1.14034, -0.370518 ) DX3DVNORM( -0.994282, -0.101564, 0.0330001 )  //54
DX3DVERT( -0.676385, 1.14034, 0.370518 ) DX3DVNORM( -0.994282, -0.101564, -0.0330001 )  //55
DX3DVERT( -0.676385, 0.970028, 0.704767 ) DX3DVNORM( -0.994282, -0.0863956, -0.06277 )  //56
DX3DVERT( -0.415742, -4.85044e-008, 9.70089e-008 ) DX3DVNORM( -1, 2.36496e-008, -1.46856e-008 )  //57
DX3DVERT( -0.676385, -0.370518, 1.14034 ) DX3DVNORM( -0.994282, 0.0330002, -0.101564 )  //58
DX3DVERT( -0.676385, -1.19902, 9.70089e-008 ) DX3DVNORM( -0.994282, 0.106791, -1.87389e-009 )  //59
DX3DVERT( -0.676385, -0.370518, -1.14034 ) DX3DVNORM( -0.994282, 0.0330001, 0.101564 )  //60
DX3DVERT( -0.676385, 0.970028, -0.704767 ) DX3DVNORM( -0.994282, -0.0863956, 0.0627701 )  //61
DX3DVERT( -0.676385, 1.19902, 9.70089e-008 ) DX3DVNORM( -0.977178, -0.21242, 6.15021e-008 )  //62
DX3DVERT( -0.732719, 1.74069, -0.565586 ) DX3DVNORM( 0, 0, -0 )  //63
DX3DVERT( -0.732719, 1.83027, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //64
DX3DVERT( -0.732719, 1.74069, 0.565586 ) DX3DVNORM( 0, 0, -0 )  //65
DX3DVERT( -0.676385, 1.71051, -0.555777 ) DX3DVNORM( 0, 0, -0 )  //66
DX3DVERT( -0.676385, 1.79853, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //67
DX3DVERT( -0.676385, 1.71051, 0.555777 ) DX3DVNORM( 0, 0, -0 )  //68
DX3DVERT( -0.676385, 1.14034, -0.370518 ) DX3DVNORM( 0, 0, -0 )  //69
DX3DVERT( -0.676385, 1.19902, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //70
DX3DVERT( -0.676385, 1.14034, 0.370518 ) DX3DVNORM( 0, 0, -0 )  //71
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BASE_TIREFL___carwheelB_1 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BASE_TIREFL___carwheelB_1 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 72 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BASE_TIREFL___carwheelB_1	NULL
#define vertexbuff_KEIA_BASE_TIREFL___carwheelB_1	NULL
#endif




#if ((PT_KEIA_BASE_TIREFL___carwheelB_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIREFL___carwheelB_1 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BASE_TIREFL___carwheelB_1 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
	1, 4, 2, // 2 8
	4, 5, 2, // 3 11
	4, 6, 5, // 4 14
	6, 7, 5, // 5 17
	6, 8, 7, // 6 20
	8, 9, 7, // 7 23
	8, 10, 9, // 8 26
	10, 11, 9, // 9 29
	10, 12, 11, // 10 32
	12, 13, 11, // 11 35
	12, 14, 13, // 12 38
	14, 15, 13, // 13 41
	14, 16, 15, // 14 44
	16, 17, 15, // 15 47
	16, 18, 17, // 16 50
	18, 19, 17, // 17 53
	18, 20, 19, // 18 56
	20, 21, 19, // 19 59
	20, 22, 21, // 20 62
	22, 23, 21, // 21 65
	22, 24, 23, // 22 68
	24, 25, 23, // 23 71
	24, 26, 25, // 24 74
	26, 27, 25, // 25 77
	26, 28, 27, // 26 80
	28, 29, 27, // 27 83
	28, 30, 29, // 28 86
	30, 31, 29, // 29 89
	30, 32, 31, // 30 92
	32, 33, 31, // 31 95
	32, 34, 33, // 32 98
	34, 35, 33, // 33 101
	34, 36, 35, // 34 104
	36, 37, 35, // 35 107
	36, 38, 37, // 36 110
	38, 39, 37, // 37 113
	38, 0, 39, // 38 116
	0, 3, 39, // 39 119
	5, 7, 41, // 40 122
	7, 40, 41, // 41 125
	7, 9, 40, // 42 128
	9, 42, 40, // 43 131
	13, 15, 44, // 44 134
	15, 43, 44, // 45 137
	15, 17, 43, // 46 140
	17, 45, 43, // 47 143
	21, 23, 47, // 48 146
	23, 46, 47, // 49 149
	23, 25, 46, // 50 152
	25, 48, 46, // 51 155
	29, 31, 50, // 52 158
	31, 49, 50, // 53 161
	31, 33, 49, // 54 164
	33, 51, 49, // 55 167
	37, 52, 54, // 56 170
	52, 53, 54, // 57 173
	52, 3, 53, // 58 176
	3, 55, 53, // 59 179
	55, 56, 57, // 60 182
	56, 41, 57, // 61 185
	41, 40, 57, // 62 188
	40, 42, 57, // 63 191
	42, 58, 57, // 64 194
	58, 44, 57, // 65 197
	44, 43, 57, // 66 200
	43, 45, 57, // 67 203
	45, 59, 57, // 68 206
	59, 47, 57, // 69 209
	47, 46, 57, // 70 212
	46, 48, 57, // 71 215
	48, 60, 57, // 72 218
	60, 50, 57, // 73 221
	50, 49, 57, // 74 224
	49, 51, 57, // 75 227
	51, 61, 57, // 76 230
	61, 54, 57, // 77 233
	54, 62, 57, // 78 236
	62, 55, 57, // 79 239
	63, 64, 63, // 80 242
	64, 64, 63, // 81 245
	64, 65, 64, // 82 248
	65, 65, 64, // 83 251
	66, 67, 66, // 84 254
	67, 67, 66, // 85 257
	67, 68, 67, // 86 260
	68, 68, 67, // 87 263
	69, 70, 69, // 88 266
	70, 70, 69, // 89 269
	70, 71, 70, // 90 272
	71, 71, 70, // 91 275
DX3DINDEX_END
#endif

#else
#define index_KEIA_BASE_TIREFL___carwheelB_1	NULL
#endif




#if ((PT_KEIA_BASE_TIREFL___carwheelB_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BASE_TIREFL___carwheelB_1 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BASE_TIREFL___carwheelB_1_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BASE_TIREFL___carwheelB_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BASE_TIREFL___carwheelB_1 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BASE_TIREFL___carwheelB_1_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BASE_TIREFL___carwheelB_1_VERTEXSTRIP 	NULL
#endif






#if ((PT_KEIA_BASE_TIREFL___carbodyblack_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIREFL___carbodyblack_2 == PT_TRILIST ) || ((PT_KEIA_BASE_TIREFL___carbodyblack_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BASE_TIREFL___carbodyblack_2 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BASE_TIREFL___carbodyblack_2 )
DX3DVERT( -0.676385, 1.71051, 0.555777 ) DX3DVNORM( -0.864784, -0.477567, -0.15517 )  //0
DX3DVERT( -0.676385, 1.45504, 1.05715 ) DX3DVNORM( -0.864785, -0.406242, -0.295152 )  //1
DX3DVERT( -0.676385, 0.970028, 0.704767 ) DX3DVNORM( -0.994282, -0.0863956, -0.06277 )  //2
DX3DVERT( -0.676385, 1.14034, 0.370518 ) DX3DVNORM( -0.994282, -0.101564, -0.0330001 )  //3
DX3DVERT( -0.676385, 1.05715, 1.45504 ) DX3DVNORM( -0.864785, -0.295151, -0.406242 )  //4
DX3DVERT( -0.676385, 0.704767, 0.970029 ) DX3DVNORM( -0.994282, -0.0627699, -0.0863957 )  //5
DX3DVERT( -0.676385, -4.85044e-008, 1.79853 ) DX3DVNORM( -0.864783, 1.30051e-008, -0.502145 )  //6
DX3DVERT( -0.676385, -0.555777, 1.71051 ) DX3DVNORM( -0.864784, 0.155171, -0.477568 )  //7
DX3DVERT( -0.676385, -0.370518, 1.14034 ) DX3DVNORM( -0.994282, 0.0330002, -0.101564 )  //8
DX3DVERT( -0.676385, -4.85044e-008, 1.19902 ) DX3DVNORM( -0.994282, 6.55863e-009, -0.106791 )  //9
DX3DVERT( -0.676385, -1.05715, 1.45504 ) DX3DVNORM( -0.864785, 0.295152, -0.406242 )  //10
DX3DVERT( -0.676385, -0.704767, 0.970029 ) DX3DVNORM( -0.994282, 0.0627699, -0.0863957 )  //11
DX3DVERT( -0.676385, -1.71051, 0.555777 ) DX3DVNORM( -0.864784, 0.477568, -0.155171 )  //12
DX3DVERT( -0.676385, -1.79853, 9.70089e-008 ) DX3DVNORM( -0.864784, 0.502144, -4.33502e-009 )  //13
DX3DVERT( -0.676385, -1.19902, 9.70089e-008 ) DX3DVNORM( -0.994282, 0.106791, -1.87389e-009 )  //14
DX3DVERT( -0.676385, -1.14034, 0.370518 ) DX3DVNORM( -0.994282, 0.101564, -0.0330001 )  //15
DX3DVERT( -0.676385, -1.71051, -0.555777 ) DX3DVNORM( -0.864784, 0.477568, 0.155171 )  //16
DX3DVERT( -0.676385, -1.14034, -0.370518 ) DX3DVNORM( -0.994282, 0.101564, 0.0330002 )  //17
DX3DVERT( -0.676385, -1.05715, -1.45504 ) DX3DVNORM( -0.864786, 0.295151, 0.406241 )  //18
DX3DVERT( -0.676385, -0.555776, -1.71051 ) DX3DVNORM( -0.864785, 0.155171, 0.477567 )  //19
DX3DVERT( -0.676385, -0.370518, -1.14034 ) DX3DVNORM( -0.994282, 0.0330001, 0.101564 )  //20
DX3DVERT( -0.676385, -0.704767, -0.970028 ) DX3DVNORM( -0.994282, 0.06277, 0.0863956 )  //21
DX3DVERT( -0.676385, -4.85044e-008, -1.79853 ) DX3DVNORM( -0.864784, 4.33502e-008, 0.502144 )  //22
DX3DVERT( -0.676385, -4.85044e-008, -1.19902 ) DX3DVNORM( -0.994282, 6.55863e-009, 0.106791 )  //23
DX3DVERT( -0.676385, 1.05715, -1.45504 ) DX3DVNORM( -0.864785, -0.295151, 0.406241 )  //24
DX3DVERT( -0.676385, 1.45504, -1.05715 ) DX3DVNORM( -0.864785, -0.406242, 0.295152 )  //25
DX3DVERT( -0.676385, 0.970028, -0.704767 ) DX3DVNORM( -0.994282, -0.0863956, 0.0627701 )  //26
DX3DVERT( -0.676385, 0.704767, -0.970028 ) DX3DVNORM( -0.994282, -0.06277, 0.0863956 )  //27
DX3DVERT( -0.676385, 1.71051, -0.555777 ) DX3DVNORM( -0.864784, -0.477568, 0.155171 )  //28
DX3DVERT( -0.676385, 1.14034, -0.370518 ) DX3DVNORM( -0.994282, -0.101564, 0.0330001 )  //29
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( 0, 0, -0 )  //30
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( 0, 0, -0 )  //31
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( 0, 0, -0 )  //32
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( 0, 0, -0 )  //33
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( 0, 0, -0 )  //34
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( 0, 0, -0 )  //35
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( 0, 0, -0 )  //36
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( 0, 0, -0 )  //37
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( 0, 0, -0 )  //38
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( 0, 2.29447e-014, -0 )  //39
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( 0, 0, -0 )  //40
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( 0, 0, -0 )  //41
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( 0, 0, -0 )  //42
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( 0, 0, -0 )  //43
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( 0, 0, -0 )  //44
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( 0, 0, -0 )  //45
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( 0, 0, -0 )  //46
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( 0, 0, -0 )  //47
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( 0, 0, -0 )  //48
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( 0, 2.29447e-014, -0 )  //49
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.99999, -0.00403789, -0.00205869 )  //50
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( -0.99999, -0.00403789, -0.00205869 )  //51
DX3DVERT( 0.807322, 2.16494, 1.57292 ) DX3DVNORM( -0.99999, -0.00403789, -0.00205869 )  //52
DX3DVERT( 0.807322, 2.54504, 0.826932 ) DX3DVNORM( -0.99999, -0.00403789, -0.00205869 )  //53
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( -0.99999, -0.00320476, -0.00320651 )  //54
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.99999, -0.00320476, -0.00320651 )  //55
DX3DVERT( 0.807322, 1.57292, 2.16494 ) DX3DVNORM( -0.99999, -0.00320476, -0.00320651 )  //56
DX3DVERT( 0.807322, 2.16494, 1.57292 ) DX3DVNORM( -0.99999, -0.00320476, -0.00320651 )  //57
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.99999, -0.00205486, -0.00404004 )  //58
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.99999, -0.00205486, -0.00404004 )  //59
DX3DVERT( 0.807322, 0.826932, 2.54503 ) DX3DVNORM( -0.99999, -0.00205486, -0.00404004 )  //60
DX3DVERT( 0.807322, 1.57292, 2.16494 ) DX3DVNORM( -0.99999, -0.00205486, -0.00404004 )  //61
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.99999, -0.000709209, -0.00447809 )  //62
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( -0.99999, -0.000709209, -0.00447809 )  //63
DX3DVERT( 0.807322, -4.85044e-008, 2.67601 ) DX3DVNORM( -0.99999, -0.000709209, -0.00447809 )  //64
DX3DVERT( 0.807322, 0.826932, 2.54503 ) DX3DVNORM( -0.99999, -0.000709209, -0.00447809 )  //65
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( -0.99999, 0.000709337, -0.00447889 )  //66
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.99999, 0.000709337, -0.00447889 )  //67
DX3DVERT( 0.807322, -0.826932, 2.54504 ) DX3DVNORM( -0.99999, 0.000709337, -0.00447889 )  //68
DX3DVERT( 0.807322, -4.85044e-008, 2.67601 ) DX3DVNORM( -0.99999, 0.000709337, -0.00447889 )  //69
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.99999, 0.00205336, -0.00404044 )  //70
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( -0.99999, 0.00205336, -0.00404044 )  //71
DX3DVERT( 0.807322, -1.57292, 2.16494 ) DX3DVNORM( -0.99999, 0.00205336, -0.00404044 )  //72
DX3DVERT( 0.807322, -0.826932, 2.54504 ) DX3DVNORM( -0.99999, 0.00205336, -0.00404044 )  //73
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( -0.99999, 0.0032051, -0.00320296 )  //74
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.99999, 0.0032051, -0.00320296 )  //75
DX3DVERT( 0.807322, -2.16494, 1.57292 ) DX3DVNORM( -0.99999, 0.0032051, -0.00320296 )  //76
DX3DVERT( 0.807322, -1.57292, 2.16494 ) DX3DVNORM( -0.99999, 0.0032051, -0.00320296 )  //77
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.99999, 0.00404322, -0.00205631 )  //78
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.99999, 0.00404322, -0.00205631 )  //79
DX3DVERT( 0.807322, -2.54503, 0.826932 ) DX3DVNORM( -0.99999, 0.00404322, -0.00205631 )  //80
DX3DVERT( 0.807322, -2.16494, 1.57292 ) DX3DVNORM( -0.99999, 0.00404322, -0.00205631 )  //81
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.99999, 0.00447931, -0.000709303 )  //82
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( -0.99999, 0.00447931, -0.000709303 )  //83
DX3DVERT( 0.807322, -2.67601, 9.70089e-008 ) DX3DVNORM( -0.99999, 0.00447931, -0.000709303 )  //84
DX3DVERT( 0.807322, -2.54503, 0.826932 ) DX3DVNORM( -0.99999, 0.00447931, -0.000709303 )  //85
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( -0.99999, 0.00448858, 0.000709304 )  //86
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( -0.99999, 0.00448858, 0.000709304 )  //87
DX3DVERT( 0.807322, -2.54503, -0.826932 ) DX3DVNORM( -0.99999, 0.00448858, 0.000709304 )  //88
DX3DVERT( 0.807322, -2.67601, 9.70089e-008 ) DX3DVNORM( -0.99999, 0.00448858, 0.000709304 )  //89
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( -0.99999, 0.00403308, 0.0020585 )  //90
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( -0.99999, 0.00403308, 0.0020585 )  //91
DX3DVERT( 0.807322, -2.16494, -1.57292 ) DX3DVNORM( -0.99999, 0.00403308, 0.0020585 )  //92
DX3DVERT( 0.807322, -2.54503, -0.826932 ) DX3DVNORM( -0.99999, 0.00403308, 0.0020585 )  //93
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( -0.99999, 0.00320682, 0.00320628 )  //94
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.99999, 0.00320682, 0.00320628 )  //95
DX3DVERT( 0.807322, -1.57292, -2.16493 ) DX3DVNORM( -0.99999, 0.00320682, 0.00320628 )  //96
DX3DVERT( 0.807322, -2.16494, -1.57292 ) DX3DVNORM( -0.99999, 0.00320682, 0.00320628 )  //97
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.99999, 0.00205542, 0.00403597 )  //98
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( -0.99999, 0.00205542, 0.00403597 )  //99
DX3DVERT( 0.807322, -0.826932, -2.54504 ) DX3DVNORM( -0.99999, 0.00205542, 0.00403597 )  //100
DX3DVERT( 0.807322, -1.57292, -2.16493 ) DX3DVNORM( -0.99999, 0.00205542, 0.00403597 )  //101
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( -0.99999, 0.000709175, 0.00447423 )  //102
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -0.99999, 0.000709175, 0.00447423 )  //103
DX3DVERT( 0.807322, -4.85044e-008, -2.67601 ) DX3DVNORM( -0.99999, 0.000709175, 0.00447423 )  //104
DX3DVERT( 0.807322, -0.826932, -2.54504 ) DX3DVNORM( -0.99999, 0.000709175, 0.00447423 )  //105
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -0.99999, -0.000709885, 0.00447474 )  //106
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.99999, -0.000709885, 0.00447474 )  //107
DX3DVERT( 0.807322, 0.826932, -2.54504 ) DX3DVNORM( -0.99999, -0.000709885, 0.00447474 )  //108
DX3DVERT( 0.807322, -4.85044e-008, -2.67601 ) DX3DVNORM( -0.99999, -0.000709885, 0.00447474 )  //109
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.99999, -0.0020405, 0.00400667 )  //110
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.99999, -0.0020405, 0.00400667 )  //111
DX3DVERT( 0.807322, 1.57292, -2.16494 ) DX3DVNORM( -0.99999, -0.0020405, 0.00400667 )  //112
DX3DVERT( 0.807322, 0.826932, -2.54504 ) DX3DVNORM( -0.99999, -0.0020405, 0.00400667 )  //113
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.99999, -0.00318311, 0.00317948 )  //114
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.99999, -0.00318311, 0.00317948 )  //115
DX3DVERT( 0.807322, 2.16494, -1.57292 ) DX3DVNORM( -0.99999, -0.00318311, 0.00317948 )  //116
DX3DVERT( 0.807322, 1.57292, -2.16494 ) DX3DVNORM( -0.99999, -0.00318311, 0.00317948 )  //117
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.99999, -0.00403532, 0.00205632 )  //118
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.99999, -0.00403532, 0.00205632 )  //119
DX3DVERT( 0.807322, 2.54503, -0.826932 ) DX3DVNORM( -0.99999, -0.00403532, 0.00205632 )  //120
DX3DVERT( 0.807322, 2.16494, -1.57292 ) DX3DVNORM( -0.99999, -0.00403532, 0.00205632 )  //121
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.99999, -0.00448358, 0.000709277 )  //122
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -0.99999, -0.00448358, 0.000709277 )  //123
DX3DVERT( 0.807322, 2.67601, 9.70089e-008 ) DX3DVNORM( -0.99999, -0.00448358, 0.000709277 )  //124
DX3DVERT( 0.807322, 2.54503, -0.826932 ) DX3DVNORM( -0.99999, -0.00448358, 0.000709277 )  //125
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -0.99999, -0.00447732, -0.000709335 )  //126
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.99999, -0.00447732, -0.000709335 )  //127
DX3DVERT( 0.807322, 2.54504, 0.826932 ) DX3DVNORM( -0.99999, -0.00447732, -0.000709335 )  //128
DX3DVERT( 0.807322, 2.67601, 9.70089e-008 ) DX3DVNORM( -0.99999, -0.00447732, -0.000709335 )  //129
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.000205232, -0.309088, 0.951033 )  //130
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.000205232, -0.309088, 0.951033 )  //131
DX3DVERT( 0.807322, 2.54504, 0.826932 ) DX3DVNORM( -0.000205232, -0.309088, 0.951033 )  //132
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( 0.0022658, -0.587692, 0.809081 )  //133
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.0022658, -0.587692, 0.809081 )  //134
DX3DVERT( 0.807322, 2.16494, 1.57292 ) DX3DVNORM( 0.0022658, -0.587692, 0.809081 )  //135
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.997855, -0.0583282, -0.0297197 )  //136
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( -0.997855, -0.0583282, -0.0297197 )  //137
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0583282, -0.0297197 )  //138
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.00109155, -0.809041, 0.58775 )  //139
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00109155, -0.809041, 0.58775 )  //140
DX3DVERT( 0.807322, 1.57292, 2.16494 ) DX3DVNORM( -0.00109155, -0.809041, 0.58775 )  //141
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( -0.997855, -0.0462896, -0.0462896 )  //142
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.997855, -0.0462896, -0.0462896 )  //143
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0462896, -0.0462896 )  //144
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.000905487, -0.951071, 0.308971 )  //145
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.000905487, -0.951071, 0.308971 )  //146
DX3DVERT( 0.807322, 0.826932, 2.54503 ) DX3DVNORM( -0.000905487, -0.951071, 0.308971 )  //147
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.997855, -0.0297196, -0.0583283 )  //148
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.997855, -0.0297196, -0.0583283 )  //149
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0297196, -0.0583283 )  //150
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( 6.57274e-007, -1, 2.94362e-009 )  //151
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 6.57274e-007, -1, 2.94362e-009 )  //152
DX3DVERT( 0.807322, -4.85044e-008, 2.67601 ) DX3DVNORM( 6.57274e-007, -1, 2.94362e-009 )  //153
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.997855, -0.0102408, -0.0646574 )  //154
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( -0.997855, -0.0102408, -0.0646574 )  //155
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0102408, -0.0646574 )  //156
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.00100501, -0.951042, -0.30906 )  //157
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00100501, -0.951042, -0.30906 )  //158
DX3DVERT( 0.807322, -0.826932, 2.54504 ) DX3DVNORM( -0.00100501, -0.951042, -0.30906 )  //159
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( -0.997855, 0.0102408, -0.0646574 )  //160
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.997855, 0.0102408, -0.0646574 )  //161
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0102408, -0.0646574 )  //162
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( 3.86533e-005, -0.809, -0.587809 )  //163
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 3.86533e-005, -0.809, -0.587809 )  //164
DX3DVERT( 0.807322, -1.57292, 2.16494 ) DX3DVNORM( 3.86533e-005, -0.809, -0.587809 )  //165
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.997855, 0.0297197, -0.0583283 )  //166
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( -0.997855, 0.0297197, -0.0583283 )  //167
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0297197, -0.0583283 )  //168
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.00229266, -0.587827, -0.808983 )  //169
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00229266, -0.587827, -0.808983 )  //170
DX3DVERT( 0.807322, -2.16494, 1.57292 ) DX3DVNORM( -0.00229266, -0.587827, -0.808983 )  //171
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( -0.997855, 0.0462895, -0.0462896 )  //172
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.997855, 0.0462895, -0.0462896 )  //173
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0462895, -0.0462896 )  //174
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.000413168, -0.309045, -0.951047 )  //175
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.000413168, -0.309045, -0.951047 )  //176
DX3DVERT( 0.807322, -2.54503, 0.826932 ) DX3DVNORM( -0.000413168, -0.309045, -0.951047 )  //177
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.997855, 0.0583282, -0.0297197 )  //178
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.997855, 0.0583282, -0.0297197 )  //179
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0583282, -0.0297197 )  //180
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( 6.57345e-007, -2.94888e-009, -1 )  //181
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 6.57345e-007, -2.94888e-009, -1 )  //182
DX3DVERT( 0.807322, -2.67601, 9.70089e-008 ) DX3DVNORM( 6.57345e-007, -2.94888e-009, -1 )  //183
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.997855, 0.0646574, -0.0102407 )  //184
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( -0.997855, 0.0646574, -0.0102407 )  //185
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0646574, -0.0102407 )  //186
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( 0.000881559, 0.309004, -0.95106 )  //187
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.000881559, 0.309004, -0.95106 )  //188
DX3DVERT( 0.807322, -2.54503, -0.826932 ) DX3DVNORM( 0.000881559, 0.309004, -0.95106 )  //189
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( -0.997855, 0.0646574, 0.0102407 )  //190
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( -0.997855, 0.0646574, 0.0102407 )  //191
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0646574, 0.0102407 )  //192
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( 0.000601854, 0.587748, -0.809044 )  //193
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.000601854, 0.587748, -0.809044 )  //194
DX3DVERT( 0.807322, -2.16494, -1.57292 ) DX3DVNORM( 0.000601854, 0.587748, -0.809044 )  //195
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( -0.997855, 0.0583282, 0.0297197 )  //196
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( -0.997855, 0.0583282, 0.0297197 )  //197
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0583282, 0.0297197 )  //198
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.00126643, 0.808994, -0.587815 )  //199
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00126643, 0.808994, -0.587815 )  //200
DX3DVERT( 0.807322, -1.57292, -2.16493 ) DX3DVNORM( -0.00126643, 0.808994, -0.587815 )  //201
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( -0.997855, 0.0462895, 0.0462896 )  //202
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.997855, 0.0462895, 0.0462896 )  //203
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0462895, 0.0462896 )  //204
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( 0.00143018, 0.951022, -0.309121 )  //205
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.00143018, 0.951022, -0.309121 )  //206
DX3DVERT( 0.807322, -0.826932, -2.54504 ) DX3DVNORM( 0.00143018, 0.951022, -0.309121 )  //207
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.997855, 0.0297197, 0.0583283 )  //208
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( -0.997855, 0.0297197, 0.0583283 )  //209
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0297197, 0.0583283 )  //210
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -6.57365e-007, 1, 2.94415e-009 )  //211
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -6.57365e-007, 1, 2.94415e-009 )  //212
DX3DVERT( 0.807322, -4.85044e-008, -2.67601 ) DX3DVNORM( -6.57365e-007, 1, 2.94415e-009 )  //213
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( -0.997855, 0.0102408, 0.0646574 )  //214
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -0.997855, 0.0102408, 0.0646574 )  //215
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0102408, 0.0646574 )  //216
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.00201088, 0.951027, 0.309102 )  //217
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00201088, 0.951027, 0.309102 )  //218
DX3DVERT( 0.807322, 0.826932, -2.54504 ) DX3DVNORM( -0.00201088, 0.951027, 0.309102 )  //219
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -0.997855, -0.0102408, 0.0646574 )  //220
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.997855, -0.0102408, 0.0646574 )  //221
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0102408, 0.0646574 )  //222
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.0013701, 0.808891, 0.587958 )  //223
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.0013701, 0.808891, 0.587958 )  //224
DX3DVERT( 0.807322, 1.57292, -2.16494 ) DX3DVNORM( -0.0013701, 0.808891, 0.587958 )  //225
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.997855, -0.0297197, 0.0583283 )  //226
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.997855, -0.0297197, 0.0583283 )  //227
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0297197, 0.0583283 )  //228
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.00421282, 0.587463, 0.80924 )  //229
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00421282, 0.587463, 0.80924 )  //230
DX3DVERT( 0.807322, 2.16494, -1.57292 ) DX3DVNORM( -0.00421282, 0.587463, 0.80924 )  //231
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.997855, -0.0462895, 0.0462896 )  //232
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.997855, -0.0462895, 0.0462896 )  //233
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0462895, 0.0462896 )  //234
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.000799616, 0.308986, 0.951066 )  //235
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.000799616, 0.308986, 0.951066 )  //236
DX3DVERT( 0.807322, 2.54503, -0.826932 ) DX3DVNORM( -0.000799616, 0.308986, 0.951066 )  //237
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.997855, -0.0583282, 0.0297197 )  //238
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.997855, -0.0583282, 0.0297197 )  //239
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0583282, 0.0297197 )  //240
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -6.57372e-007, -2.94871e-009, 1 )  //241
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -6.57372e-007, -2.94871e-009, 1 )  //242
DX3DVERT( 0.807322, 2.67601, 9.70089e-008 ) DX3DVNORM( -6.57372e-007, -2.94871e-009, 1 )  //243
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.997855, -0.0646574, 0.0102407 )  //244
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -0.997855, -0.0646574, 0.0102407 )  //245
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0646574, 0.0102407 )  //246
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -0.997855, -0.0646574, -0.0102407 )  //247
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.997855, -0.0646574, -0.0102407 )  //248
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0646574, -0.0102407 )  //249
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0, 0, -0 )  //250
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( 0.997855, 0.0583281, 0.0297197 )  //251
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( 0.997855, 0.0583281, 0.0297197 )  //252
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0583281, 0.0297197 )  //253
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( 0.997855, 0.0462896, 0.0462896 )  //254
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( 0.997855, 0.0462896, 0.0462896 )  //255
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0462896, 0.0462896 )  //256
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( 0.997855, 0.0297197, 0.0583283 )  //257
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( 0.997855, 0.0297197, 0.0583283 )  //258
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0297197, 0.0583283 )  //259
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( 0.997855, 0.0102408, 0.0646574 )  //260
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( 0.997855, 0.0102408, 0.0646574 )  //261
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0102408, 0.0646574 )  //262
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( 0.997855, -0.0102408, 0.0646574 )  //263
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( 0.997855, -0.0102408, 0.0646574 )  //264
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0102408, 0.0646574 )  //265
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( 0.997855, -0.0297197, 0.0583283 )  //266
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( 0.997855, -0.0297197, 0.0583283 )  //267
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0297197, 0.0583283 )  //268
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( 0.997855, -0.0462895, 0.0462896 )  //269
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( 0.997855, -0.0462895, 0.0462896 )  //270
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0462895, 0.0462896 )  //271
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( 0.997855, -0.0583282, 0.0297197 )  //272
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( 0.997855, -0.0583282, 0.0297197 )  //273
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0583282, 0.0297197 )  //274
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( 0.997855, -0.0646574, 0.0102407 )  //275
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( 0.997855, -0.0646574, 0.0102407 )  //276
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0646574, 0.0102407 )  //277
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( 0.997855, -0.0646574, -0.0102407 )  //278
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( 0.997855, -0.0646574, -0.0102407 )  //279
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0646574, -0.0102407 )  //280
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( 0.997855, -0.0583282, -0.0297197 )  //281
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( 0.997855, -0.0583282, -0.0297197 )  //282
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0583282, -0.0297197 )  //283
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( 0.997855, -0.0462895, -0.0462896 )  //284
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( 0.997855, -0.0462895, -0.0462896 )  //285
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0462895, -0.0462896 )  //286
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( 0.997855, -0.0297197, -0.0583283 )  //287
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( 0.997855, -0.0297197, -0.0583283 )  //288
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0297197, -0.0583283 )  //289
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( 0.997855, -0.0102408, -0.0646574 )  //290
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( 0.997855, -0.0102408, -0.0646574 )  //291
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0102408, -0.0646574 )  //292
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( 0.997855, 0.0102408, -0.0646574 )  //293
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( 0.997855, 0.0102408, -0.0646574 )  //294
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0102408, -0.0646574 )  //295
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( 0.997855, 0.0297198, -0.0583283 )  //296
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( 0.997855, 0.0297198, -0.0583283 )  //297
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0297198, -0.0583283 )  //298
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( 0.997855, 0.0462895, -0.0462896 )  //299
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( 0.997855, 0.0462895, -0.0462896 )  //300
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0462895, -0.0462896 )  //301
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( 0.997855, 0.0583283, -0.0297197 )  //302
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( 0.997855, 0.0583283, -0.0297197 )  //303
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0583283, -0.0297197 )  //304
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( 0.997855, 0.0646574, -0.0102407 )  //305
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( 0.997855, 0.0646574, -0.0102407 )  //306
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0646574, -0.0102407 )  //307
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( 0.997855, 0.0646575, 0.0102407 )  //308
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( 0.997855, 0.0646575, 0.0102407 )  //309
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0646575, 0.0102407 )  //310
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BASE_TIREFL___carbodyblack_2 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BASE_TIREFL___carbodyblack_2 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 311 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BASE_TIREFL___carbodyblack_2	NULL
#define vertexbuff_KEIA_BASE_TIREFL___carbodyblack_2	NULL
#endif




#if ((PT_KEIA_BASE_TIREFL___carbodyblack_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIREFL___carbodyblack_2 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BASE_TIREFL___carbodyblack_2 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
	1, 4, 2, // 2 8
	4, 5, 2, // 3 11
	6, 7, 9, // 4 14
	7, 8, 9, // 5 17
	7, 10, 8, // 6 20
	10, 11, 8, // 7 23
	12, 13, 15, // 8 26
	13, 14, 15, // 9 29
	13, 16, 14, // 10 32
	16, 17, 14, // 11 35
	18, 19, 21, // 12 38
	19, 20, 21, // 13 41
	19, 22, 20, // 14 44
	22, 23, 20, // 15 47
	24, 25, 27, // 16 50
	25, 26, 27, // 17 53
	25, 28, 26, // 18 56
	28, 29, 26, // 19 59
	30, 31, 30, // 20 62
	31, 31, 30, // 21 65
	32, 30, 32, // 22 68
	30, 30, 32, // 23 71
	33, 32, 33, // 24 74
	32, 32, 33, // 25 77
	34, 33, 34, // 26 80
	33, 33, 34, // 27 83
	35, 34, 35, // 28 86
	34, 34, 35, // 29 89
	36, 35, 36, // 30 92
	35, 35, 36, // 31 95
	37, 36, 37, // 32 98
	36, 36, 37, // 33 101
	38, 37, 38, // 34 104
	37, 37, 38, // 35 107
	39, 38, 39, // 36 110
	38, 38, 39, // 37 113
	40, 39, 40, // 38 116
	39, 39, 40, // 39 119
	41, 40, 41, // 40 122
	40, 40, 41, // 41 125
	42, 41, 42, // 42 128
	41, 41, 42, // 43 131
	43, 42, 43, // 44 134
	42, 42, 43, // 45 137
	44, 43, 44, // 46 140
	43, 43, 44, // 47 143
	45, 44, 45, // 48 146
	44, 44, 45, // 49 149
	46, 45, 46, // 50 152
	45, 45, 46, // 51 155
	47, 46, 47, // 52 158
	46, 46, 47, // 53 161
	48, 47, 48, // 54 164
	47, 47, 48, // 55 167
	49, 48, 49, // 56 170
	48, 48, 49, // 57 173
	31, 49, 31, // 58 176
	49, 49, 31, // 59 179
	31, 30, 31, // 60 182
	30, 30, 31, // 61 185
	30, 32, 30, // 62 188
	32, 32, 30, // 63 191
	32, 33, 32, // 64 194
	33, 33, 32, // 65 197
	33, 34, 33, // 66 200
	34, 34, 33, // 67 203
	34, 35, 34, // 68 206
	35, 35, 34, // 69 209
	35, 36, 35, // 70 212
	36, 36, 35, // 71 215
	36, 37, 36, // 72 218
	37, 37, 36, // 73 221
	37, 38, 37, // 74 224
	38, 38, 37, // 75 227
	38, 39, 38, // 76 230
	39, 39, 38, // 77 233
	39, 40, 39, // 78 236
	40, 40, 39, // 79 239
	40, 41, 40, // 80 242
	41, 41, 40, // 81 245
	41, 42, 41, // 82 248
	42, 42, 41, // 83 251
	42, 43, 42, // 84 254
	43, 43, 42, // 85 257
	43, 44, 43, // 86 260
	44, 44, 43, // 87 263
	44, 45, 44, // 88 266
	45, 45, 44, // 89 269
	45, 46, 45, // 90 272
	46, 46, 45, // 91 275
	46, 47, 46, // 92 278
	47, 47, 46, // 93 281
	47, 48, 47, // 94 284
	48, 48, 47, // 95 287
	48, 49, 48, // 96 290
	49, 49, 48, // 97 293
	49, 31, 49, // 98 296
	31, 31, 49, // 99 299
	31, 31, 31, // 100 302
	31, 31, 31, // 101 305
	30, 30, 30, // 102 308
	30, 30, 30, // 103 311
	30, 31, 30, // 104 314
	31, 31, 30, // 105 317
	32, 32, 32, // 106 320
	32, 32, 32, // 107 323
	32, 30, 32, // 108 326
	30, 30, 32, // 109 329
	33, 33, 33, // 110 332
	33, 33, 33, // 111 335
	33, 32, 33, // 112 338
	32, 32, 33, // 113 341
	34, 34, 34, // 114 344
	34, 34, 34, // 115 347
	34, 33, 34, // 116 350
	33, 33, 34, // 117 353
	35, 35, 35, // 118 356
	35, 35, 35, // 119 359
	35, 34, 35, // 120 362
	34, 34, 35, // 121 365
	36, 36, 36, // 122 368
	36, 36, 36, // 123 371
	36, 35, 36, // 124 374
	35, 35, 36, // 125 377
	37, 37, 37, // 126 380
	37, 37, 37, // 127 383
	37, 36, 37, // 128 386
	36, 36, 37, // 129 389
	38, 38, 38, // 130 392
	38, 38, 38, // 131 395
	38, 37, 38, // 132 398
	37, 37, 38, // 133 401
	39, 39, 39, // 134 404
	39, 39, 39, // 135 407
	39, 38, 39, // 136 410
	38, 38, 39, // 137 413
	40, 40, 40, // 138 416
	40, 40, 40, // 139 419
	40, 39, 40, // 140 422
	39, 39, 40, // 141 425
	41, 41, 41, // 142 428
	41, 41, 41, // 143 431
	41, 40, 41, // 144 434
	40, 40, 41, // 145 437
	42, 42, 42, // 146 440
	42, 42, 42, // 147 443
	42, 41, 42, // 148 446
	41, 41, 42, // 149 449
	43, 43, 43, // 150 452
	43, 43, 43, // 151 455
	43, 42, 43, // 152 458
	42, 42, 43, // 153 461
	44, 44, 44, // 154 464
	44, 44, 44, // 155 467
	44, 43, 44, // 156 470
	43, 43, 44, // 157 473
	45, 45, 45, // 158 476
	45, 45, 45, // 159 479
	45, 44, 45, // 160 482
	44, 44, 45, // 161 485
	46, 46, 46, // 162 488
	46, 46, 46, // 163 491
	46, 45, 46, // 164 494
	45, 45, 46, // 165 497
	47, 47, 47, // 166 500
	47, 47, 47, // 167 503
	47, 46, 47, // 168 506
	46, 46, 47, // 169 509
	48, 48, 48, // 170 512
	48, 48, 48, // 171 515
	48, 47, 48, // 172 518
	47, 47, 48, // 173 521
	49, 49, 49, // 174 524
	49, 49, 49, // 175 527
	49, 48, 49, // 176 530
	48, 48, 49, // 177 533
	31, 49, 31, // 178 536
	49, 49, 31, // 179 539
	50, 51, 53, // 180 542
	51, 52, 53, // 181 545
	54, 55, 57, // 182 548
	55, 56, 57, // 183 551
	58, 59, 61, // 184 554
	59, 60, 61, // 185 557
	62, 63, 65, // 186 560
	63, 64, 65, // 187 563
	66, 67, 69, // 188 566
	67, 68, 69, // 189 569
	70, 71, 73, // 190 572
	71, 72, 73, // 191 575
	74, 75, 77, // 192 578
	75, 76, 77, // 193 581
	78, 79, 81, // 194 584
	79, 80, 81, // 195 587
	82, 83, 85, // 196 590
	83, 84, 85, // 197 593
	86, 87, 89, // 198 596
	87, 88, 89, // 199 599
	90, 91, 93, // 200 602
	91, 92, 93, // 201 605
	94, 95, 97, // 202 608
	95, 96, 97, // 203 611
	98, 99, 101, // 204 614
	99, 100, 101, // 205 617
	102, 103, 105, // 206 620
	103, 104, 105, // 207 623
	106, 107, 109, // 208 626
	107, 108, 109, // 209 629
	110, 111, 113, // 210 632
	111, 112, 113, // 211 635
	114, 115, 117, // 212 638
	115, 116, 117, // 213 641
	118, 119, 121, // 214 644
	119, 120, 121, // 215 647
	122, 123, 125, // 216 650
	123, 124, 125, // 217 653
	126, 127, 129, // 218 656
	127, 128, 129, // 219 659
	130, 130, 132, // 220 662
	130, 131, 132, // 221 665
	133, 133, 135, // 222 668
	133, 134, 135, // 223 671
	136, 137, 138, // 224 674
	139, 139, 141, // 225 677
	139, 140, 141, // 226 680
	142, 143, 144, // 227 683
	145, 145, 147, // 228 686
	145, 146, 147, // 229 689
	148, 149, 150, // 230 692
	151, 151, 153, // 231 695
	151, 152, 153, // 232 698
	154, 155, 156, // 233 701
	157, 157, 159, // 234 704
	157, 158, 159, // 235 707
	160, 161, 162, // 236 710
	163, 163, 165, // 237 713
	163, 164, 165, // 238 716
	166, 167, 168, // 239 719
	169, 169, 171, // 240 722
	169, 170, 171, // 241 725
	172, 173, 174, // 242 728
	175, 175, 177, // 243 731
	175, 176, 177, // 244 734
	178, 179, 180, // 245 737
	181, 181, 183, // 246 740
	181, 182, 183, // 247 743
	184, 185, 186, // 248 746
	187, 187, 189, // 249 749
	187, 188, 189, // 250 752
	190, 191, 192, // 251 755
	193, 193, 195, // 252 758
	193, 194, 195, // 253 761
	196, 197, 198, // 254 764
	199, 199, 201, // 255 767
	199, 200, 201, // 256 770
	202, 203, 204, // 257 773
	205, 205, 207, // 258 776
	205, 206, 207, // 259 779
	208, 209, 210, // 260 782
	211, 211, 213, // 261 785
	211, 212, 213, // 262 788
	214, 215, 216, // 263 791
	217, 217, 219, // 264 794
	217, 218, 219, // 265 797
	220, 221, 222, // 266 800
	223, 223, 225, // 267 803
	223, 224, 225, // 268 806
	226, 227, 228, // 269 809
	229, 229, 231, // 270 812
	229, 230, 231, // 271 815
	232, 233, 234, // 272 818
	235, 235, 237, // 273 821
	235, 236, 237, // 274 824
	238, 239, 240, // 275 827
	241, 241, 243, // 276 830
	241, 242, 243, // 277 833
	244, 245, 246, // 278 836
	247, 248, 249, // 279 839
	130, 130, 132, // 280 842
	130, 131, 132, // 281 845
	133, 133, 135, // 282 848
	133, 134, 135, // 283 851
	136, 137, 138, // 284 854
	139, 139, 141, // 285 857
	139, 140, 141, // 286 860
	142, 143, 144, // 287 863
	145, 145, 147, // 288 866
	145, 146, 147, // 289 869
	148, 149, 150, // 290 872
	151, 151, 153, // 291 875
	151, 152, 153, // 292 878
	154, 155, 156, // 293 881
	157, 157, 159, // 294 884
	157, 158, 159, // 295 887
	160, 161, 162, // 296 890
	163, 163, 165, // 297 893
	163, 164, 165, // 298 896
	166, 167, 168, // 299 899
	169, 169, 171, // 300 902
	169, 170, 171, // 301 905
	172, 173, 174, // 302 908
	175, 175, 177, // 303 911
	175, 176, 177, // 304 914
	178, 179, 180, // 305 917
	181, 181, 183, // 306 920
	181, 182, 183, // 307 923
	184, 185, 186, // 308 926
	187, 187, 189, // 309 929
	187, 188, 189, // 310 932
	190, 191, 192, // 311 935
	193, 193, 195, // 312 938
	193, 194, 195, // 313 941
	196, 197, 198, // 314 944
	199, 199, 201, // 315 947
	199, 200, 201, // 316 950
	202, 203, 204, // 317 953
	205, 205, 207, // 318 956
	205, 206, 207, // 319 959
	208, 209, 210, // 320 962
	211, 211, 213, // 321 965
	211, 212, 213, // 322 968
	214, 215, 216, // 323 971
	217, 217, 219, // 324 974
	217, 218, 219, // 325 977
	220, 221, 222, // 326 980
	223, 223, 225, // 327 983
	223, 224, 225, // 328 986
	226, 227, 228, // 329 989
	229, 229, 231, // 330 992
	229, 230, 231, // 331 995
	232, 233, 234, // 332 998
	235, 235, 237, // 333 1001
	235, 236, 237, // 334 1004
	238, 239, 240, // 335 1007
	241, 241, 243, // 336 1010
	241, 242, 243, // 337 1013
	244, 245, 246, // 338 1016
	247, 248, 249, // 339 1019
	31, 31, 250, // 340 1022
	31, 31, 250, // 341 1025
	30, 30, 250, // 342 1028
	30, 30, 250, // 343 1031
	251, 252, 253, // 344 1034
	32, 32, 250, // 345 1037
	32, 32, 250, // 346 1040
	254, 255, 256, // 347 1043
	33, 33, 250, // 348 1046
	33, 33, 250, // 349 1049
	257, 258, 259, // 350 1052
	34, 34, 250, // 351 1055
	34, 34, 250, // 352 1058
	260, 261, 262, // 353 1061
	35, 35, 250, // 354 1064
	35, 35, 250, // 355 1067
	263, 264, 265, // 356 1070
	36, 36, 250, // 357 1073
	36, 36, 250, // 358 1076
	266, 267, 268, // 359 1079
	37, 37, 250, // 360 1082
	37, 37, 250, // 361 1085
	269, 270, 271, // 362 1088
	38, 38, 250, // 363 1091
	38, 38, 250, // 364 1094
	272, 273, 274, // 365 1097
	39, 39, 250, // 366 1100
	39, 39, 250, // 367 1103
	275, 276, 277, // 368 1106
	40, 40, 250, // 369 1109
	40, 40, 250, // 370 1112
	278, 279, 280, // 371 1115
	41, 41, 250, // 372 1118
	41, 41, 250, // 373 1121
	281, 282, 283, // 374 1124
	42, 42, 250, // 375 1127
	42, 42, 250, // 376 1130
	284, 285, 286, // 377 1133
	43, 43, 250, // 378 1136
	43, 43, 250, // 379 1139
	287, 288, 289, // 380 1142
	44, 44, 250, // 381 1145
	44, 44, 250, // 382 1148
	290, 291, 292, // 383 1151
	45, 45, 250, // 384 1154
	45, 45, 250, // 385 1157
	293, 294, 295, // 386 1160
	46, 46, 250, // 387 1163
	46, 46, 250, // 388 1166
	296, 297, 298, // 389 1169
	47, 47, 250, // 390 1172
	47, 47, 250, // 391 1175
	299, 300, 301, // 392 1178
	48, 48, 250, // 393 1181
	48, 48, 250, // 394 1184
	302, 303, 304, // 395 1187
	49, 49, 250, // 396 1190
	49, 49, 250, // 397 1193
	305, 306, 307, // 398 1196
	308, 309, 310, // 399 1199
DX3DINDEX_END
#endif

#else
#define index_KEIA_BASE_TIREFL___carbodyblack_2	NULL
#endif




#if ((PT_KEIA_BASE_TIREFL___carbodyblack_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BASE_TIREFL___carbodyblack_2 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BASE_TIREFL___carbodyblack_2_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BASE_TIREFL___carbodyblack_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BASE_TIREFL___carbodyblack_2 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BASE_TIREFL___carbodyblack_2_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BASE_TIREFL___carbodyblack_2_VERTEXSTRIP 	NULL
#endif




DX3DMODELTBL_START( modeltbl_KEIA_BASE_TIREFL__ )
DX3DMODEL_START( model_KEIA_BASE_TIREFL___cartire_0 )
DX3DMODEL_VERTEX( vertex_KEIA_BASE_TIREFL___cartire_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BASE_TIREFL___cartire_0 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 516 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_cartire )
DX3DMODEL_END
DX3DMODEL_START( model_KEIA_BASE_TIREFL___carwheelB_1 )
DX3DMODEL_VERTEX( vertex_KEIA_BASE_TIREFL___carwheelB_1 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BASE_TIREFL___carwheelB_1 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 276 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carwheelB )
DX3DMODEL_END
DX3DMODEL_START( model_KEIA_BASE_TIREFL___carbodyblack_2 )
DX3DMODEL_VERTEX( vertex_KEIA_BASE_TIREFL___carbodyblack_2 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BASE_TIREFL___carbodyblack_2 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 1200 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carbodyblack )
DX3DMODEL_END
DX3DMODELTBL_END




DX3DOBJECT_START_HASH( object_KEIA_BASE_TIREFL__, 314576521 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_KEIA_BASE_TIREFL__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	5.94, 2.86276, -12.471, 
	-0, -0, 0,                // -0, -0, 0
	-1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	5.94, 2.86276, -12.471, 
	-0, -0, 0,                // -0, -0, 0
	-1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_KEIA_BASE_TIREFR__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_KEIA_BASE_TIRERR__
/////////////////////////////////////////////
#if 0
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	-5.94006, 2.86276, -13.14, 1
#endif



#if ((PT_KEIA_BASE_TIRERR___cartire_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIRERR___cartire_0 == PT_TRILIST ) || ((PT_KEIA_BASE_TIRERR___cartire_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BASE_TIRERR___cartire_0 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BASE_TIRERR___cartire_0 )
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.00903158, 0.951018, 0.309003 )  //0
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( -0.00903167, 0.808984, 0.587761 )  //1
DX3DVERT( -0.651165, 2.15934, 1.56885 ) DX3DVNORM( -0.313176, 0.768319, 0.558217 )  //2
DX3DVERT( -0.651165, 2.53846, 0.824794 ) DX3DVNORM( -0.313177, 0.903214, 0.293471 )  //3
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.00903152, 0.587761, 0.808984 )  //4
DX3DVERT( -0.651165, 1.56885, 2.15934 ) DX3DVNORM( -0.313176, 0.558217, 0.768319 )  //5
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.00903127, 0.309004, 0.951018 )  //6
DX3DVERT( -0.651165, 0.824795, 2.53846 ) DX3DVNORM( -0.313177, 0.293472, 0.903214 )  //7
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( -0.00903127, -3.01738e-008, 0.999959 )  //8
DX3DVERT( -0.651165, -4.85044e-008, 2.66909 ) DX3DVNORM( -0.313177, -2.3704e-008, 0.949695 )  //9
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.00903123, -0.309005, 0.951018 )  //10
DX3DVERT( -0.651165, -0.824795, 2.53846 ) DX3DVNORM( -0.313177, -0.293472, 0.903213 )  //11
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( -0.00903142, -0.587762, 0.808984 )  //12
DX3DVERT( -0.651165, -1.56885, 2.15934 ) DX3DVNORM( -0.313176, -0.558217, 0.768319 )  //13
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.0090315, -0.808984, 0.587761 )  //14
DX3DVERT( -0.651165, -2.15934, 1.56885 ) DX3DVNORM( -0.313176, -0.768319, 0.558217 )  //15
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.00903129, -0.951018, 0.309004 )  //16
DX3DVERT( -0.651165, -2.53846, 0.824794 ) DX3DVNORM( -0.313177, -0.903213, 0.293472 )  //17
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( -0.00903119, -0.999959, 1.50869e-008 )  //18
DX3DVERT( -0.651165, -2.66909, 9.70089e-008 ) DX3DVNORM( -0.313177, -0.949695, 1.97533e-008 )  //19
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( -0.00903121, -0.951018, -0.309004 )  //20
DX3DVERT( -0.651165, -2.53846, -0.824794 ) DX3DVNORM( -0.313177, -0.903213, -0.293472 )  //21
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( -0.00903143, -0.808984, -0.587762 )  //22
DX3DVERT( -0.651165, -2.15934, -1.56885 ) DX3DVNORM( -0.313176, -0.768319, -0.558217 )  //23
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.0090314, -0.587762, -0.808984 )  //24
DX3DVERT( -0.651165, -1.56885, -2.15934 ) DX3DVNORM( -0.313176, -0.558217, -0.768319 )  //25
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( -0.00903128, -0.309004, -0.951018 )  //26
DX3DVERT( -0.651165, -0.824794, -2.53846 ) DX3DVNORM( -0.313176, -0.293472, -0.903214 )  //27
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -0.00903141, 7.54344e-009, -0.999959 )  //28
DX3DVERT( -0.651165, -4.85044e-008, -2.66909 ) DX3DVNORM( -0.313177, 1.06668e-007, -0.949695 )  //29
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.00903122, 0.309005, -0.951018 )  //30
DX3DVERT( -0.651165, 0.824794, -2.53846 ) DX3DVNORM( -0.313177, 0.293472, -0.903214 )  //31
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.0090314, 0.587762, -0.808984 )  //32
DX3DVERT( -0.651165, 1.56885, -2.15934 ) DX3DVNORM( -0.313176, 0.558217, -0.768319 )  //33
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.00903159, 0.808984, -0.587762 )  //34
DX3DVERT( -0.651165, 2.15934, -1.56885 ) DX3DVNORM( -0.313176, 0.768319, -0.558217 )  //35
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.0090314, 0.951018, -0.309004 )  //36
DX3DVERT( -0.651165, 2.53846, -0.824794 ) DX3DVNORM( -0.313176, 0.903214, -0.293472 )  //37
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -0.00903151, 0.999959, -5.50671e-007 )  //38
DX3DVERT( -0.651165, 2.66909, 9.70089e-008 ) DX3DVNORM( -0.00903151, 0.999959, -5.50671e-007 )  //39
DX3DVERT( -0.895311, 2.01633, 1.46495 ) DX3DVNORM( -0.586468, 0.655281, 0.47609 )  //40
DX3DVERT( -0.895311, 2.37033, 0.770167 ) DX3DVNORM( -0.586469, 0.770329, 0.250294 )  //41
DX3DVERT( -0.895311, 1.46495, 2.01633 ) DX3DVNORM( -0.586469, 0.47609, 0.655281 )  //42
DX3DVERT( -0.895311, 0.770168, 2.37033 ) DX3DVNORM( -0.586469, 0.250295, 0.770329 )  //43
DX3DVERT( -0.895311, -4.85044e-008, 2.49232 ) DX3DVNORM( -0.586469, -1.50233e-008, 0.809972 )  //44
DX3DVERT( -0.895311, -0.770167, 2.37033 ) DX3DVNORM( -0.586469, -0.250295, 0.770329 )  //45
DX3DVERT( -0.895311, -1.46495, 2.01633 ) DX3DVNORM( -0.586469, -0.47609, 0.655281 )  //46
DX3DVERT( -0.895311, -2.01633, 1.46495 ) DX3DVNORM( -0.586469, -0.655281, 0.47609 )  //47
DX3DVERT( -0.895311, -2.37033, 0.770167 ) DX3DVNORM( -0.58647, -0.770328, 0.250295 )  //48
DX3DVERT( -0.895311, -2.49231, 9.70089e-008 ) DX3DVNORM( -0.58647, -0.809971, 2.25349e-008 )  //49
DX3DVERT( -0.895311, -2.37033, -0.770167 ) DX3DVNORM( -0.586469, -0.770329, -0.250295 )  //50
DX3DVERT( -0.895311, -2.01632, -1.46495 ) DX3DVNORM( -0.586468, -0.655281, -0.47609 )  //51
DX3DVERT( -0.895311, -1.46495, -2.01632 ) DX3DVNORM( -0.586467, -0.47609, -0.655282 )  //52
DX3DVERT( -0.895311, -0.770167, -2.37033 ) DX3DVNORM( -0.586468, -0.250295, -0.770329 )  //53
DX3DVERT( -0.895311, -4.85044e-008, -2.49231 ) DX3DVNORM( -0.586469, 1.95303e-007, -0.809972 )  //54
DX3DVERT( -0.895311, 0.770168, -2.37033 ) DX3DVNORM( -0.586469, 0.250295, -0.770329 )  //55
DX3DVERT( -0.895311, 1.46495, -2.01632 ) DX3DVNORM( -0.586468, 0.47609, -0.655281 )  //56
DX3DVERT( -0.895311, 2.01632, -1.46495 ) DX3DVNORM( -0.586467, 0.655282, -0.47609 )  //57
DX3DVERT( -0.895311, 2.37033, -0.770167 ) DX3DVNORM( -0.586469, 0.770329, -0.250295 )  //58
DX3DVERT( -0.651165, 2.66909, 9.70089e-008 ) DX3DVNORM( -0.586469, 0.809972, -2.17838e-007 )  //59
DX3DVERT( -0.895311, 2.49231, 9.70089e-008 ) DX3DVNORM( -0.586469, 0.809972, -2.17838e-007 )  //60
DX3DVERT( -0.895311, 2.37033, 0.770167 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //61
DX3DVERT( -0.895311, 2.01633, 1.46495 ) DX3DVNORM( -1, 1.27031e-008, -0 )  //62
DX3DVERT( -0.895311, 1.68027, 1.22079 ) DX3DVNORM( -0.958004, -0.231989, -0.16855 )  //63
DX3DVERT( -0.895311, 1.97528, 0.641807 ) DX3DVNORM( -0.958004, -0.272719, -0.0886117 )  //64
DX3DVERT( -0.895311, 1.46495, 2.01633 ) DX3DVNORM( -1, 2.54063e-008, -0 )  //65
DX3DVERT( -0.895311, 1.22079, 1.68027 ) DX3DVNORM( -0.958004, -0.16855, -0.231989 )  //66
DX3DVERT( -0.895311, 0.770168, 2.37033 ) DX3DVNORM( -1, 5.08125e-008, -0 )  //67
DX3DVERT( -0.895311, 0.641807, 1.97528 ) DX3DVNORM( -0.958004, -0.0886118, -0.27272 )  //68
DX3DVERT( -0.895311, -4.85044e-008, 2.49232 ) DX3DVNORM( -1, -4.9738e-014, -0 )  //69
DX3DVERT( -0.895311, -4.85044e-008, 2.07693 ) DX3DVNORM( -0.958004, 2.72763e-008, -0.286754 )  //70
DX3DVERT( -0.895311, -0.770167, 2.37033 ) DX3DVNORM( -1, 4.61853e-014, -0 )  //71
DX3DVERT( -0.895311, -0.641806, 1.97528 ) DX3DVNORM( -0.958004, 0.0886119, -0.272719 )  //72
DX3DVERT( -0.895311, -1.46495, 2.01633 ) DX3DVNORM( -1, 5.08126e-008, -0 )  //73
DX3DVERT( -0.895311, -1.22079, 1.68027 ) DX3DVNORM( -0.958004, 0.16855, -0.231989 )  //74
DX3DVERT( -0.895311, -2.01633, 1.46495 ) DX3DVNORM( -1, 2.54063e-008, -0 )  //75
DX3DVERT( -0.895311, -1.68027, 1.22079 ) DX3DVNORM( -0.958004, 0.231989, -0.16855 )  //76
DX3DVERT( -0.895311, -2.37033, 0.770167 ) DX3DVNORM( -1, 1.27032e-008, -0 )  //77
DX3DVERT( -0.895311, -1.97528, 0.641807 ) DX3DVNORM( -0.958004, 0.272719, -0.0886119 )  //78
DX3DVERT( -0.895311, -2.49231, 9.70089e-008 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //79
DX3DVERT( -0.895311, -2.07693, 9.70089e-008 ) DX3DVNORM( -0.958004, 0.286754, -0 )  //80
DX3DVERT( -0.895311, -2.37033, -0.770167 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //81
DX3DVERT( -0.895311, -1.97528, -0.641807 ) DX3DVNORM( -0.958004, 0.272719, 0.0886119 )  //82
DX3DVERT( -0.895311, -2.01632, -1.46495 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //83
DX3DVERT( -0.895311, -1.68027, -1.22079 ) DX3DVNORM( -0.958004, 0.231989, 0.16855 )  //84
DX3DVERT( -0.895311, -1.46495, -2.01632 ) DX3DVNORM( -1, -5.08125e-008, -0 )  //85
DX3DVERT( -0.895311, -1.22079, -1.68027 ) DX3DVNORM( -0.958004, 0.16855, 0.231989 )  //86
DX3DVERT( -0.895311, -0.770167, -2.37033 ) DX3DVNORM( -1, 1.27898e-013, -0 )  //87
DX3DVERT( -0.895311, -0.641806, -1.97528 ) DX3DVNORM( -0.958004, 0.088612, 0.272719 )  //88
DX3DVERT( -0.895311, -4.85044e-008, -2.49231 ) DX3DVNORM( -1, 5.08126e-008, -0 )  //89
DX3DVERT( -0.895311, -4.85044e-008, -2.07693 ) DX3DVNORM( -0.958004, 2.14314e-008, 0.286754 )  //90
DX3DVERT( -0.895311, 0.770168, -2.37033 ) DX3DVNORM( -1, 1.01625e-007, -0 )  //91
DX3DVERT( -0.895311, 0.641806, -1.97528 ) DX3DVNORM( -0.958004, -0.088612, 0.272719 )  //92
DX3DVERT( -0.895311, 1.46495, -2.01632 ) DX3DVNORM( -1, 1.01625e-007, -0 )  //93
DX3DVERT( -0.895311, 1.22079, -1.68027 ) DX3DVNORM( -0.958004, -0.16855, 0.231989 )  //94
DX3DVERT( -0.895311, 2.01632, -1.46495 ) DX3DVNORM( -1, 0, -0 )  //95
DX3DVERT( -0.895311, 1.68027, -1.22079 ) DX3DVNORM( -0.958004, -0.231989, 0.16855 )  //96
DX3DVERT( -0.895311, 2.37033, -0.770167 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //97
DX3DVERT( -0.895311, 1.97528, -0.641807 ) DX3DVNORM( -0.958004, -0.272719, 0.0886119 )  //98
DX3DVERT( -0.895311, 2.49231, 9.70089e-008 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //99
DX3DVERT( -0.895311, 2.07693, 9.70089e-008 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //100
DX3DVERT( -0.732719, 1.48072, 1.07581 ) DX3DVNORM( -0.682549, -0.591262, -0.429577 )  //101
DX3DVERT( -0.732719, 1.74069, 0.565586 ) DX3DVNORM( -0.682548, -0.695071, -0.225841 )  //102
DX3DVERT( -0.732719, 1.07581, 1.48072 ) DX3DVNORM( -0.682549, -0.429576, -0.591262 )  //103
DX3DVERT( -0.732719, 0.565586, 1.74069 ) DX3DVNORM( -0.682547, -0.225842, -0.695072 )  //104
DX3DVERT( -0.732719, -4.85044e-008, 1.83027 ) DX3DVNORM( -0.682547, 3.85821e-008, -0.730842 )  //105
DX3DVERT( -0.732719, -0.565586, 1.74069 ) DX3DVNORM( -0.682547, 0.225842, -0.695071 )  //106
DX3DVERT( -0.732719, -1.07581, 1.48072 ) DX3DVNORM( -0.682549, 0.429577, -0.591262 )  //107
DX3DVERT( -0.732719, -1.48072, 1.07581 ) DX3DVNORM( -0.682549, 0.591262, -0.429577 )  //108
DX3DVERT( -0.732719, -1.74069, 0.565586 ) DX3DVNORM( -0.682548, 0.695071, -0.225842 )  //109
DX3DVERT( -0.732719, -1.83027, 9.70089e-008 ) DX3DVNORM( -0.682548, 0.730841, -3.85821e-009 )  //110
DX3DVERT( -0.732719, -1.74069, -0.565586 ) DX3DVNORM( -0.682547, 0.695071, 0.225842 )  //111
DX3DVERT( -0.732719, -1.48072, -1.07581 ) DX3DVNORM( -0.682549, 0.591262, 0.429577 )  //112
DX3DVERT( -0.732719, -1.07581, -1.48072 ) DX3DVNORM( -0.68255, 0.429576, 0.591261 )  //113
DX3DVERT( -0.732719, -0.565586, -1.74069 ) DX3DVNORM( -0.682549, 0.225842, 0.695071 )  //114
DX3DVERT( -0.732719, -4.85044e-008, -1.83027 ) DX3DVNORM( -0.682548, 3.47239e-008, 0.730841 )  //115
DX3DVERT( -0.732719, 0.565586, -1.74069 ) DX3DVNORM( -0.682549, -0.225842, 0.69507 )  //116
DX3DVERT( -0.732719, 1.07581, -1.48072 ) DX3DVNORM( -0.68255, -0.429576, 0.591261 )  //117
DX3DVERT( -0.732719, 1.48072, -1.07581 ) DX3DVNORM( -0.682549, -0.591262, 0.429577 )  //118
DX3DVERT( -0.732719, 1.74069, -0.565586 ) DX3DVNORM( -0.682547, -0.695072, 0.225842 )  //119
DX3DVERT( -0.895311, 2.07693, 9.70089e-008 ) DX3DVNORM( -0.83492, -0.550371, 6.17004e-007 )  //120
DX3DVERT( -0.732719, 1.83027, 9.70089e-008 ) DX3DVNORM( -0.83492, -0.550371, 6.17004e-007 )  //121
DX3DVERT( -0.651165, 2.53846, -0.824794 ) DX3DVNORM( 0, 0, -0 )  //122
DX3DVERT( -0.651165, 2.66909, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //123
DX3DVERT( -0.651165, 2.53846, 0.824794 ) DX3DVNORM( 0, 0, -0 )  //124
DX3DVERT( -0.895311, 2.37033, -0.770167 ) DX3DVNORM( 0, 0, -0 )  //125
DX3DVERT( -0.895311, 2.49231, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //126
DX3DVERT( -0.895311, 2.37033, 0.770167 ) DX3DVNORM( 0, 0, -0 )  //127
DX3DVERT( -0.895311, 1.97528, -0.641807 ) DX3DVNORM( 0, 0, -0 )  //128
DX3DVERT( -0.895311, 2.07693, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //129
DX3DVERT( -0.895311, 1.97528, 0.641807 ) DX3DVNORM( 0, 0, -0 )  //130
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BASE_TIRERR___cartire_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BASE_TIRERR___cartire_0 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 131 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BASE_TIRERR___cartire_0	NULL
#define vertexbuff_KEIA_BASE_TIRERR___cartire_0	NULL
#endif




#if ((PT_KEIA_BASE_TIRERR___cartire_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIRERR___cartire_0 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BASE_TIRERR___cartire_0 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
	1, 4, 2, // 2 8
	4, 5, 2, // 3 11
	4, 6, 5, // 4 14
	6, 7, 5, // 5 17
	6, 8, 7, // 6 20
	8, 9, 7, // 7 23
	8, 10, 9, // 8 26
	10, 11, 9, // 9 29
	10, 12, 11, // 10 32
	12, 13, 11, // 11 35
	12, 14, 13, // 12 38
	14, 15, 13, // 13 41
	14, 16, 15, // 14 44
	16, 17, 15, // 15 47
	16, 18, 17, // 16 50
	18, 19, 17, // 17 53
	18, 20, 19, // 18 56
	20, 21, 19, // 19 59
	20, 22, 21, // 20 62
	22, 23, 21, // 21 65
	22, 24, 23, // 22 68
	24, 25, 23, // 23 71
	24, 26, 25, // 24 74
	26, 27, 25, // 25 77
	26, 28, 27, // 26 80
	28, 29, 27, // 27 83
	28, 30, 29, // 28 86
	30, 31, 29, // 29 89
	30, 32, 31, // 30 92
	32, 33, 31, // 31 95
	32, 34, 33, // 32 98
	34, 35, 33, // 33 101
	34, 36, 35, // 34 104
	36, 37, 35, // 35 107
	36, 38, 37, // 36 110
	38, 39, 37, // 37 113
	38, 0, 39, // 38 116
	0, 3, 39, // 39 119
	3, 2, 41, // 40 122
	2, 40, 41, // 41 125
	2, 5, 40, // 42 128
	5, 42, 40, // 43 131
	5, 7, 42, // 44 134
	7, 43, 42, // 45 137
	7, 9, 43, // 46 140
	9, 44, 43, // 47 143
	9, 11, 44, // 48 146
	11, 45, 44, // 49 149
	11, 13, 45, // 50 152
	13, 46, 45, // 51 155
	13, 15, 46, // 52 158
	15, 47, 46, // 53 161
	15, 17, 47, // 54 164
	17, 48, 47, // 55 167
	17, 19, 48, // 56 170
	19, 49, 48, // 57 173
	19, 21, 49, // 58 176
	21, 50, 49, // 59 179
	21, 23, 50, // 60 182
	23, 51, 50, // 61 185
	23, 25, 51, // 62 188
	25, 52, 51, // 63 191
	25, 27, 52, // 64 194
	27, 53, 52, // 65 197
	27, 29, 53, // 66 200
	29, 54, 53, // 67 203
	29, 31, 54, // 68 206
	31, 55, 54, // 69 209
	31, 33, 55, // 70 212
	33, 56, 55, // 71 215
	33, 35, 56, // 72 218
	35, 57, 56, // 73 221
	35, 37, 57, // 74 224
	37, 58, 57, // 75 227
	37, 59, 58, // 76 230
	59, 60, 58, // 77 233
	59, 3, 60, // 78 236
	3, 41, 60, // 79 239
	61, 62, 64, // 80 242
	62, 63, 64, // 81 245
	62, 65, 63, // 82 248
	65, 66, 63, // 83 251
	65, 67, 66, // 84 254
	67, 68, 66, // 85 257
	67, 69, 68, // 86 260
	69, 70, 68, // 87 263
	69, 71, 70, // 88 266
	71, 72, 70, // 89 269
	71, 73, 72, // 90 272
	73, 74, 72, // 91 275
	73, 75, 74, // 92 278
	75, 76, 74, // 93 281
	75, 77, 76, // 94 284
	77, 78, 76, // 95 287
	77, 79, 78, // 96 290
	79, 80, 78, // 97 293
	79, 81, 80, // 98 296
	81, 82, 80, // 99 299
	81, 83, 82, // 100 302
	83, 84, 82, // 101 305
	83, 85, 84, // 102 308
	85, 86, 84, // 103 311
	85, 87, 86, // 104 314
	87, 88, 86, // 105 317
	87, 89, 88, // 106 320
	89, 90, 88, // 107 323
	89, 91, 90, // 108 326
	91, 92, 90, // 109 329
	91, 93, 92, // 110 332
	93, 94, 92, // 111 335
	93, 95, 94, // 112 338
	95, 96, 94, // 113 341
	95, 97, 96, // 114 344
	97, 98, 96, // 115 347
	97, 99, 98, // 116 350
	99, 100, 98, // 117 353
	99, 61, 100, // 118 356
	61, 64, 100, // 119 359
	64, 63, 102, // 120 362
	63, 101, 102, // 121 365
	63, 66, 101, // 122 368
	66, 103, 101, // 123 371
	66, 68, 103, // 124 374
	68, 104, 103, // 125 377
	68, 70, 104, // 126 380
	70, 105, 104, // 127 383
	70, 72, 105, // 128 386
	72, 106, 105, // 129 389
	72, 74, 106, // 130 392
	74, 107, 106, // 131 395
	74, 76, 107, // 132 398
	76, 108, 107, // 133 401
	76, 78, 108, // 134 404
	78, 109, 108, // 135 407
	78, 80, 109, // 136 410
	80, 110, 109, // 137 413
	80, 82, 110, // 138 416
	82, 111, 110, // 139 419
	82, 84, 111, // 140 422
	84, 112, 111, // 141 425
	84, 86, 112, // 142 428
	86, 113, 112, // 143 431
	86, 88, 113, // 144 434
	88, 114, 113, // 145 437
	88, 90, 114, // 146 440
	90, 115, 114, // 147 443
	90, 92, 115, // 148 446
	92, 116, 115, // 149 449
	92, 94, 116, // 150 452
	94, 117, 116, // 151 455
	94, 96, 117, // 152 458
	96, 118, 117, // 153 461
	96, 98, 118, // 154 464
	98, 119, 118, // 155 467
	98, 120, 119, // 156 470
	120, 121, 119, // 157 473
	120, 64, 121, // 158 476
	64, 102, 121, // 159 479
	122, 123, 122, // 160 482
	123, 123, 122, // 161 485
	123, 124, 123, // 162 488
	124, 124, 123, // 163 491
	125, 126, 125, // 164 494
	126, 126, 125, // 165 497
	126, 127, 126, // 166 500
	127, 127, 126, // 167 503
	128, 129, 128, // 168 506
	129, 129, 128, // 169 509
	129, 130, 129, // 170 512
	130, 130, 129, // 171 515
DX3DINDEX_END
#endif

#else
#define index_KEIA_BASE_TIRERR___cartire_0	NULL
#endif




#if ((PT_KEIA_BASE_TIRERR___cartire_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BASE_TIRERR___cartire_0 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BASE_TIRERR___cartire_0_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BASE_TIRERR___cartire_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BASE_TIRERR___cartire_0 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BASE_TIRERR___cartire_0_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BASE_TIRERR___cartire_0_VERTEXSTRIP 	NULL
#endif






#if ((PT_KEIA_BASE_TIRERR___carwheelB_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIRERR___carwheelB_1 == PT_TRILIST ) || ((PT_KEIA_BASE_TIRERR___carwheelB_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BASE_TIRERR___carwheelB_1 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BASE_TIRERR___carwheelB_1 )
DX3DVERT( -0.732719, 1.74069, 0.565586 ) DX3DVNORM( -0.682548, -0.695071, -0.225841 )  //0
DX3DVERT( -0.732719, 1.48072, 1.07581 ) DX3DVNORM( -0.682549, -0.591262, -0.429577 )  //1
DX3DVERT( -0.676385, 1.45504, 1.05715 ) DX3DVNORM( -0.864785, -0.406242, -0.295152 )  //2
DX3DVERT( -0.676385, 1.71051, 0.555777 ) DX3DVNORM( -0.864784, -0.477567, -0.15517 )  //3
DX3DVERT( -0.732719, 1.07581, 1.48072 ) DX3DVNORM( -0.682549, -0.429576, -0.591262 )  //4
DX3DVERT( -0.676385, 1.05715, 1.45504 ) DX3DVNORM( -0.864785, -0.295151, -0.406242 )  //5
DX3DVERT( -0.732719, 0.565586, 1.74069 ) DX3DVNORM( -0.682547, -0.225842, -0.695072 )  //6
DX3DVERT( -0.676385, 0.555776, 1.71051 ) DX3DVNORM( -0.864784, -0.155171, -0.477568 )  //7
DX3DVERT( -0.732719, -4.85044e-008, 1.83027 ) DX3DVNORM( -0.682547, 3.85821e-008, -0.730842 )  //8
DX3DVERT( -0.676385, -4.85044e-008, 1.79853 ) DX3DVNORM( -0.864783, 1.30051e-008, -0.502145 )  //9
DX3DVERT( -0.732719, -0.565586, 1.74069 ) DX3DVNORM( -0.682547, 0.225842, -0.695071 )  //10
DX3DVERT( -0.676385, -0.555777, 1.71051 ) DX3DVNORM( -0.864784, 0.155171, -0.477568 )  //11
DX3DVERT( -0.732719, -1.07581, 1.48072 ) DX3DVNORM( -0.682549, 0.429577, -0.591262 )  //12
DX3DVERT( -0.676385, -1.05715, 1.45504 ) DX3DVNORM( -0.864785, 0.295152, -0.406242 )  //13
DX3DVERT( -0.732719, -1.48072, 1.07581 ) DX3DVNORM( -0.682549, 0.591262, -0.429577 )  //14
DX3DVERT( -0.676385, -1.45504, 1.05715 ) DX3DVNORM( -0.864784, 0.406242, -0.295152 )  //15
DX3DVERT( -0.732719, -1.74069, 0.565586 ) DX3DVNORM( -0.682548, 0.695071, -0.225842 )  //16
DX3DVERT( -0.676385, -1.71051, 0.555777 ) DX3DVNORM( -0.864784, 0.477568, -0.155171 )  //17
DX3DVERT( -0.732719, -1.83027, 9.70089e-008 ) DX3DVNORM( -0.682548, 0.730841, -3.85821e-009 )  //18
DX3DVERT( -0.676385, -1.79853, 9.70089e-008 ) DX3DVNORM( -0.864784, 0.502144, -4.33502e-009 )  //19
DX3DVERT( -0.732719, -1.74069, -0.565586 ) DX3DVNORM( -0.682547, 0.695071, 0.225842 )  //20
DX3DVERT( -0.676385, -1.71051, -0.555777 ) DX3DVNORM( -0.864784, 0.477568, 0.155171 )  //21
DX3DVERT( -0.732719, -1.48072, -1.07581 ) DX3DVNORM( -0.682549, 0.591262, 0.429577 )  //22
DX3DVERT( -0.676385, -1.45504, -1.05715 ) DX3DVNORM( -0.864785, 0.406242, 0.295152 )  //23
DX3DVERT( -0.732719, -1.07581, -1.48072 ) DX3DVNORM( -0.68255, 0.429576, 0.591261 )  //24
DX3DVERT( -0.676385, -1.05715, -1.45504 ) DX3DVNORM( -0.864786, 0.295151, 0.406241 )  //25
DX3DVERT( -0.732719, -0.565586, -1.74069 ) DX3DVNORM( -0.682549, 0.225842, 0.695071 )  //26
DX3DVERT( -0.676385, -0.555776, -1.71051 ) DX3DVNORM( -0.864785, 0.155171, 0.477567 )  //27
DX3DVERT( -0.732719, -4.85044e-008, -1.83027 ) DX3DVNORM( -0.682548, 3.47239e-008, 0.730841 )  //28
DX3DVERT( -0.676385, -4.85044e-008, -1.79853 ) DX3DVNORM( -0.864784, 4.33502e-008, 0.502144 )  //29
DX3DVERT( -0.732719, 0.565586, -1.74069 ) DX3DVNORM( -0.682549, -0.225842, 0.69507 )  //30
DX3DVERT( -0.676385, 0.555776, -1.71051 ) DX3DVNORM( -0.864785, -0.15517, 0.477566 )  //31
DX3DVERT( -0.732719, 1.07581, -1.48072 ) DX3DVNORM( -0.68255, -0.429576, 0.591261 )  //32
DX3DVERT( -0.676385, 1.05715, -1.45504 ) DX3DVNORM( -0.864785, -0.295151, 0.406241 )  //33
DX3DVERT( -0.732719, 1.48072, -1.07581 ) DX3DVNORM( -0.682549, -0.591262, 0.429577 )  //34
DX3DVERT( -0.676385, 1.45504, -1.05715 ) DX3DVNORM( -0.864785, -0.406242, 0.295152 )  //35
DX3DVERT( -0.732719, 1.74069, -0.565586 ) DX3DVNORM( -0.682547, -0.695072, 0.225842 )  //36
DX3DVERT( -0.676385, 1.71051, -0.555777 ) DX3DVNORM( -0.864784, -0.477568, 0.155171 )  //37
DX3DVERT( -0.732719, 1.83027, 9.70089e-008 ) DX3DVNORM( -0.490909, -0.871211, 6.54342e-007 )  //38
DX3DVERT( -0.676385, 1.79853, 9.70089e-008 ) DX3DVNORM( -0.490909, -0.871211, 6.54342e-007 )  //39
DX3DVERT( -0.676385, 0.370518, 1.14034 ) DX3DVNORM( -0.994282, -0.0330002, -0.101564 )  //40
DX3DVERT( -0.676385, 0.704767, 0.970029 ) DX3DVNORM( -0.994282, -0.0627699, -0.0863957 )  //41
DX3DVERT( -0.676385, -4.85044e-008, 1.19902 ) DX3DVNORM( -0.994282, 6.55863e-009, -0.106791 )  //42
DX3DVERT( -0.676385, -0.970028, 0.704767 ) DX3DVNORM( -0.994282, 0.0863957, -0.06277 )  //43
DX3DVERT( -0.676385, -0.704767, 0.970029 ) DX3DVNORM( -0.994282, 0.0627699, -0.0863957 )  //44
DX3DVERT( -0.676385, -1.14034, 0.370518 ) DX3DVNORM( -0.994282, 0.101564, -0.0330001 )  //45
DX3DVERT( -0.676385, -0.970028, -0.704767 ) DX3DVNORM( -0.994282, 0.0863957, 0.06277 )  //46
DX3DVERT( -0.676385, -1.14034, -0.370518 ) DX3DVNORM( -0.994282, 0.101564, 0.0330002 )  //47
DX3DVERT( -0.676385, -0.704767, -0.970028 ) DX3DVNORM( -0.994282, 0.06277, 0.0863956 )  //48
DX3DVERT( -0.676385, 0.370518, -1.14034 ) DX3DVNORM( -0.994282, -0.0330001, 0.101564 )  //49
DX3DVERT( -0.676385, -4.85044e-008, -1.19902 ) DX3DVNORM( -0.994282, 6.55863e-009, 0.106791 )  //50
DX3DVERT( -0.676385, 0.704767, -0.970028 ) DX3DVNORM( -0.994282, -0.06277, 0.0863956 )  //51
DX3DVERT( -0.676385, 1.79853, 9.70089e-008 ) DX3DVNORM( -1, -2.68333e-008, -0 )  //52
DX3DVERT( -0.676385, 1.19902, 9.70089e-008 ) DX3DVNORM( -1, -2.68333e-008, -0 )  //53
DX3DVERT( -0.676385, 1.14034, -0.370518 ) DX3DVNORM( -0.994282, -0.101564, 0.0330001 )  //54
DX3DVERT( -0.676385, 1.14034, 0.370518 ) DX3DVNORM( -0.994282, -0.101564, -0.0330001 )  //55
DX3DVERT( -0.676385, 0.970028, 0.704767 ) DX3DVNORM( -0.994282, -0.0863956, -0.06277 )  //56
DX3DVERT( -0.415742, -4.85044e-008, 9.70089e-008 ) DX3DVNORM( -1, 2.36496e-008, -1.46856e-008 )  //57
DX3DVERT( -0.676385, -0.370518, 1.14034 ) DX3DVNORM( -0.994282, 0.0330002, -0.101564 )  //58
DX3DVERT( -0.676385, -1.19902, 9.70089e-008 ) DX3DVNORM( -0.994282, 0.106791, -1.87389e-009 )  //59
DX3DVERT( -0.676385, -0.370518, -1.14034 ) DX3DVNORM( -0.994282, 0.0330001, 0.101564 )  //60
DX3DVERT( -0.676385, 0.970028, -0.704767 ) DX3DVNORM( -0.994282, -0.0863956, 0.0627701 )  //61
DX3DVERT( -0.676385, 1.19902, 9.70089e-008 ) DX3DVNORM( -0.977178, -0.21242, 6.15021e-008 )  //62
DX3DVERT( -0.732719, 1.74069, -0.565586 ) DX3DVNORM( 0, 0, -0 )  //63
DX3DVERT( -0.732719, 1.83027, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //64
DX3DVERT( -0.732719, 1.74069, 0.565586 ) DX3DVNORM( 0, 0, -0 )  //65
DX3DVERT( -0.676385, 1.71051, -0.555777 ) DX3DVNORM( 0, 0, -0 )  //66
DX3DVERT( -0.676385, 1.79853, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //67
DX3DVERT( -0.676385, 1.71051, 0.555777 ) DX3DVNORM( 0, 0, -0 )  //68
DX3DVERT( -0.676385, 1.14034, -0.370518 ) DX3DVNORM( 0, 0, -0 )  //69
DX3DVERT( -0.676385, 1.19902, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //70
DX3DVERT( -0.676385, 1.14034, 0.370518 ) DX3DVNORM( 0, 0, -0 )  //71
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BASE_TIRERR___carwheelB_1 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BASE_TIRERR___carwheelB_1 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 72 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BASE_TIRERR___carwheelB_1	NULL
#define vertexbuff_KEIA_BASE_TIRERR___carwheelB_1	NULL
#endif




#if ((PT_KEIA_BASE_TIRERR___carwheelB_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIRERR___carwheelB_1 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BASE_TIRERR___carwheelB_1 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
	1, 4, 2, // 2 8
	4, 5, 2, // 3 11
	4, 6, 5, // 4 14
	6, 7, 5, // 5 17
	6, 8, 7, // 6 20
	8, 9, 7, // 7 23
	8, 10, 9, // 8 26
	10, 11, 9, // 9 29
	10, 12, 11, // 10 32
	12, 13, 11, // 11 35
	12, 14, 13, // 12 38
	14, 15, 13, // 13 41
	14, 16, 15, // 14 44
	16, 17, 15, // 15 47
	16, 18, 17, // 16 50
	18, 19, 17, // 17 53
	18, 20, 19, // 18 56
	20, 21, 19, // 19 59
	20, 22, 21, // 20 62
	22, 23, 21, // 21 65
	22, 24, 23, // 22 68
	24, 25, 23, // 23 71
	24, 26, 25, // 24 74
	26, 27, 25, // 25 77
	26, 28, 27, // 26 80
	28, 29, 27, // 27 83
	28, 30, 29, // 28 86
	30, 31, 29, // 29 89
	30, 32, 31, // 30 92
	32, 33, 31, // 31 95
	32, 34, 33, // 32 98
	34, 35, 33, // 33 101
	34, 36, 35, // 34 104
	36, 37, 35, // 35 107
	36, 38, 37, // 36 110
	38, 39, 37, // 37 113
	38, 0, 39, // 38 116
	0, 3, 39, // 39 119
	5, 7, 41, // 40 122
	7, 40, 41, // 41 125
	7, 9, 40, // 42 128
	9, 42, 40, // 43 131
	13, 15, 44, // 44 134
	15, 43, 44, // 45 137
	15, 17, 43, // 46 140
	17, 45, 43, // 47 143
	21, 23, 47, // 48 146
	23, 46, 47, // 49 149
	23, 25, 46, // 50 152
	25, 48, 46, // 51 155
	29, 31, 50, // 52 158
	31, 49, 50, // 53 161
	31, 33, 49, // 54 164
	33, 51, 49, // 55 167
	37, 52, 54, // 56 170
	52, 53, 54, // 57 173
	52, 3, 53, // 58 176
	3, 55, 53, // 59 179
	55, 56, 57, // 60 182
	56, 41, 57, // 61 185
	41, 40, 57, // 62 188
	40, 42, 57, // 63 191
	42, 58, 57, // 64 194
	58, 44, 57, // 65 197
	44, 43, 57, // 66 200
	43, 45, 57, // 67 203
	45, 59, 57, // 68 206
	59, 47, 57, // 69 209
	47, 46, 57, // 70 212
	46, 48, 57, // 71 215
	48, 60, 57, // 72 218
	60, 50, 57, // 73 221
	50, 49, 57, // 74 224
	49, 51, 57, // 75 227
	51, 61, 57, // 76 230
	61, 54, 57, // 77 233
	54, 62, 57, // 78 236
	62, 55, 57, // 79 239
	63, 64, 63, // 80 242
	64, 64, 63, // 81 245
	64, 65, 64, // 82 248
	65, 65, 64, // 83 251
	66, 67, 66, // 84 254
	67, 67, 66, // 85 257
	67, 68, 67, // 86 260
	68, 68, 67, // 87 263
	69, 70, 69, // 88 266
	70, 70, 69, // 89 269
	70, 71, 70, // 90 272
	71, 71, 70, // 91 275
DX3DINDEX_END
#endif

#else
#define index_KEIA_BASE_TIRERR___carwheelB_1	NULL
#endif




#if ((PT_KEIA_BASE_TIRERR___carwheelB_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BASE_TIRERR___carwheelB_1 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BASE_TIRERR___carwheelB_1_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BASE_TIRERR___carwheelB_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BASE_TIRERR___carwheelB_1 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BASE_TIRERR___carwheelB_1_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BASE_TIRERR___carwheelB_1_VERTEXSTRIP 	NULL
#endif






#if ((PT_KEIA_BASE_TIRERR___carbodyblack_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIRERR___carbodyblack_2 == PT_TRILIST ) || ((PT_KEIA_BASE_TIRERR___carbodyblack_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BASE_TIRERR___carbodyblack_2 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BASE_TIRERR___carbodyblack_2 )
DX3DVERT( -0.676385, 1.71051, 0.555777 ) DX3DVNORM( -0.864784, -0.477567, -0.15517 )  //0
DX3DVERT( -0.676385, 1.45504, 1.05715 ) DX3DVNORM( -0.864785, -0.406242, -0.295152 )  //1
DX3DVERT( -0.676385, 0.970028, 0.704767 ) DX3DVNORM( -0.994282, -0.0863956, -0.06277 )  //2
DX3DVERT( -0.676385, 1.14034, 0.370518 ) DX3DVNORM( -0.994282, -0.101564, -0.0330001 )  //3
DX3DVERT( -0.676385, 1.05715, 1.45504 ) DX3DVNORM( -0.864785, -0.295151, -0.406242 )  //4
DX3DVERT( -0.676385, 0.704767, 0.970029 ) DX3DVNORM( -0.994282, -0.0627699, -0.0863957 )  //5
DX3DVERT( -0.676385, -4.85044e-008, 1.79853 ) DX3DVNORM( -0.864783, 1.30051e-008, -0.502145 )  //6
DX3DVERT( -0.676385, -0.555777, 1.71051 ) DX3DVNORM( -0.864784, 0.155171, -0.477568 )  //7
DX3DVERT( -0.676385, -0.370518, 1.14034 ) DX3DVNORM( -0.994282, 0.0330002, -0.101564 )  //8
DX3DVERT( -0.676385, -4.85044e-008, 1.19902 ) DX3DVNORM( -0.994282, 6.55863e-009, -0.106791 )  //9
DX3DVERT( -0.676385, -1.05715, 1.45504 ) DX3DVNORM( -0.864785, 0.295152, -0.406242 )  //10
DX3DVERT( -0.676385, -0.704767, 0.970029 ) DX3DVNORM( -0.994282, 0.0627699, -0.0863957 )  //11
DX3DVERT( -0.676385, -1.71051, 0.555777 ) DX3DVNORM( -0.864784, 0.477568, -0.155171 )  //12
DX3DVERT( -0.676385, -1.79853, 9.70089e-008 ) DX3DVNORM( -0.864784, 0.502144, -4.33502e-009 )  //13
DX3DVERT( -0.676385, -1.19902, 9.70089e-008 ) DX3DVNORM( -0.994282, 0.106791, -1.87389e-009 )  //14
DX3DVERT( -0.676385, -1.14034, 0.370518 ) DX3DVNORM( -0.994282, 0.101564, -0.0330001 )  //15
DX3DVERT( -0.676385, -1.71051, -0.555777 ) DX3DVNORM( -0.864784, 0.477568, 0.155171 )  //16
DX3DVERT( -0.676385, -1.14034, -0.370518 ) DX3DVNORM( -0.994282, 0.101564, 0.0330002 )  //17
DX3DVERT( -0.676385, -1.05715, -1.45504 ) DX3DVNORM( -0.864786, 0.295151, 0.406241 )  //18
DX3DVERT( -0.676385, -0.555776, -1.71051 ) DX3DVNORM( -0.864785, 0.155171, 0.477567 )  //19
DX3DVERT( -0.676385, -0.370518, -1.14034 ) DX3DVNORM( -0.994282, 0.0330001, 0.101564 )  //20
DX3DVERT( -0.676385, -0.704767, -0.970028 ) DX3DVNORM( -0.994282, 0.06277, 0.0863956 )  //21
DX3DVERT( -0.676385, -4.85044e-008, -1.79853 ) DX3DVNORM( -0.864784, 4.33502e-008, 0.502144 )  //22
DX3DVERT( -0.676385, -4.85044e-008, -1.19902 ) DX3DVNORM( -0.994282, 6.55863e-009, 0.106791 )  //23
DX3DVERT( -0.676385, 1.05715, -1.45504 ) DX3DVNORM( -0.864785, -0.295151, 0.406241 )  //24
DX3DVERT( -0.676385, 1.45504, -1.05715 ) DX3DVNORM( -0.864785, -0.406242, 0.295152 )  //25
DX3DVERT( -0.676385, 0.970028, -0.704767 ) DX3DVNORM( -0.994282, -0.0863956, 0.0627701 )  //26
DX3DVERT( -0.676385, 0.704767, -0.970028 ) DX3DVNORM( -0.994282, -0.06277, 0.0863956 )  //27
DX3DVERT( -0.676385, 1.71051, -0.555777 ) DX3DVNORM( -0.864784, -0.477568, 0.155171 )  //28
DX3DVERT( -0.676385, 1.14034, -0.370518 ) DX3DVNORM( -0.994282, -0.101564, 0.0330001 )  //29
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( 0, 0, -0 )  //30
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( 0, 0, -0 )  //31
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( 0, 0, -0 )  //32
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( 0, 0, -0 )  //33
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( 0, 0, -0 )  //34
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( 0, 0, -0 )  //35
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( 0, 0, -0 )  //36
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( 0, 0, -0 )  //37
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( 0, 0, -0 )  //38
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( 0, 2.29447e-014, -0 )  //39
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( 0, 0, -0 )  //40
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( 0, 0, -0 )  //41
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( 0, 0, -0 )  //42
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( 0, 0, -0 )  //43
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( 0, 0, -0 )  //44
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( 0, 0, -0 )  //45
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( 0, 0, -0 )  //46
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( 0, 0, -0 )  //47
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( 0, 0, -0 )  //48
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( 0, 2.29447e-014, -0 )  //49
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.99999, -0.00403789, -0.00205869 )  //50
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( -0.99999, -0.00403789, -0.00205869 )  //51
DX3DVERT( 0.807322, 2.16494, 1.57292 ) DX3DVNORM( -0.99999, -0.00403789, -0.00205869 )  //52
DX3DVERT( 0.807322, 2.54504, 0.826932 ) DX3DVNORM( -0.99999, -0.00403789, -0.00205869 )  //53
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( -0.99999, -0.00320476, -0.00320651 )  //54
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.99999, -0.00320476, -0.00320651 )  //55
DX3DVERT( 0.807322, 1.57292, 2.16494 ) DX3DVNORM( -0.99999, -0.00320476, -0.00320651 )  //56
DX3DVERT( 0.807322, 2.16494, 1.57292 ) DX3DVNORM( -0.99999, -0.00320476, -0.00320651 )  //57
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.99999, -0.00205486, -0.00404004 )  //58
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.99999, -0.00205486, -0.00404004 )  //59
DX3DVERT( 0.807322, 0.826932, 2.54503 ) DX3DVNORM( -0.99999, -0.00205486, -0.00404004 )  //60
DX3DVERT( 0.807322, 1.57292, 2.16494 ) DX3DVNORM( -0.99999, -0.00205486, -0.00404004 )  //61
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.99999, -0.000709209, -0.00447809 )  //62
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( -0.99999, -0.000709209, -0.00447809 )  //63
DX3DVERT( 0.807322, -4.85044e-008, 2.67601 ) DX3DVNORM( -0.99999, -0.000709209, -0.00447809 )  //64
DX3DVERT( 0.807322, 0.826932, 2.54503 ) DX3DVNORM( -0.99999, -0.000709209, -0.00447809 )  //65
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( -0.99999, 0.000709337, -0.00447889 )  //66
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.99999, 0.000709337, -0.00447889 )  //67
DX3DVERT( 0.807322, -0.826932, 2.54504 ) DX3DVNORM( -0.99999, 0.000709337, -0.00447889 )  //68
DX3DVERT( 0.807322, -4.85044e-008, 2.67601 ) DX3DVNORM( -0.99999, 0.000709337, -0.00447889 )  //69
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.99999, 0.00205336, -0.00404044 )  //70
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( -0.99999, 0.00205336, -0.00404044 )  //71
DX3DVERT( 0.807322, -1.57292, 2.16494 ) DX3DVNORM( -0.99999, 0.00205336, -0.00404044 )  //72
DX3DVERT( 0.807322, -0.826932, 2.54504 ) DX3DVNORM( -0.99999, 0.00205336, -0.00404044 )  //73
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( -0.99999, 0.0032051, -0.00320296 )  //74
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.99999, 0.0032051, -0.00320296 )  //75
DX3DVERT( 0.807322, -2.16494, 1.57292 ) DX3DVNORM( -0.99999, 0.0032051, -0.00320296 )  //76
DX3DVERT( 0.807322, -1.57292, 2.16494 ) DX3DVNORM( -0.99999, 0.0032051, -0.00320296 )  //77
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.99999, 0.00404322, -0.00205631 )  //78
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.99999, 0.00404322, -0.00205631 )  //79
DX3DVERT( 0.807322, -2.54503, 0.826932 ) DX3DVNORM( -0.99999, 0.00404322, -0.00205631 )  //80
DX3DVERT( 0.807322, -2.16494, 1.57292 ) DX3DVNORM( -0.99999, 0.00404322, -0.00205631 )  //81
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.99999, 0.00447931, -0.000709303 )  //82
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( -0.99999, 0.00447931, -0.000709303 )  //83
DX3DVERT( 0.807322, -2.67601, 9.70089e-008 ) DX3DVNORM( -0.99999, 0.00447931, -0.000709303 )  //84
DX3DVERT( 0.807322, -2.54503, 0.826932 ) DX3DVNORM( -0.99999, 0.00447931, -0.000709303 )  //85
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( -0.99999, 0.00448858, 0.000709304 )  //86
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( -0.99999, 0.00448858, 0.000709304 )  //87
DX3DVERT( 0.807322, -2.54503, -0.826932 ) DX3DVNORM( -0.99999, 0.00448858, 0.000709304 )  //88
DX3DVERT( 0.807322, -2.67601, 9.70089e-008 ) DX3DVNORM( -0.99999, 0.00448858, 0.000709304 )  //89
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( -0.99999, 0.00403308, 0.0020585 )  //90
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( -0.99999, 0.00403308, 0.0020585 )  //91
DX3DVERT( 0.807322, -2.16494, -1.57292 ) DX3DVNORM( -0.99999, 0.00403308, 0.0020585 )  //92
DX3DVERT( 0.807322, -2.54503, -0.826932 ) DX3DVNORM( -0.99999, 0.00403308, 0.0020585 )  //93
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( -0.99999, 0.00320682, 0.00320628 )  //94
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.99999, 0.00320682, 0.00320628 )  //95
DX3DVERT( 0.807322, -1.57292, -2.16493 ) DX3DVNORM( -0.99999, 0.00320682, 0.00320628 )  //96
DX3DVERT( 0.807322, -2.16494, -1.57292 ) DX3DVNORM( -0.99999, 0.00320682, 0.00320628 )  //97
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.99999, 0.00205542, 0.00403597 )  //98
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( -0.99999, 0.00205542, 0.00403597 )  //99
DX3DVERT( 0.807322, -0.826932, -2.54504 ) DX3DVNORM( -0.99999, 0.00205542, 0.00403597 )  //100
DX3DVERT( 0.807322, -1.57292, -2.16493 ) DX3DVNORM( -0.99999, 0.00205542, 0.00403597 )  //101
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( -0.99999, 0.000709175, 0.00447423 )  //102
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -0.99999, 0.000709175, 0.00447423 )  //103
DX3DVERT( 0.807322, -4.85044e-008, -2.67601 ) DX3DVNORM( -0.99999, 0.000709175, 0.00447423 )  //104
DX3DVERT( 0.807322, -0.826932, -2.54504 ) DX3DVNORM( -0.99999, 0.000709175, 0.00447423 )  //105
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -0.99999, -0.000709885, 0.00447474 )  //106
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.99999, -0.000709885, 0.00447474 )  //107
DX3DVERT( 0.807322, 0.826932, -2.54504 ) DX3DVNORM( -0.99999, -0.000709885, 0.00447474 )  //108
DX3DVERT( 0.807322, -4.85044e-008, -2.67601 ) DX3DVNORM( -0.99999, -0.000709885, 0.00447474 )  //109
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.99999, -0.0020405, 0.00400667 )  //110
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.99999, -0.0020405, 0.00400667 )  //111
DX3DVERT( 0.807322, 1.57292, -2.16494 ) DX3DVNORM( -0.99999, -0.0020405, 0.00400667 )  //112
DX3DVERT( 0.807322, 0.826932, -2.54504 ) DX3DVNORM( -0.99999, -0.0020405, 0.00400667 )  //113
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.99999, -0.00318311, 0.00317948 )  //114
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.99999, -0.00318311, 0.00317948 )  //115
DX3DVERT( 0.807322, 2.16494, -1.57292 ) DX3DVNORM( -0.99999, -0.00318311, 0.00317948 )  //116
DX3DVERT( 0.807322, 1.57292, -2.16494 ) DX3DVNORM( -0.99999, -0.00318311, 0.00317948 )  //117
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.99999, -0.00403532, 0.00205632 )  //118
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.99999, -0.00403532, 0.00205632 )  //119
DX3DVERT( 0.807322, 2.54503, -0.826932 ) DX3DVNORM( -0.99999, -0.00403532, 0.00205632 )  //120
DX3DVERT( 0.807322, 2.16494, -1.57292 ) DX3DVNORM( -0.99999, -0.00403532, 0.00205632 )  //121
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.99999, -0.00448358, 0.000709277 )  //122
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -0.99999, -0.00448358, 0.000709277 )  //123
DX3DVERT( 0.807322, 2.67601, 9.70089e-008 ) DX3DVNORM( -0.99999, -0.00448358, 0.000709277 )  //124
DX3DVERT( 0.807322, 2.54503, -0.826932 ) DX3DVNORM( -0.99999, -0.00448358, 0.000709277 )  //125
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -0.99999, -0.00447732, -0.000709335 )  //126
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.99999, -0.00447732, -0.000709335 )  //127
DX3DVERT( 0.807322, 2.54504, 0.826932 ) DX3DVNORM( -0.99999, -0.00447732, -0.000709335 )  //128
DX3DVERT( 0.807322, 2.67601, 9.70089e-008 ) DX3DVNORM( -0.99999, -0.00447732, -0.000709335 )  //129
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.000205232, -0.309088, 0.951033 )  //130
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.000205232, -0.309088, 0.951033 )  //131
DX3DVERT( 0.807322, 2.54504, 0.826932 ) DX3DVNORM( -0.000205232, -0.309088, 0.951033 )  //132
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( 0.0022658, -0.587692, 0.809081 )  //133
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.0022658, -0.587692, 0.809081 )  //134
DX3DVERT( 0.807322, 2.16494, 1.57292 ) DX3DVNORM( 0.0022658, -0.587692, 0.809081 )  //135
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.997855, -0.0583282, -0.0297197 )  //136
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( -0.997855, -0.0583282, -0.0297197 )  //137
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0583282, -0.0297197 )  //138
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.00109155, -0.809041, 0.58775 )  //139
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00109155, -0.809041, 0.58775 )  //140
DX3DVERT( 0.807322, 1.57292, 2.16494 ) DX3DVNORM( -0.00109155, -0.809041, 0.58775 )  //141
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( -0.997855, -0.0462896, -0.0462896 )  //142
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.997855, -0.0462896, -0.0462896 )  //143
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0462896, -0.0462896 )  //144
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.000905487, -0.951071, 0.308971 )  //145
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.000905487, -0.951071, 0.308971 )  //146
DX3DVERT( 0.807322, 0.826932, 2.54503 ) DX3DVNORM( -0.000905487, -0.951071, 0.308971 )  //147
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.997855, -0.0297196, -0.0583283 )  //148
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.997855, -0.0297196, -0.0583283 )  //149
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0297196, -0.0583283 )  //150
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( 6.57274e-007, -1, 2.94362e-009 )  //151
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 6.57274e-007, -1, 2.94362e-009 )  //152
DX3DVERT( 0.807322, -4.85044e-008, 2.67601 ) DX3DVNORM( 6.57274e-007, -1, 2.94362e-009 )  //153
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.997855, -0.0102408, -0.0646574 )  //154
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( -0.997855, -0.0102408, -0.0646574 )  //155
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0102408, -0.0646574 )  //156
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.00100501, -0.951042, -0.30906 )  //157
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00100501, -0.951042, -0.30906 )  //158
DX3DVERT( 0.807322, -0.826932, 2.54504 ) DX3DVNORM( -0.00100501, -0.951042, -0.30906 )  //159
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( -0.997855, 0.0102408, -0.0646574 )  //160
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.997855, 0.0102408, -0.0646574 )  //161
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0102408, -0.0646574 )  //162
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( 3.86533e-005, -0.809, -0.587809 )  //163
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 3.86533e-005, -0.809, -0.587809 )  //164
DX3DVERT( 0.807322, -1.57292, 2.16494 ) DX3DVNORM( 3.86533e-005, -0.809, -0.587809 )  //165
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.997855, 0.0297197, -0.0583283 )  //166
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( -0.997855, 0.0297197, -0.0583283 )  //167
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0297197, -0.0583283 )  //168
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.00229266, -0.587827, -0.808983 )  //169
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00229266, -0.587827, -0.808983 )  //170
DX3DVERT( 0.807322, -2.16494, 1.57292 ) DX3DVNORM( -0.00229266, -0.587827, -0.808983 )  //171
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( -0.997855, 0.0462895, -0.0462896 )  //172
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.997855, 0.0462895, -0.0462896 )  //173
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0462895, -0.0462896 )  //174
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.000413168, -0.309045, -0.951047 )  //175
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.000413168, -0.309045, -0.951047 )  //176
DX3DVERT( 0.807322, -2.54503, 0.826932 ) DX3DVNORM( -0.000413168, -0.309045, -0.951047 )  //177
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.997855, 0.0583282, -0.0297197 )  //178
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.997855, 0.0583282, -0.0297197 )  //179
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0583282, -0.0297197 )  //180
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( 6.57345e-007, -2.94888e-009, -1 )  //181
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 6.57345e-007, -2.94888e-009, -1 )  //182
DX3DVERT( 0.807322, -2.67601, 9.70089e-008 ) DX3DVNORM( 6.57345e-007, -2.94888e-009, -1 )  //183
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.997855, 0.0646574, -0.0102407 )  //184
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( -0.997855, 0.0646574, -0.0102407 )  //185
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0646574, -0.0102407 )  //186
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( 0.000881559, 0.309004, -0.95106 )  //187
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.000881559, 0.309004, -0.95106 )  //188
DX3DVERT( 0.807322, -2.54503, -0.826932 ) DX3DVNORM( 0.000881559, 0.309004, -0.95106 )  //189
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( -0.997855, 0.0646574, 0.0102407 )  //190
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( -0.997855, 0.0646574, 0.0102407 )  //191
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0646574, 0.0102407 )  //192
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( 0.000601854, 0.587748, -0.809044 )  //193
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.000601854, 0.587748, -0.809044 )  //194
DX3DVERT( 0.807322, -2.16494, -1.57292 ) DX3DVNORM( 0.000601854, 0.587748, -0.809044 )  //195
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( -0.997855, 0.0583282, 0.0297197 )  //196
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( -0.997855, 0.0583282, 0.0297197 )  //197
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0583282, 0.0297197 )  //198
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.00126643, 0.808994, -0.587815 )  //199
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00126643, 0.808994, -0.587815 )  //200
DX3DVERT( 0.807322, -1.57292, -2.16493 ) DX3DVNORM( -0.00126643, 0.808994, -0.587815 )  //201
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( -0.997855, 0.0462895, 0.0462896 )  //202
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.997855, 0.0462895, 0.0462896 )  //203
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0462895, 0.0462896 )  //204
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( 0.00143018, 0.951022, -0.309121 )  //205
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.00143018, 0.951022, -0.309121 )  //206
DX3DVERT( 0.807322, -0.826932, -2.54504 ) DX3DVNORM( 0.00143018, 0.951022, -0.309121 )  //207
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.997855, 0.0297197, 0.0583283 )  //208
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( -0.997855, 0.0297197, 0.0583283 )  //209
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0297197, 0.0583283 )  //210
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -6.57365e-007, 1, 2.94415e-009 )  //211
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -6.57365e-007, 1, 2.94415e-009 )  //212
DX3DVERT( 0.807322, -4.85044e-008, -2.67601 ) DX3DVNORM( -6.57365e-007, 1, 2.94415e-009 )  //213
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( -0.997855, 0.0102408, 0.0646574 )  //214
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -0.997855, 0.0102408, 0.0646574 )  //215
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0102408, 0.0646574 )  //216
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.00201088, 0.951027, 0.309102 )  //217
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00201088, 0.951027, 0.309102 )  //218
DX3DVERT( 0.807322, 0.826932, -2.54504 ) DX3DVNORM( -0.00201088, 0.951027, 0.309102 )  //219
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -0.997855, -0.0102408, 0.0646574 )  //220
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.997855, -0.0102408, 0.0646574 )  //221
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0102408, 0.0646574 )  //222
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.0013701, 0.808891, 0.587958 )  //223
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.0013701, 0.808891, 0.587958 )  //224
DX3DVERT( 0.807322, 1.57292, -2.16494 ) DX3DVNORM( -0.0013701, 0.808891, 0.587958 )  //225
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.997855, -0.0297197, 0.0583283 )  //226
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.997855, -0.0297197, 0.0583283 )  //227
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0297197, 0.0583283 )  //228
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.00421282, 0.587463, 0.80924 )  //229
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00421282, 0.587463, 0.80924 )  //230
DX3DVERT( 0.807322, 2.16494, -1.57292 ) DX3DVNORM( -0.00421282, 0.587463, 0.80924 )  //231
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.997855, -0.0462895, 0.0462896 )  //232
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.997855, -0.0462895, 0.0462896 )  //233
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0462895, 0.0462896 )  //234
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.000799616, 0.308986, 0.951066 )  //235
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.000799616, 0.308986, 0.951066 )  //236
DX3DVERT( 0.807322, 2.54503, -0.826932 ) DX3DVNORM( -0.000799616, 0.308986, 0.951066 )  //237
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.997855, -0.0583282, 0.0297197 )  //238
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.997855, -0.0583282, 0.0297197 )  //239
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0583282, 0.0297197 )  //240
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -6.57372e-007, -2.94871e-009, 1 )  //241
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -6.57372e-007, -2.94871e-009, 1 )  //242
DX3DVERT( 0.807322, 2.67601, 9.70089e-008 ) DX3DVNORM( -6.57372e-007, -2.94871e-009, 1 )  //243
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.997855, -0.0646574, 0.0102407 )  //244
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -0.997855, -0.0646574, 0.0102407 )  //245
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0646574, 0.0102407 )  //246
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -0.997855, -0.0646574, -0.0102407 )  //247
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.997855, -0.0646574, -0.0102407 )  //248
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0646574, -0.0102407 )  //249
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0, 0, -0 )  //250
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( 0.997855, 0.0583281, 0.0297197 )  //251
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( 0.997855, 0.0583281, 0.0297197 )  //252
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0583281, 0.0297197 )  //253
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( 0.997855, 0.0462896, 0.0462896 )  //254
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( 0.997855, 0.0462896, 0.0462896 )  //255
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0462896, 0.0462896 )  //256
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( 0.997855, 0.0297197, 0.0583283 )  //257
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( 0.997855, 0.0297197, 0.0583283 )  //258
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0297197, 0.0583283 )  //259
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( 0.997855, 0.0102408, 0.0646574 )  //260
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( 0.997855, 0.0102408, 0.0646574 )  //261
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0102408, 0.0646574 )  //262
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( 0.997855, -0.0102408, 0.0646574 )  //263
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( 0.997855, -0.0102408, 0.0646574 )  //264
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0102408, 0.0646574 )  //265
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( 0.997855, -0.0297197, 0.0583283 )  //266
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( 0.997855, -0.0297197, 0.0583283 )  //267
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0297197, 0.0583283 )  //268
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( 0.997855, -0.0462895, 0.0462896 )  //269
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( 0.997855, -0.0462895, 0.0462896 )  //270
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0462895, 0.0462896 )  //271
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( 0.997855, -0.0583282, 0.0297197 )  //272
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( 0.997855, -0.0583282, 0.0297197 )  //273
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0583282, 0.0297197 )  //274
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( 0.997855, -0.0646574, 0.0102407 )  //275
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( 0.997855, -0.0646574, 0.0102407 )  //276
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0646574, 0.0102407 )  //277
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( 0.997855, -0.0646574, -0.0102407 )  //278
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( 0.997855, -0.0646574, -0.0102407 )  //279
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0646574, -0.0102407 )  //280
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( 0.997855, -0.0583282, -0.0297197 )  //281
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( 0.997855, -0.0583282, -0.0297197 )  //282
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0583282, -0.0297197 )  //283
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( 0.997855, -0.0462895, -0.0462896 )  //284
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( 0.997855, -0.0462895, -0.0462896 )  //285
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0462895, -0.0462896 )  //286
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( 0.997855, -0.0297197, -0.0583283 )  //287
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( 0.997855, -0.0297197, -0.0583283 )  //288
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0297197, -0.0583283 )  //289
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( 0.997855, -0.0102408, -0.0646574 )  //290
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( 0.997855, -0.0102408, -0.0646574 )  //291
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0102408, -0.0646574 )  //292
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( 0.997855, 0.0102408, -0.0646574 )  //293
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( 0.997855, 0.0102408, -0.0646574 )  //294
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0102408, -0.0646574 )  //295
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( 0.997855, 0.0297198, -0.0583283 )  //296
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( 0.997855, 0.0297198, -0.0583283 )  //297
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0297198, -0.0583283 )  //298
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( 0.997855, 0.0462895, -0.0462896 )  //299
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( 0.997855, 0.0462895, -0.0462896 )  //300
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0462895, -0.0462896 )  //301
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( 0.997855, 0.0583283, -0.0297197 )  //302
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( 0.997855, 0.0583283, -0.0297197 )  //303
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0583283, -0.0297197 )  //304
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( 0.997855, 0.0646574, -0.0102407 )  //305
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( 0.997855, 0.0646574, -0.0102407 )  //306
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0646574, -0.0102407 )  //307
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( 0.997855, 0.0646575, 0.0102407 )  //308
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( 0.997855, 0.0646575, 0.0102407 )  //309
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0646575, 0.0102407 )  //310
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BASE_TIRERR___carbodyblack_2 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BASE_TIRERR___carbodyblack_2 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 311 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BASE_TIRERR___carbodyblack_2	NULL
#define vertexbuff_KEIA_BASE_TIRERR___carbodyblack_2	NULL
#endif




#if ((PT_KEIA_BASE_TIRERR___carbodyblack_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIRERR___carbodyblack_2 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BASE_TIRERR___carbodyblack_2 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
	1, 4, 2, // 2 8
	4, 5, 2, // 3 11
	6, 7, 9, // 4 14
	7, 8, 9, // 5 17
	7, 10, 8, // 6 20
	10, 11, 8, // 7 23
	12, 13, 15, // 8 26
	13, 14, 15, // 9 29
	13, 16, 14, // 10 32
	16, 17, 14, // 11 35
	18, 19, 21, // 12 38
	19, 20, 21, // 13 41
	19, 22, 20, // 14 44
	22, 23, 20, // 15 47
	24, 25, 27, // 16 50
	25, 26, 27, // 17 53
	25, 28, 26, // 18 56
	28, 29, 26, // 19 59
	30, 31, 30, // 20 62
	31, 31, 30, // 21 65
	32, 30, 32, // 22 68
	30, 30, 32, // 23 71
	33, 32, 33, // 24 74
	32, 32, 33, // 25 77
	34, 33, 34, // 26 80
	33, 33, 34, // 27 83
	35, 34, 35, // 28 86
	34, 34, 35, // 29 89
	36, 35, 36, // 30 92
	35, 35, 36, // 31 95
	37, 36, 37, // 32 98
	36, 36, 37, // 33 101
	38, 37, 38, // 34 104
	37, 37, 38, // 35 107
	39, 38, 39, // 36 110
	38, 38, 39, // 37 113
	40, 39, 40, // 38 116
	39, 39, 40, // 39 119
	41, 40, 41, // 40 122
	40, 40, 41, // 41 125
	42, 41, 42, // 42 128
	41, 41, 42, // 43 131
	43, 42, 43, // 44 134
	42, 42, 43, // 45 137
	44, 43, 44, // 46 140
	43, 43, 44, // 47 143
	45, 44, 45, // 48 146
	44, 44, 45, // 49 149
	46, 45, 46, // 50 152
	45, 45, 46, // 51 155
	47, 46, 47, // 52 158
	46, 46, 47, // 53 161
	48, 47, 48, // 54 164
	47, 47, 48, // 55 167
	49, 48, 49, // 56 170
	48, 48, 49, // 57 173
	31, 49, 31, // 58 176
	49, 49, 31, // 59 179
	31, 30, 31, // 60 182
	30, 30, 31, // 61 185
	30, 32, 30, // 62 188
	32, 32, 30, // 63 191
	32, 33, 32, // 64 194
	33, 33, 32, // 65 197
	33, 34, 33, // 66 200
	34, 34, 33, // 67 203
	34, 35, 34, // 68 206
	35, 35, 34, // 69 209
	35, 36, 35, // 70 212
	36, 36, 35, // 71 215
	36, 37, 36, // 72 218
	37, 37, 36, // 73 221
	37, 38, 37, // 74 224
	38, 38, 37, // 75 227
	38, 39, 38, // 76 230
	39, 39, 38, // 77 233
	39, 40, 39, // 78 236
	40, 40, 39, // 79 239
	40, 41, 40, // 80 242
	41, 41, 40, // 81 245
	41, 42, 41, // 82 248
	42, 42, 41, // 83 251
	42, 43, 42, // 84 254
	43, 43, 42, // 85 257
	43, 44, 43, // 86 260
	44, 44, 43, // 87 263
	44, 45, 44, // 88 266
	45, 45, 44, // 89 269
	45, 46, 45, // 90 272
	46, 46, 45, // 91 275
	46, 47, 46, // 92 278
	47, 47, 46, // 93 281
	47, 48, 47, // 94 284
	48, 48, 47, // 95 287
	48, 49, 48, // 96 290
	49, 49, 48, // 97 293
	49, 31, 49, // 98 296
	31, 31, 49, // 99 299
	31, 31, 31, // 100 302
	31, 31, 31, // 101 305
	30, 30, 30, // 102 308
	30, 30, 30, // 103 311
	30, 31, 30, // 104 314
	31, 31, 30, // 105 317
	32, 32, 32, // 106 320
	32, 32, 32, // 107 323
	32, 30, 32, // 108 326
	30, 30, 32, // 109 329
	33, 33, 33, // 110 332
	33, 33, 33, // 111 335
	33, 32, 33, // 112 338
	32, 32, 33, // 113 341
	34, 34, 34, // 114 344
	34, 34, 34, // 115 347
	34, 33, 34, // 116 350
	33, 33, 34, // 117 353
	35, 35, 35, // 118 356
	35, 35, 35, // 119 359
	35, 34, 35, // 120 362
	34, 34, 35, // 121 365
	36, 36, 36, // 122 368
	36, 36, 36, // 123 371
	36, 35, 36, // 124 374
	35, 35, 36, // 125 377
	37, 37, 37, // 126 380
	37, 37, 37, // 127 383
	37, 36, 37, // 128 386
	36, 36, 37, // 129 389
	38, 38, 38, // 130 392
	38, 38, 38, // 131 395
	38, 37, 38, // 132 398
	37, 37, 38, // 133 401
	39, 39, 39, // 134 404
	39, 39, 39, // 135 407
	39, 38, 39, // 136 410
	38, 38, 39, // 137 413
	40, 40, 40, // 138 416
	40, 40, 40, // 139 419
	40, 39, 40, // 140 422
	39, 39, 40, // 141 425
	41, 41, 41, // 142 428
	41, 41, 41, // 143 431
	41, 40, 41, // 144 434
	40, 40, 41, // 145 437
	42, 42, 42, // 146 440
	42, 42, 42, // 147 443
	42, 41, 42, // 148 446
	41, 41, 42, // 149 449
	43, 43, 43, // 150 452
	43, 43, 43, // 151 455
	43, 42, 43, // 152 458
	42, 42, 43, // 153 461
	44, 44, 44, // 154 464
	44, 44, 44, // 155 467
	44, 43, 44, // 156 470
	43, 43, 44, // 157 473
	45, 45, 45, // 158 476
	45, 45, 45, // 159 479
	45, 44, 45, // 160 482
	44, 44, 45, // 161 485
	46, 46, 46, // 162 488
	46, 46, 46, // 163 491
	46, 45, 46, // 164 494
	45, 45, 46, // 165 497
	47, 47, 47, // 166 500
	47, 47, 47, // 167 503
	47, 46, 47, // 168 506
	46, 46, 47, // 169 509
	48, 48, 48, // 170 512
	48, 48, 48, // 171 515
	48, 47, 48, // 172 518
	47, 47, 48, // 173 521
	49, 49, 49, // 174 524
	49, 49, 49, // 175 527
	49, 48, 49, // 176 530
	48, 48, 49, // 177 533
	31, 49, 31, // 178 536
	49, 49, 31, // 179 539
	50, 51, 53, // 180 542
	51, 52, 53, // 181 545
	54, 55, 57, // 182 548
	55, 56, 57, // 183 551
	58, 59, 61, // 184 554
	59, 60, 61, // 185 557
	62, 63, 65, // 186 560
	63, 64, 65, // 187 563
	66, 67, 69, // 188 566
	67, 68, 69, // 189 569
	70, 71, 73, // 190 572
	71, 72, 73, // 191 575
	74, 75, 77, // 192 578
	75, 76, 77, // 193 581
	78, 79, 81, // 194 584
	79, 80, 81, // 195 587
	82, 83, 85, // 196 590
	83, 84, 85, // 197 593
	86, 87, 89, // 198 596
	87, 88, 89, // 199 599
	90, 91, 93, // 200 602
	91, 92, 93, // 201 605
	94, 95, 97, // 202 608
	95, 96, 97, // 203 611
	98, 99, 101, // 204 614
	99, 100, 101, // 205 617
	102, 103, 105, // 206 620
	103, 104, 105, // 207 623
	106, 107, 109, // 208 626
	107, 108, 109, // 209 629
	110, 111, 113, // 210 632
	111, 112, 113, // 211 635
	114, 115, 117, // 212 638
	115, 116, 117, // 213 641
	118, 119, 121, // 214 644
	119, 120, 121, // 215 647
	122, 123, 125, // 216 650
	123, 124, 125, // 217 653
	126, 127, 129, // 218 656
	127, 128, 129, // 219 659
	130, 130, 132, // 220 662
	130, 131, 132, // 221 665
	133, 133, 135, // 222 668
	133, 134, 135, // 223 671
	136, 137, 138, // 224 674
	139, 139, 141, // 225 677
	139, 140, 141, // 226 680
	142, 143, 144, // 227 683
	145, 145, 147, // 228 686
	145, 146, 147, // 229 689
	148, 149, 150, // 230 692
	151, 151, 153, // 231 695
	151, 152, 153, // 232 698
	154, 155, 156, // 233 701
	157, 157, 159, // 234 704
	157, 158, 159, // 235 707
	160, 161, 162, // 236 710
	163, 163, 165, // 237 713
	163, 164, 165, // 238 716
	166, 167, 168, // 239 719
	169, 169, 171, // 240 722
	169, 170, 171, // 241 725
	172, 173, 174, // 242 728
	175, 175, 177, // 243 731
	175, 176, 177, // 244 734
	178, 179, 180, // 245 737
	181, 181, 183, // 246 740
	181, 182, 183, // 247 743
	184, 185, 186, // 248 746
	187, 187, 189, // 249 749
	187, 188, 189, // 250 752
	190, 191, 192, // 251 755
	193, 193, 195, // 252 758
	193, 194, 195, // 253 761
	196, 197, 198, // 254 764
	199, 199, 201, // 255 767
	199, 200, 201, // 256 770
	202, 203, 204, // 257 773
	205, 205, 207, // 258 776
	205, 206, 207, // 259 779
	208, 209, 210, // 260 782
	211, 211, 213, // 261 785
	211, 212, 213, // 262 788
	214, 215, 216, // 263 791
	217, 217, 219, // 264 794
	217, 218, 219, // 265 797
	220, 221, 222, // 266 800
	223, 223, 225, // 267 803
	223, 224, 225, // 268 806
	226, 227, 228, // 269 809
	229, 229, 231, // 270 812
	229, 230, 231, // 271 815
	232, 233, 234, // 272 818
	235, 235, 237, // 273 821
	235, 236, 237, // 274 824
	238, 239, 240, // 275 827
	241, 241, 243, // 276 830
	241, 242, 243, // 277 833
	244, 245, 246, // 278 836
	247, 248, 249, // 279 839
	130, 130, 132, // 280 842
	130, 131, 132, // 281 845
	133, 133, 135, // 282 848
	133, 134, 135, // 283 851
	136, 137, 138, // 284 854
	139, 139, 141, // 285 857
	139, 140, 141, // 286 860
	142, 143, 144, // 287 863
	145, 145, 147, // 288 866
	145, 146, 147, // 289 869
	148, 149, 150, // 290 872
	151, 151, 153, // 291 875
	151, 152, 153, // 292 878
	154, 155, 156, // 293 881
	157, 157, 159, // 294 884
	157, 158, 159, // 295 887
	160, 161, 162, // 296 890
	163, 163, 165, // 297 893
	163, 164, 165, // 298 896
	166, 167, 168, // 299 899
	169, 169, 171, // 300 902
	169, 170, 171, // 301 905
	172, 173, 174, // 302 908
	175, 175, 177, // 303 911
	175, 176, 177, // 304 914
	178, 179, 180, // 305 917
	181, 181, 183, // 306 920
	181, 182, 183, // 307 923
	184, 185, 186, // 308 926
	187, 187, 189, // 309 929
	187, 188, 189, // 310 932
	190, 191, 192, // 311 935
	193, 193, 195, // 312 938
	193, 194, 195, // 313 941
	196, 197, 198, // 314 944
	199, 199, 201, // 315 947
	199, 200, 201, // 316 950
	202, 203, 204, // 317 953
	205, 205, 207, // 318 956
	205, 206, 207, // 319 959
	208, 209, 210, // 320 962
	211, 211, 213, // 321 965
	211, 212, 213, // 322 968
	214, 215, 216, // 323 971
	217, 217, 219, // 324 974
	217, 218, 219, // 325 977
	220, 221, 222, // 326 980
	223, 223, 225, // 327 983
	223, 224, 225, // 328 986
	226, 227, 228, // 329 989
	229, 229, 231, // 330 992
	229, 230, 231, // 331 995
	232, 233, 234, // 332 998
	235, 235, 237, // 333 1001
	235, 236, 237, // 334 1004
	238, 239, 240, // 335 1007
	241, 241, 243, // 336 1010
	241, 242, 243, // 337 1013
	244, 245, 246, // 338 1016
	247, 248, 249, // 339 1019
	31, 31, 250, // 340 1022
	31, 31, 250, // 341 1025
	30, 30, 250, // 342 1028
	30, 30, 250, // 343 1031
	251, 252, 253, // 344 1034
	32, 32, 250, // 345 1037
	32, 32, 250, // 346 1040
	254, 255, 256, // 347 1043
	33, 33, 250, // 348 1046
	33, 33, 250, // 349 1049
	257, 258, 259, // 350 1052
	34, 34, 250, // 351 1055
	34, 34, 250, // 352 1058
	260, 261, 262, // 353 1061
	35, 35, 250, // 354 1064
	35, 35, 250, // 355 1067
	263, 264, 265, // 356 1070
	36, 36, 250, // 357 1073
	36, 36, 250, // 358 1076
	266, 267, 268, // 359 1079
	37, 37, 250, // 360 1082
	37, 37, 250, // 361 1085
	269, 270, 271, // 362 1088
	38, 38, 250, // 363 1091
	38, 38, 250, // 364 1094
	272, 273, 274, // 365 1097
	39, 39, 250, // 366 1100
	39, 39, 250, // 367 1103
	275, 276, 277, // 368 1106
	40, 40, 250, // 369 1109
	40, 40, 250, // 370 1112
	278, 279, 280, // 371 1115
	41, 41, 250, // 372 1118
	41, 41, 250, // 373 1121
	281, 282, 283, // 374 1124
	42, 42, 250, // 375 1127
	42, 42, 250, // 376 1130
	284, 285, 286, // 377 1133
	43, 43, 250, // 378 1136
	43, 43, 250, // 379 1139
	287, 288, 289, // 380 1142
	44, 44, 250, // 381 1145
	44, 44, 250, // 382 1148
	290, 291, 292, // 383 1151
	45, 45, 250, // 384 1154
	45, 45, 250, // 385 1157
	293, 294, 295, // 386 1160
	46, 46, 250, // 387 1163
	46, 46, 250, // 388 1166
	296, 297, 298, // 389 1169
	47, 47, 250, // 390 1172
	47, 47, 250, // 391 1175
	299, 300, 301, // 392 1178
	48, 48, 250, // 393 1181
	48, 48, 250, // 394 1184
	302, 303, 304, // 395 1187
	49, 49, 250, // 396 1190
	49, 49, 250, // 397 1193
	305, 306, 307, // 398 1196
	308, 309, 310, // 399 1199
DX3DINDEX_END
#endif

#else
#define index_KEIA_BASE_TIRERR___carbodyblack_2	NULL
#endif




#if ((PT_KEIA_BASE_TIRERR___carbodyblack_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BASE_TIRERR___carbodyblack_2 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BASE_TIRERR___carbodyblack_2_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BASE_TIRERR___carbodyblack_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BASE_TIRERR___carbodyblack_2 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BASE_TIRERR___carbodyblack_2_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BASE_TIRERR___carbodyblack_2_VERTEXSTRIP 	NULL
#endif




DX3DMODELTBL_START( modeltbl_KEIA_BASE_TIRERR__ )
DX3DMODEL_START( model_KEIA_BASE_TIRERR___cartire_0 )
DX3DMODEL_VERTEX( vertex_KEIA_BASE_TIRERR___cartire_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BASE_TIRERR___cartire_0 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 516 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_cartire )
DX3DMODEL_END
DX3DMODEL_START( model_KEIA_BASE_TIRERR___carwheelB_1 )
DX3DMODEL_VERTEX( vertex_KEIA_BASE_TIRERR___carwheelB_1 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BASE_TIRERR___carwheelB_1 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 276 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carwheelB )
DX3DMODEL_END
DX3DMODEL_START( model_KEIA_BASE_TIRERR___carbodyblack_2 )
DX3DMODEL_VERTEX( vertex_KEIA_BASE_TIRERR___carbodyblack_2 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BASE_TIRERR___carbodyblack_2 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 1200 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carbodyblack )
DX3DMODEL_END
DX3DMODELTBL_END




DX3DOBJECT_START_HASH( object_KEIA_BASE_TIRERR__, 315243649 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_KEIA_BASE_TIRERR__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	-5.94006, 2.86276, 13.14, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	-5.94006, 2.86276, 13.14, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_KEIA_BASE_TIREFL__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_KEIA_BASE_TIRERL__
/////////////////////////////////////////////
#if 0
	-1, 0, -1.22465e-016, 0, 
	0, 1, 0, 0, 
	-1.22465e-016, -0, 1, 0, 
	5.94, 2.86276, -13.14, 1
#endif



#if ((PT_KEIA_BASE_TIRERL___cartire_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIRERL___cartire_0 == PT_TRILIST ) || ((PT_KEIA_BASE_TIRERL___cartire_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BASE_TIRERL___cartire_0 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BASE_TIRERL___cartire_0 )
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.00903158, 0.951018, 0.309003 )  //0
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( -0.00903167, 0.808984, 0.587761 )  //1
DX3DVERT( -0.651165, 2.15934, 1.56885 ) DX3DVNORM( -0.313176, 0.768319, 0.558217 )  //2
DX3DVERT( -0.651165, 2.53846, 0.824794 ) DX3DVNORM( -0.313177, 0.903214, 0.293471 )  //3
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.00903152, 0.587761, 0.808984 )  //4
DX3DVERT( -0.651165, 1.56885, 2.15934 ) DX3DVNORM( -0.313176, 0.558217, 0.768319 )  //5
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.00903127, 0.309004, 0.951018 )  //6
DX3DVERT( -0.651165, 0.824795, 2.53846 ) DX3DVNORM( -0.313177, 0.293472, 0.903214 )  //7
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( -0.00903127, -3.01738e-008, 0.999959 )  //8
DX3DVERT( -0.651165, -4.85044e-008, 2.66909 ) DX3DVNORM( -0.313177, -2.3704e-008, 0.949695 )  //9
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.00903123, -0.309005, 0.951018 )  //10
DX3DVERT( -0.651165, -0.824795, 2.53846 ) DX3DVNORM( -0.313177, -0.293472, 0.903213 )  //11
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( -0.00903142, -0.587762, 0.808984 )  //12
DX3DVERT( -0.651165, -1.56885, 2.15934 ) DX3DVNORM( -0.313176, -0.558217, 0.768319 )  //13
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.0090315, -0.808984, 0.587761 )  //14
DX3DVERT( -0.651165, -2.15934, 1.56885 ) DX3DVNORM( -0.313176, -0.768319, 0.558217 )  //15
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.00903129, -0.951018, 0.309004 )  //16
DX3DVERT( -0.651165, -2.53846, 0.824794 ) DX3DVNORM( -0.313177, -0.903213, 0.293472 )  //17
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( -0.00903119, -0.999959, 1.50869e-008 )  //18
DX3DVERT( -0.651165, -2.66909, 9.70089e-008 ) DX3DVNORM( -0.313177, -0.949695, 1.97533e-008 )  //19
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( -0.00903121, -0.951018, -0.309004 )  //20
DX3DVERT( -0.651165, -2.53846, -0.824794 ) DX3DVNORM( -0.313177, -0.903213, -0.293472 )  //21
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( -0.00903143, -0.808984, -0.587762 )  //22
DX3DVERT( -0.651165, -2.15934, -1.56885 ) DX3DVNORM( -0.313176, -0.768319, -0.558217 )  //23
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.0090314, -0.587762, -0.808984 )  //24
DX3DVERT( -0.651165, -1.56885, -2.15934 ) DX3DVNORM( -0.313176, -0.558217, -0.768319 )  //25
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( -0.00903128, -0.309004, -0.951018 )  //26
DX3DVERT( -0.651165, -0.824794, -2.53846 ) DX3DVNORM( -0.313176, -0.293472, -0.903214 )  //27
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -0.00903141, 7.54344e-009, -0.999959 )  //28
DX3DVERT( -0.651165, -4.85044e-008, -2.66909 ) DX3DVNORM( -0.313177, 1.06668e-007, -0.949695 )  //29
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.00903122, 0.309005, -0.951018 )  //30
DX3DVERT( -0.651165, 0.824794, -2.53846 ) DX3DVNORM( -0.313177, 0.293472, -0.903214 )  //31
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.0090314, 0.587762, -0.808984 )  //32
DX3DVERT( -0.651165, 1.56885, -2.15934 ) DX3DVNORM( -0.313176, 0.558217, -0.768319 )  //33
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.00903159, 0.808984, -0.587762 )  //34
DX3DVERT( -0.651165, 2.15934, -1.56885 ) DX3DVNORM( -0.313176, 0.768319, -0.558217 )  //35
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.0090314, 0.951018, -0.309004 )  //36
DX3DVERT( -0.651165, 2.53846, -0.824794 ) DX3DVNORM( -0.313176, 0.903214, -0.293472 )  //37
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -0.00903151, 0.999959, -5.50671e-007 )  //38
DX3DVERT( -0.651165, 2.66909, 9.70089e-008 ) DX3DVNORM( -0.00903151, 0.999959, -5.50671e-007 )  //39
DX3DVERT( -0.895311, 2.01633, 1.46495 ) DX3DVNORM( -0.586468, 0.655281, 0.47609 )  //40
DX3DVERT( -0.895311, 2.37033, 0.770167 ) DX3DVNORM( -0.586469, 0.770329, 0.250294 )  //41
DX3DVERT( -0.895311, 1.46495, 2.01633 ) DX3DVNORM( -0.586469, 0.47609, 0.655281 )  //42
DX3DVERT( -0.895311, 0.770168, 2.37033 ) DX3DVNORM( -0.586469, 0.250295, 0.770329 )  //43
DX3DVERT( -0.895311, -4.85044e-008, 2.49232 ) DX3DVNORM( -0.586469, -1.50233e-008, 0.809972 )  //44
DX3DVERT( -0.895311, -0.770167, 2.37033 ) DX3DVNORM( -0.586469, -0.250295, 0.770329 )  //45
DX3DVERT( -0.895311, -1.46495, 2.01633 ) DX3DVNORM( -0.586469, -0.47609, 0.655281 )  //46
DX3DVERT( -0.895311, -2.01633, 1.46495 ) DX3DVNORM( -0.586469, -0.655281, 0.47609 )  //47
DX3DVERT( -0.895311, -2.37033, 0.770167 ) DX3DVNORM( -0.58647, -0.770328, 0.250295 )  //48
DX3DVERT( -0.895311, -2.49231, 9.70089e-008 ) DX3DVNORM( -0.58647, -0.809971, 2.25349e-008 )  //49
DX3DVERT( -0.895311, -2.37033, -0.770167 ) DX3DVNORM( -0.586469, -0.770329, -0.250295 )  //50
DX3DVERT( -0.895311, -2.01632, -1.46495 ) DX3DVNORM( -0.586468, -0.655281, -0.47609 )  //51
DX3DVERT( -0.895311, -1.46495, -2.01632 ) DX3DVNORM( -0.586467, -0.47609, -0.655282 )  //52
DX3DVERT( -0.895311, -0.770167, -2.37033 ) DX3DVNORM( -0.586468, -0.250295, -0.770329 )  //53
DX3DVERT( -0.895311, -4.85044e-008, -2.49231 ) DX3DVNORM( -0.586469, 1.95303e-007, -0.809972 )  //54
DX3DVERT( -0.895311, 0.770168, -2.37033 ) DX3DVNORM( -0.586469, 0.250295, -0.770329 )  //55
DX3DVERT( -0.895311, 1.46495, -2.01632 ) DX3DVNORM( -0.586468, 0.47609, -0.655281 )  //56
DX3DVERT( -0.895311, 2.01632, -1.46495 ) DX3DVNORM( -0.586467, 0.655282, -0.47609 )  //57
DX3DVERT( -0.895311, 2.37033, -0.770167 ) DX3DVNORM( -0.586469, 0.770329, -0.250295 )  //58
DX3DVERT( -0.651165, 2.66909, 9.70089e-008 ) DX3DVNORM( -0.586469, 0.809972, -2.17838e-007 )  //59
DX3DVERT( -0.895311, 2.49231, 9.70089e-008 ) DX3DVNORM( -0.586469, 0.809972, -2.17838e-007 )  //60
DX3DVERT( -0.895311, 2.37033, 0.770167 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //61
DX3DVERT( -0.895311, 2.01633, 1.46495 ) DX3DVNORM( -1, 1.27031e-008, -0 )  //62
DX3DVERT( -0.895311, 1.68027, 1.22079 ) DX3DVNORM( -0.958004, -0.231989, -0.16855 )  //63
DX3DVERT( -0.895311, 1.97528, 0.641807 ) DX3DVNORM( -0.958004, -0.272719, -0.0886117 )  //64
DX3DVERT( -0.895311, 1.46495, 2.01633 ) DX3DVNORM( -1, 2.54063e-008, -0 )  //65
DX3DVERT( -0.895311, 1.22079, 1.68027 ) DX3DVNORM( -0.958004, -0.16855, -0.231989 )  //66
DX3DVERT( -0.895311, 0.770168, 2.37033 ) DX3DVNORM( -1, 5.08125e-008, -0 )  //67
DX3DVERT( -0.895311, 0.641807, 1.97528 ) DX3DVNORM( -0.958004, -0.0886118, -0.27272 )  //68
DX3DVERT( -0.895311, -4.85044e-008, 2.49232 ) DX3DVNORM( -1, -4.9738e-014, -0 )  //69
DX3DVERT( -0.895311, -4.85044e-008, 2.07693 ) DX3DVNORM( -0.958004, 2.72763e-008, -0.286754 )  //70
DX3DVERT( -0.895311, -0.770167, 2.37033 ) DX3DVNORM( -1, 4.61853e-014, -0 )  //71
DX3DVERT( -0.895311, -0.641806, 1.97528 ) DX3DVNORM( -0.958004, 0.0886119, -0.272719 )  //72
DX3DVERT( -0.895311, -1.46495, 2.01633 ) DX3DVNORM( -1, 5.08126e-008, -0 )  //73
DX3DVERT( -0.895311, -1.22079, 1.68027 ) DX3DVNORM( -0.958004, 0.16855, -0.231989 )  //74
DX3DVERT( -0.895311, -2.01633, 1.46495 ) DX3DVNORM( -1, 2.54063e-008, -0 )  //75
DX3DVERT( -0.895311, -1.68027, 1.22079 ) DX3DVNORM( -0.958004, 0.231989, -0.16855 )  //76
DX3DVERT( -0.895311, -2.37033, 0.770167 ) DX3DVNORM( -1, 1.27032e-008, -0 )  //77
DX3DVERT( -0.895311, -1.97528, 0.641807 ) DX3DVNORM( -0.958004, 0.272719, -0.0886119 )  //78
DX3DVERT( -0.895311, -2.49231, 9.70089e-008 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //79
DX3DVERT( -0.895311, -2.07693, 9.70089e-008 ) DX3DVNORM( -0.958004, 0.286754, -0 )  //80
DX3DVERT( -0.895311, -2.37033, -0.770167 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //81
DX3DVERT( -0.895311, -1.97528, -0.641807 ) DX3DVNORM( -0.958004, 0.272719, 0.0886119 )  //82
DX3DVERT( -0.895311, -2.01632, -1.46495 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //83
DX3DVERT( -0.895311, -1.68027, -1.22079 ) DX3DVNORM( -0.958004, 0.231989, 0.16855 )  //84
DX3DVERT( -0.895311, -1.46495, -2.01632 ) DX3DVNORM( -1, -5.08125e-008, -0 )  //85
DX3DVERT( -0.895311, -1.22079, -1.68027 ) DX3DVNORM( -0.958004, 0.16855, 0.231989 )  //86
DX3DVERT( -0.895311, -0.770167, -2.37033 ) DX3DVNORM( -1, 1.27898e-013, -0 )  //87
DX3DVERT( -0.895311, -0.641806, -1.97528 ) DX3DVNORM( -0.958004, 0.088612, 0.272719 )  //88
DX3DVERT( -0.895311, -4.85044e-008, -2.49231 ) DX3DVNORM( -1, 5.08126e-008, -0 )  //89
DX3DVERT( -0.895311, -4.85044e-008, -2.07693 ) DX3DVNORM( -0.958004, 2.14314e-008, 0.286754 )  //90
DX3DVERT( -0.895311, 0.770168, -2.37033 ) DX3DVNORM( -1, 1.01625e-007, -0 )  //91
DX3DVERT( -0.895311, 0.641806, -1.97528 ) DX3DVNORM( -0.958004, -0.088612, 0.272719 )  //92
DX3DVERT( -0.895311, 1.46495, -2.01632 ) DX3DVNORM( -1, 1.01625e-007, -0 )  //93
DX3DVERT( -0.895311, 1.22079, -1.68027 ) DX3DVNORM( -0.958004, -0.16855, 0.231989 )  //94
DX3DVERT( -0.895311, 2.01632, -1.46495 ) DX3DVNORM( -1, 0, -0 )  //95
DX3DVERT( -0.895311, 1.68027, -1.22079 ) DX3DVNORM( -0.958004, -0.231989, 0.16855 )  //96
DX3DVERT( -0.895311, 2.37033, -0.770167 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //97
DX3DVERT( -0.895311, 1.97528, -0.641807 ) DX3DVNORM( -0.958004, -0.272719, 0.0886119 )  //98
DX3DVERT( -0.895311, 2.49231, 9.70089e-008 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //99
DX3DVERT( -0.895311, 2.07693, 9.70089e-008 ) DX3DVNORM( -1, -1.27031e-008, -0 )  //100
DX3DVERT( -0.732719, 1.48072, 1.07581 ) DX3DVNORM( -0.682549, -0.591262, -0.429577 )  //101
DX3DVERT( -0.732719, 1.74069, 0.565586 ) DX3DVNORM( -0.682548, -0.695071, -0.225841 )  //102
DX3DVERT( -0.732719, 1.07581, 1.48072 ) DX3DVNORM( -0.682549, -0.429576, -0.591262 )  //103
DX3DVERT( -0.732719, 0.565586, 1.74069 ) DX3DVNORM( -0.682547, -0.225842, -0.695072 )  //104
DX3DVERT( -0.732719, -4.85044e-008, 1.83027 ) DX3DVNORM( -0.682547, 3.85821e-008, -0.730842 )  //105
DX3DVERT( -0.732719, -0.565586, 1.74069 ) DX3DVNORM( -0.682547, 0.225842, -0.695071 )  //106
DX3DVERT( -0.732719, -1.07581, 1.48072 ) DX3DVNORM( -0.682549, 0.429577, -0.591262 )  //107
DX3DVERT( -0.732719, -1.48072, 1.07581 ) DX3DVNORM( -0.682549, 0.591262, -0.429577 )  //108
DX3DVERT( -0.732719, -1.74069, 0.565586 ) DX3DVNORM( -0.682548, 0.695071, -0.225842 )  //109
DX3DVERT( -0.732719, -1.83027, 9.70089e-008 ) DX3DVNORM( -0.682548, 0.730841, -3.85821e-009 )  //110
DX3DVERT( -0.732719, -1.74069, -0.565586 ) DX3DVNORM( -0.682547, 0.695071, 0.225842 )  //111
DX3DVERT( -0.732719, -1.48072, -1.07581 ) DX3DVNORM( -0.682549, 0.591262, 0.429577 )  //112
DX3DVERT( -0.732719, -1.07581, -1.48072 ) DX3DVNORM( -0.68255, 0.429576, 0.591261 )  //113
DX3DVERT( -0.732719, -0.565586, -1.74069 ) DX3DVNORM( -0.682549, 0.225842, 0.695071 )  //114
DX3DVERT( -0.732719, -4.85044e-008, -1.83027 ) DX3DVNORM( -0.682548, 3.47239e-008, 0.730841 )  //115
DX3DVERT( -0.732719, 0.565586, -1.74069 ) DX3DVNORM( -0.682549, -0.225842, 0.69507 )  //116
DX3DVERT( -0.732719, 1.07581, -1.48072 ) DX3DVNORM( -0.68255, -0.429576, 0.591261 )  //117
DX3DVERT( -0.732719, 1.48072, -1.07581 ) DX3DVNORM( -0.682549, -0.591262, 0.429577 )  //118
DX3DVERT( -0.732719, 1.74069, -0.565586 ) DX3DVNORM( -0.682547, -0.695072, 0.225842 )  //119
DX3DVERT( -0.895311, 2.07693, 9.70089e-008 ) DX3DVNORM( -0.83492, -0.550371, 6.17004e-007 )  //120
DX3DVERT( -0.732719, 1.83027, 9.70089e-008 ) DX3DVNORM( -0.83492, -0.550371, 6.17004e-007 )  //121
DX3DVERT( -0.651165, 2.53846, -0.824794 ) DX3DVNORM( 0, 0, -0 )  //122
DX3DVERT( -0.651165, 2.66909, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //123
DX3DVERT( -0.651165, 2.53846, 0.824794 ) DX3DVNORM( 0, 0, -0 )  //124
DX3DVERT( -0.895311, 2.37033, -0.770167 ) DX3DVNORM( 0, 0, -0 )  //125
DX3DVERT( -0.895311, 2.49231, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //126
DX3DVERT( -0.895311, 2.37033, 0.770167 ) DX3DVNORM( 0, 0, -0 )  //127
DX3DVERT( -0.895311, 1.97528, -0.641807 ) DX3DVNORM( 0, 0, -0 )  //128
DX3DVERT( -0.895311, 2.07693, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //129
DX3DVERT( -0.895311, 1.97528, 0.641807 ) DX3DVNORM( 0, 0, -0 )  //130
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BASE_TIRERL___cartire_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BASE_TIRERL___cartire_0 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 131 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BASE_TIRERL___cartire_0	NULL
#define vertexbuff_KEIA_BASE_TIRERL___cartire_0	NULL
#endif




#if ((PT_KEIA_BASE_TIRERL___cartire_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIRERL___cartire_0 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BASE_TIRERL___cartire_0 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
	1, 4, 2, // 2 8
	4, 5, 2, // 3 11
	4, 6, 5, // 4 14
	6, 7, 5, // 5 17
	6, 8, 7, // 6 20
	8, 9, 7, // 7 23
	8, 10, 9, // 8 26
	10, 11, 9, // 9 29
	10, 12, 11, // 10 32
	12, 13, 11, // 11 35
	12, 14, 13, // 12 38
	14, 15, 13, // 13 41
	14, 16, 15, // 14 44
	16, 17, 15, // 15 47
	16, 18, 17, // 16 50
	18, 19, 17, // 17 53
	18, 20, 19, // 18 56
	20, 21, 19, // 19 59
	20, 22, 21, // 20 62
	22, 23, 21, // 21 65
	22, 24, 23, // 22 68
	24, 25, 23, // 23 71
	24, 26, 25, // 24 74
	26, 27, 25, // 25 77
	26, 28, 27, // 26 80
	28, 29, 27, // 27 83
	28, 30, 29, // 28 86
	30, 31, 29, // 29 89
	30, 32, 31, // 30 92
	32, 33, 31, // 31 95
	32, 34, 33, // 32 98
	34, 35, 33, // 33 101
	34, 36, 35, // 34 104
	36, 37, 35, // 35 107
	36, 38, 37, // 36 110
	38, 39, 37, // 37 113
	38, 0, 39, // 38 116
	0, 3, 39, // 39 119
	3, 2, 41, // 40 122
	2, 40, 41, // 41 125
	2, 5, 40, // 42 128
	5, 42, 40, // 43 131
	5, 7, 42, // 44 134
	7, 43, 42, // 45 137
	7, 9, 43, // 46 140
	9, 44, 43, // 47 143
	9, 11, 44, // 48 146
	11, 45, 44, // 49 149
	11, 13, 45, // 50 152
	13, 46, 45, // 51 155
	13, 15, 46, // 52 158
	15, 47, 46, // 53 161
	15, 17, 47, // 54 164
	17, 48, 47, // 55 167
	17, 19, 48, // 56 170
	19, 49, 48, // 57 173
	19, 21, 49, // 58 176
	21, 50, 49, // 59 179
	21, 23, 50, // 60 182
	23, 51, 50, // 61 185
	23, 25, 51, // 62 188
	25, 52, 51, // 63 191
	25, 27, 52, // 64 194
	27, 53, 52, // 65 197
	27, 29, 53, // 66 200
	29, 54, 53, // 67 203
	29, 31, 54, // 68 206
	31, 55, 54, // 69 209
	31, 33, 55, // 70 212
	33, 56, 55, // 71 215
	33, 35, 56, // 72 218
	35, 57, 56, // 73 221
	35, 37, 57, // 74 224
	37, 58, 57, // 75 227
	37, 59, 58, // 76 230
	59, 60, 58, // 77 233
	59, 3, 60, // 78 236
	3, 41, 60, // 79 239
	61, 62, 64, // 80 242
	62, 63, 64, // 81 245
	62, 65, 63, // 82 248
	65, 66, 63, // 83 251
	65, 67, 66, // 84 254
	67, 68, 66, // 85 257
	67, 69, 68, // 86 260
	69, 70, 68, // 87 263
	69, 71, 70, // 88 266
	71, 72, 70, // 89 269
	71, 73, 72, // 90 272
	73, 74, 72, // 91 275
	73, 75, 74, // 92 278
	75, 76, 74, // 93 281
	75, 77, 76, // 94 284
	77, 78, 76, // 95 287
	77, 79, 78, // 96 290
	79, 80, 78, // 97 293
	79, 81, 80, // 98 296
	81, 82, 80, // 99 299
	81, 83, 82, // 100 302
	83, 84, 82, // 101 305
	83, 85, 84, // 102 308
	85, 86, 84, // 103 311
	85, 87, 86, // 104 314
	87, 88, 86, // 105 317
	87, 89, 88, // 106 320
	89, 90, 88, // 107 323
	89, 91, 90, // 108 326
	91, 92, 90, // 109 329
	91, 93, 92, // 110 332
	93, 94, 92, // 111 335
	93, 95, 94, // 112 338
	95, 96, 94, // 113 341
	95, 97, 96, // 114 344
	97, 98, 96, // 115 347
	97, 99, 98, // 116 350
	99, 100, 98, // 117 353
	99, 61, 100, // 118 356
	61, 64, 100, // 119 359
	64, 63, 102, // 120 362
	63, 101, 102, // 121 365
	63, 66, 101, // 122 368
	66, 103, 101, // 123 371
	66, 68, 103, // 124 374
	68, 104, 103, // 125 377
	68, 70, 104, // 126 380
	70, 105, 104, // 127 383
	70, 72, 105, // 128 386
	72, 106, 105, // 129 389
	72, 74, 106, // 130 392
	74, 107, 106, // 131 395
	74, 76, 107, // 132 398
	76, 108, 107, // 133 401
	76, 78, 108, // 134 404
	78, 109, 108, // 135 407
	78, 80, 109, // 136 410
	80, 110, 109, // 137 413
	80, 82, 110, // 138 416
	82, 111, 110, // 139 419
	82, 84, 111, // 140 422
	84, 112, 111, // 141 425
	84, 86, 112, // 142 428
	86, 113, 112, // 143 431
	86, 88, 113, // 144 434
	88, 114, 113, // 145 437
	88, 90, 114, // 146 440
	90, 115, 114, // 147 443
	90, 92, 115, // 148 446
	92, 116, 115, // 149 449
	92, 94, 116, // 150 452
	94, 117, 116, // 151 455
	94, 96, 117, // 152 458
	96, 118, 117, // 153 461
	96, 98, 118, // 154 464
	98, 119, 118, // 155 467
	98, 120, 119, // 156 470
	120, 121, 119, // 157 473
	120, 64, 121, // 158 476
	64, 102, 121, // 159 479
	122, 123, 122, // 160 482
	123, 123, 122, // 161 485
	123, 124, 123, // 162 488
	124, 124, 123, // 163 491
	125, 126, 125, // 164 494
	126, 126, 125, // 165 497
	126, 127, 126, // 166 500
	127, 127, 126, // 167 503
	128, 129, 128, // 168 506
	129, 129, 128, // 169 509
	129, 130, 129, // 170 512
	130, 130, 129, // 171 515
DX3DINDEX_END
#endif

#else
#define index_KEIA_BASE_TIRERL___cartire_0	NULL
#endif




#if ((PT_KEIA_BASE_TIRERL___cartire_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BASE_TIRERL___cartire_0 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BASE_TIRERL___cartire_0_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BASE_TIRERL___cartire_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BASE_TIRERL___cartire_0 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BASE_TIRERL___cartire_0_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BASE_TIRERL___cartire_0_VERTEXSTRIP 	NULL
#endif






#if ((PT_KEIA_BASE_TIRERL___carwheelB_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIRERL___carwheelB_1 == PT_TRILIST ) || ((PT_KEIA_BASE_TIRERL___carwheelB_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BASE_TIRERL___carwheelB_1 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BASE_TIRERL___carwheelB_1 )
DX3DVERT( -0.732719, 1.74069, 0.565586 ) DX3DVNORM( -0.682548, -0.695071, -0.225841 )  //0
DX3DVERT( -0.732719, 1.48072, 1.07581 ) DX3DVNORM( -0.682549, -0.591262, -0.429577 )  //1
DX3DVERT( -0.676385, 1.45504, 1.05715 ) DX3DVNORM( -0.864785, -0.406242, -0.295152 )  //2
DX3DVERT( -0.676385, 1.71051, 0.555777 ) DX3DVNORM( -0.864784, -0.477567, -0.15517 )  //3
DX3DVERT( -0.732719, 1.07581, 1.48072 ) DX3DVNORM( -0.682549, -0.429576, -0.591262 )  //4
DX3DVERT( -0.676385, 1.05715, 1.45504 ) DX3DVNORM( -0.864785, -0.295151, -0.406242 )  //5
DX3DVERT( -0.732719, 0.565586, 1.74069 ) DX3DVNORM( -0.682547, -0.225842, -0.695072 )  //6
DX3DVERT( -0.676385, 0.555776, 1.71051 ) DX3DVNORM( -0.864784, -0.155171, -0.477568 )  //7
DX3DVERT( -0.732719, -4.85044e-008, 1.83027 ) DX3DVNORM( -0.682547, 3.85821e-008, -0.730842 )  //8
DX3DVERT( -0.676385, -4.85044e-008, 1.79853 ) DX3DVNORM( -0.864783, 1.30051e-008, -0.502145 )  //9
DX3DVERT( -0.732719, -0.565586, 1.74069 ) DX3DVNORM( -0.682547, 0.225842, -0.695071 )  //10
DX3DVERT( -0.676385, -0.555777, 1.71051 ) DX3DVNORM( -0.864784, 0.155171, -0.477568 )  //11
DX3DVERT( -0.732719, -1.07581, 1.48072 ) DX3DVNORM( -0.682549, 0.429577, -0.591262 )  //12
DX3DVERT( -0.676385, -1.05715, 1.45504 ) DX3DVNORM( -0.864785, 0.295152, -0.406242 )  //13
DX3DVERT( -0.732719, -1.48072, 1.07581 ) DX3DVNORM( -0.682549, 0.591262, -0.429577 )  //14
DX3DVERT( -0.676385, -1.45504, 1.05715 ) DX3DVNORM( -0.864784, 0.406242, -0.295152 )  //15
DX3DVERT( -0.732719, -1.74069, 0.565586 ) DX3DVNORM( -0.682548, 0.695071, -0.225842 )  //16
DX3DVERT( -0.676385, -1.71051, 0.555777 ) DX3DVNORM( -0.864784, 0.477568, -0.155171 )  //17
DX3DVERT( -0.732719, -1.83027, 9.70089e-008 ) DX3DVNORM( -0.682548, 0.730841, -3.85821e-009 )  //18
DX3DVERT( -0.676385, -1.79853, 9.70089e-008 ) DX3DVNORM( -0.864784, 0.502144, -4.33502e-009 )  //19
DX3DVERT( -0.732719, -1.74069, -0.565586 ) DX3DVNORM( -0.682547, 0.695071, 0.225842 )  //20
DX3DVERT( -0.676385, -1.71051, -0.555777 ) DX3DVNORM( -0.864784, 0.477568, 0.155171 )  //21
DX3DVERT( -0.732719, -1.48072, -1.07581 ) DX3DVNORM( -0.682549, 0.591262, 0.429577 )  //22
DX3DVERT( -0.676385, -1.45504, -1.05715 ) DX3DVNORM( -0.864785, 0.406242, 0.295152 )  //23
DX3DVERT( -0.732719, -1.07581, -1.48072 ) DX3DVNORM( -0.68255, 0.429576, 0.591261 )  //24
DX3DVERT( -0.676385, -1.05715, -1.45504 ) DX3DVNORM( -0.864786, 0.295151, 0.406241 )  //25
DX3DVERT( -0.732719, -0.565586, -1.74069 ) DX3DVNORM( -0.682549, 0.225842, 0.695071 )  //26
DX3DVERT( -0.676385, -0.555776, -1.71051 ) DX3DVNORM( -0.864785, 0.155171, 0.477567 )  //27
DX3DVERT( -0.732719, -4.85044e-008, -1.83027 ) DX3DVNORM( -0.682548, 3.47239e-008, 0.730841 )  //28
DX3DVERT( -0.676385, -4.85044e-008, -1.79853 ) DX3DVNORM( -0.864784, 4.33502e-008, 0.502144 )  //29
DX3DVERT( -0.732719, 0.565586, -1.74069 ) DX3DVNORM( -0.682549, -0.225842, 0.69507 )  //30
DX3DVERT( -0.676385, 0.555776, -1.71051 ) DX3DVNORM( -0.864785, -0.15517, 0.477566 )  //31
DX3DVERT( -0.732719, 1.07581, -1.48072 ) DX3DVNORM( -0.68255, -0.429576, 0.591261 )  //32
DX3DVERT( -0.676385, 1.05715, -1.45504 ) DX3DVNORM( -0.864785, -0.295151, 0.406241 )  //33
DX3DVERT( -0.732719, 1.48072, -1.07581 ) DX3DVNORM( -0.682549, -0.591262, 0.429577 )  //34
DX3DVERT( -0.676385, 1.45504, -1.05715 ) DX3DVNORM( -0.864785, -0.406242, 0.295152 )  //35
DX3DVERT( -0.732719, 1.74069, -0.565586 ) DX3DVNORM( -0.682547, -0.695072, 0.225842 )  //36
DX3DVERT( -0.676385, 1.71051, -0.555777 ) DX3DVNORM( -0.864784, -0.477568, 0.155171 )  //37
DX3DVERT( -0.732719, 1.83027, 9.70089e-008 ) DX3DVNORM( -0.490909, -0.871211, 6.54342e-007 )  //38
DX3DVERT( -0.676385, 1.79853, 9.70089e-008 ) DX3DVNORM( -0.490909, -0.871211, 6.54342e-007 )  //39
DX3DVERT( -0.676385, 0.370518, 1.14034 ) DX3DVNORM( -0.994282, -0.0330002, -0.101564 )  //40
DX3DVERT( -0.676385, 0.704767, 0.970029 ) DX3DVNORM( -0.994282, -0.0627699, -0.0863957 )  //41
DX3DVERT( -0.676385, -4.85044e-008, 1.19902 ) DX3DVNORM( -0.994282, 6.55863e-009, -0.106791 )  //42
DX3DVERT( -0.676385, -0.970028, 0.704767 ) DX3DVNORM( -0.994282, 0.0863957, -0.06277 )  //43
DX3DVERT( -0.676385, -0.704767, 0.970029 ) DX3DVNORM( -0.994282, 0.0627699, -0.0863957 )  //44
DX3DVERT( -0.676385, -1.14034, 0.370518 ) DX3DVNORM( -0.994282, 0.101564, -0.0330001 )  //45
DX3DVERT( -0.676385, -0.970028, -0.704767 ) DX3DVNORM( -0.994282, 0.0863957, 0.06277 )  //46
DX3DVERT( -0.676385, -1.14034, -0.370518 ) DX3DVNORM( -0.994282, 0.101564, 0.0330002 )  //47
DX3DVERT( -0.676385, -0.704767, -0.970028 ) DX3DVNORM( -0.994282, 0.06277, 0.0863956 )  //48
DX3DVERT( -0.676385, 0.370518, -1.14034 ) DX3DVNORM( -0.994282, -0.0330001, 0.101564 )  //49
DX3DVERT( -0.676385, -4.85044e-008, -1.19902 ) DX3DVNORM( -0.994282, 6.55863e-009, 0.106791 )  //50
DX3DVERT( -0.676385, 0.704767, -0.970028 ) DX3DVNORM( -0.994282, -0.06277, 0.0863956 )  //51
DX3DVERT( -0.676385, 1.79853, 9.70089e-008 ) DX3DVNORM( -1, -2.68333e-008, -0 )  //52
DX3DVERT( -0.676385, 1.19902, 9.70089e-008 ) DX3DVNORM( -1, -2.68333e-008, -0 )  //53
DX3DVERT( -0.676385, 1.14034, -0.370518 ) DX3DVNORM( -0.994282, -0.101564, 0.0330001 )  //54
DX3DVERT( -0.676385, 1.14034, 0.370518 ) DX3DVNORM( -0.994282, -0.101564, -0.0330001 )  //55
DX3DVERT( -0.676385, 0.970028, 0.704767 ) DX3DVNORM( -0.994282, -0.0863956, -0.06277 )  //56
DX3DVERT( -0.415742, -4.85044e-008, 9.70089e-008 ) DX3DVNORM( -1, 2.36496e-008, -1.46856e-008 )  //57
DX3DVERT( -0.676385, -0.370518, 1.14034 ) DX3DVNORM( -0.994282, 0.0330002, -0.101564 )  //58
DX3DVERT( -0.676385, -1.19902, 9.70089e-008 ) DX3DVNORM( -0.994282, 0.106791, -1.87389e-009 )  //59
DX3DVERT( -0.676385, -0.370518, -1.14034 ) DX3DVNORM( -0.994282, 0.0330001, 0.101564 )  //60
DX3DVERT( -0.676385, 0.970028, -0.704767 ) DX3DVNORM( -0.994282, -0.0863956, 0.0627701 )  //61
DX3DVERT( -0.676385, 1.19902, 9.70089e-008 ) DX3DVNORM( -0.977178, -0.21242, 6.15021e-008 )  //62
DX3DVERT( -0.732719, 1.74069, -0.565586 ) DX3DVNORM( 0, 0, -0 )  //63
DX3DVERT( -0.732719, 1.83027, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //64
DX3DVERT( -0.732719, 1.74069, 0.565586 ) DX3DVNORM( 0, 0, -0 )  //65
DX3DVERT( -0.676385, 1.71051, -0.555777 ) DX3DVNORM( 0, 0, -0 )  //66
DX3DVERT( -0.676385, 1.79853, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //67
DX3DVERT( -0.676385, 1.71051, 0.555777 ) DX3DVNORM( 0, 0, -0 )  //68
DX3DVERT( -0.676385, 1.14034, -0.370518 ) DX3DVNORM( 0, 0, -0 )  //69
DX3DVERT( -0.676385, 1.19902, 9.70089e-008 ) DX3DVNORM( 0, 0, -0 )  //70
DX3DVERT( -0.676385, 1.14034, 0.370518 ) DX3DVNORM( 0, 0, -0 )  //71
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BASE_TIRERL___carwheelB_1 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BASE_TIRERL___carwheelB_1 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 72 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BASE_TIRERL___carwheelB_1	NULL
#define vertexbuff_KEIA_BASE_TIRERL___carwheelB_1	NULL
#endif




#if ((PT_KEIA_BASE_TIRERL___carwheelB_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIRERL___carwheelB_1 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BASE_TIRERL___carwheelB_1 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
	1, 4, 2, // 2 8
	4, 5, 2, // 3 11
	4, 6, 5, // 4 14
	6, 7, 5, // 5 17
	6, 8, 7, // 6 20
	8, 9, 7, // 7 23
	8, 10, 9, // 8 26
	10, 11, 9, // 9 29
	10, 12, 11, // 10 32
	12, 13, 11, // 11 35
	12, 14, 13, // 12 38
	14, 15, 13, // 13 41
	14, 16, 15, // 14 44
	16, 17, 15, // 15 47
	16, 18, 17, // 16 50
	18, 19, 17, // 17 53
	18, 20, 19, // 18 56
	20, 21, 19, // 19 59
	20, 22, 21, // 20 62
	22, 23, 21, // 21 65
	22, 24, 23, // 22 68
	24, 25, 23, // 23 71
	24, 26, 25, // 24 74
	26, 27, 25, // 25 77
	26, 28, 27, // 26 80
	28, 29, 27, // 27 83
	28, 30, 29, // 28 86
	30, 31, 29, // 29 89
	30, 32, 31, // 30 92
	32, 33, 31, // 31 95
	32, 34, 33, // 32 98
	34, 35, 33, // 33 101
	34, 36, 35, // 34 104
	36, 37, 35, // 35 107
	36, 38, 37, // 36 110
	38, 39, 37, // 37 113
	38, 0, 39, // 38 116
	0, 3, 39, // 39 119
	5, 7, 41, // 40 122
	7, 40, 41, // 41 125
	7, 9, 40, // 42 128
	9, 42, 40, // 43 131
	13, 15, 44, // 44 134
	15, 43, 44, // 45 137
	15, 17, 43, // 46 140
	17, 45, 43, // 47 143
	21, 23, 47, // 48 146
	23, 46, 47, // 49 149
	23, 25, 46, // 50 152
	25, 48, 46, // 51 155
	29, 31, 50, // 52 158
	31, 49, 50, // 53 161
	31, 33, 49, // 54 164
	33, 51, 49, // 55 167
	37, 52, 54, // 56 170
	52, 53, 54, // 57 173
	52, 3, 53, // 58 176
	3, 55, 53, // 59 179
	55, 56, 57, // 60 182
	56, 41, 57, // 61 185
	41, 40, 57, // 62 188
	40, 42, 57, // 63 191
	42, 58, 57, // 64 194
	58, 44, 57, // 65 197
	44, 43, 57, // 66 200
	43, 45, 57, // 67 203
	45, 59, 57, // 68 206
	59, 47, 57, // 69 209
	47, 46, 57, // 70 212
	46, 48, 57, // 71 215
	48, 60, 57, // 72 218
	60, 50, 57, // 73 221
	50, 49, 57, // 74 224
	49, 51, 57, // 75 227
	51, 61, 57, // 76 230
	61, 54, 57, // 77 233
	54, 62, 57, // 78 236
	62, 55, 57, // 79 239
	63, 64, 63, // 80 242
	64, 64, 63, // 81 245
	64, 65, 64, // 82 248
	65, 65, 64, // 83 251
	66, 67, 66, // 84 254
	67, 67, 66, // 85 257
	67, 68, 67, // 86 260
	68, 68, 67, // 87 263
	69, 70, 69, // 88 266
	70, 70, 69, // 89 269
	70, 71, 70, // 90 272
	71, 71, 70, // 91 275
DX3DINDEX_END
#endif

#else
#define index_KEIA_BASE_TIRERL___carwheelB_1	NULL
#endif




#if ((PT_KEIA_BASE_TIRERL___carwheelB_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BASE_TIRERL___carwheelB_1 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BASE_TIRERL___carwheelB_1_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BASE_TIRERL___carwheelB_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BASE_TIRERL___carwheelB_1 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BASE_TIRERL___carwheelB_1_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BASE_TIRERL___carwheelB_1_VERTEXSTRIP 	NULL
#endif






#if ((PT_KEIA_BASE_TIRERL___carbodyblack_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIRERL___carbodyblack_2 == PT_TRILIST ) || ((PT_KEIA_BASE_TIRERL___carbodyblack_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BASE_TIRERL___carbodyblack_2 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BASE_TIRERL___carbodyblack_2 )
DX3DVERT( -0.676385, 1.71051, 0.555777 ) DX3DVNORM( -0.864784, -0.477567, -0.15517 )  //0
DX3DVERT( -0.676385, 1.45504, 1.05715 ) DX3DVNORM( -0.864785, -0.406242, -0.295152 )  //1
DX3DVERT( -0.676385, 0.970028, 0.704767 ) DX3DVNORM( -0.994282, -0.0863956, -0.06277 )  //2
DX3DVERT( -0.676385, 1.14034, 0.370518 ) DX3DVNORM( -0.994282, -0.101564, -0.0330001 )  //3
DX3DVERT( -0.676385, 1.05715, 1.45504 ) DX3DVNORM( -0.864785, -0.295151, -0.406242 )  //4
DX3DVERT( -0.676385, 0.704767, 0.970029 ) DX3DVNORM( -0.994282, -0.0627699, -0.0863957 )  //5
DX3DVERT( -0.676385, -4.85044e-008, 1.79853 ) DX3DVNORM( -0.864783, 1.30051e-008, -0.502145 )  //6
DX3DVERT( -0.676385, -0.555777, 1.71051 ) DX3DVNORM( -0.864784, 0.155171, -0.477568 )  //7
DX3DVERT( -0.676385, -0.370518, 1.14034 ) DX3DVNORM( -0.994282, 0.0330002, -0.101564 )  //8
DX3DVERT( -0.676385, -4.85044e-008, 1.19902 ) DX3DVNORM( -0.994282, 6.55863e-009, -0.106791 )  //9
DX3DVERT( -0.676385, -1.05715, 1.45504 ) DX3DVNORM( -0.864785, 0.295152, -0.406242 )  //10
DX3DVERT( -0.676385, -0.704767, 0.970029 ) DX3DVNORM( -0.994282, 0.0627699, -0.0863957 )  //11
DX3DVERT( -0.676385, -1.71051, 0.555777 ) DX3DVNORM( -0.864784, 0.477568, -0.155171 )  //12
DX3DVERT( -0.676385, -1.79853, 9.70089e-008 ) DX3DVNORM( -0.864784, 0.502144, -4.33502e-009 )  //13
DX3DVERT( -0.676385, -1.19902, 9.70089e-008 ) DX3DVNORM( -0.994282, 0.106791, -1.87389e-009 )  //14
DX3DVERT( -0.676385, -1.14034, 0.370518 ) DX3DVNORM( -0.994282, 0.101564, -0.0330001 )  //15
DX3DVERT( -0.676385, -1.71051, -0.555777 ) DX3DVNORM( -0.864784, 0.477568, 0.155171 )  //16
DX3DVERT( -0.676385, -1.14034, -0.370518 ) DX3DVNORM( -0.994282, 0.101564, 0.0330002 )  //17
DX3DVERT( -0.676385, -1.05715, -1.45504 ) DX3DVNORM( -0.864786, 0.295151, 0.406241 )  //18
DX3DVERT( -0.676385, -0.555776, -1.71051 ) DX3DVNORM( -0.864785, 0.155171, 0.477567 )  //19
DX3DVERT( -0.676385, -0.370518, -1.14034 ) DX3DVNORM( -0.994282, 0.0330001, 0.101564 )  //20
DX3DVERT( -0.676385, -0.704767, -0.970028 ) DX3DVNORM( -0.994282, 0.06277, 0.0863956 )  //21
DX3DVERT( -0.676385, -4.85044e-008, -1.79853 ) DX3DVNORM( -0.864784, 4.33502e-008, 0.502144 )  //22
DX3DVERT( -0.676385, -4.85044e-008, -1.19902 ) DX3DVNORM( -0.994282, 6.55863e-009, 0.106791 )  //23
DX3DVERT( -0.676385, 1.05715, -1.45504 ) DX3DVNORM( -0.864785, -0.295151, 0.406241 )  //24
DX3DVERT( -0.676385, 1.45504, -1.05715 ) DX3DVNORM( -0.864785, -0.406242, 0.295152 )  //25
DX3DVERT( -0.676385, 0.970028, -0.704767 ) DX3DVNORM( -0.994282, -0.0863956, 0.0627701 )  //26
DX3DVERT( -0.676385, 0.704767, -0.970028 ) DX3DVNORM( -0.994282, -0.06277, 0.0863956 )  //27
DX3DVERT( -0.676385, 1.71051, -0.555777 ) DX3DVNORM( -0.864784, -0.477568, 0.155171 )  //28
DX3DVERT( -0.676385, 1.14034, -0.370518 ) DX3DVNORM( -0.994282, -0.101564, 0.0330001 )  //29
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( 0, 0, -0 )  //30
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( 0, 0, -0 )  //31
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( 0, 0, -0 )  //32
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( 0, 0, -0 )  //33
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( 0, 0, -0 )  //34
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( 0, 0, -0 )  //35
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( 0, 0, -0 )  //36
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( 0, 0, -0 )  //37
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( 0, 0, -0 )  //38
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( 0, 2.29447e-014, -0 )  //39
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( 0, 0, -0 )  //40
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( 0, 0, -0 )  //41
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( 0, 0, -0 )  //42
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( 0, 0, -0 )  //43
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( 0, 0, -0 )  //44
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( 0, 0, -0 )  //45
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( 0, 0, -0 )  //46
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( 0, 0, -0 )  //47
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( 0, 0, -0 )  //48
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( 0, 2.29447e-014, -0 )  //49
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.99999, -0.00403789, -0.00205869 )  //50
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( -0.99999, -0.00403789, -0.00205869 )  //51
DX3DVERT( 0.807322, 2.16494, 1.57292 ) DX3DVNORM( -0.99999, -0.00403789, -0.00205869 )  //52
DX3DVERT( 0.807322, 2.54504, 0.826932 ) DX3DVNORM( -0.99999, -0.00403789, -0.00205869 )  //53
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( -0.99999, -0.00320476, -0.00320651 )  //54
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.99999, -0.00320476, -0.00320651 )  //55
DX3DVERT( 0.807322, 1.57292, 2.16494 ) DX3DVNORM( -0.99999, -0.00320476, -0.00320651 )  //56
DX3DVERT( 0.807322, 2.16494, 1.57292 ) DX3DVNORM( -0.99999, -0.00320476, -0.00320651 )  //57
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.99999, -0.00205486, -0.00404004 )  //58
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.99999, -0.00205486, -0.00404004 )  //59
DX3DVERT( 0.807322, 0.826932, 2.54503 ) DX3DVNORM( -0.99999, -0.00205486, -0.00404004 )  //60
DX3DVERT( 0.807322, 1.57292, 2.16494 ) DX3DVNORM( -0.99999, -0.00205486, -0.00404004 )  //61
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.99999, -0.000709209, -0.00447809 )  //62
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( -0.99999, -0.000709209, -0.00447809 )  //63
DX3DVERT( 0.807322, -4.85044e-008, 2.67601 ) DX3DVNORM( -0.99999, -0.000709209, -0.00447809 )  //64
DX3DVERT( 0.807322, 0.826932, 2.54503 ) DX3DVNORM( -0.99999, -0.000709209, -0.00447809 )  //65
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( -0.99999, 0.000709337, -0.00447889 )  //66
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.99999, 0.000709337, -0.00447889 )  //67
DX3DVERT( 0.807322, -0.826932, 2.54504 ) DX3DVNORM( -0.99999, 0.000709337, -0.00447889 )  //68
DX3DVERT( 0.807322, -4.85044e-008, 2.67601 ) DX3DVNORM( -0.99999, 0.000709337, -0.00447889 )  //69
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.99999, 0.00205336, -0.00404044 )  //70
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( -0.99999, 0.00205336, -0.00404044 )  //71
DX3DVERT( 0.807322, -1.57292, 2.16494 ) DX3DVNORM( -0.99999, 0.00205336, -0.00404044 )  //72
DX3DVERT( 0.807322, -0.826932, 2.54504 ) DX3DVNORM( -0.99999, 0.00205336, -0.00404044 )  //73
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( -0.99999, 0.0032051, -0.00320296 )  //74
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.99999, 0.0032051, -0.00320296 )  //75
DX3DVERT( 0.807322, -2.16494, 1.57292 ) DX3DVNORM( -0.99999, 0.0032051, -0.00320296 )  //76
DX3DVERT( 0.807322, -1.57292, 2.16494 ) DX3DVNORM( -0.99999, 0.0032051, -0.00320296 )  //77
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.99999, 0.00404322, -0.00205631 )  //78
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.99999, 0.00404322, -0.00205631 )  //79
DX3DVERT( 0.807322, -2.54503, 0.826932 ) DX3DVNORM( -0.99999, 0.00404322, -0.00205631 )  //80
DX3DVERT( 0.807322, -2.16494, 1.57292 ) DX3DVNORM( -0.99999, 0.00404322, -0.00205631 )  //81
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.99999, 0.00447931, -0.000709303 )  //82
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( -0.99999, 0.00447931, -0.000709303 )  //83
DX3DVERT( 0.807322, -2.67601, 9.70089e-008 ) DX3DVNORM( -0.99999, 0.00447931, -0.000709303 )  //84
DX3DVERT( 0.807322, -2.54503, 0.826932 ) DX3DVNORM( -0.99999, 0.00447931, -0.000709303 )  //85
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( -0.99999, 0.00448858, 0.000709304 )  //86
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( -0.99999, 0.00448858, 0.000709304 )  //87
DX3DVERT( 0.807322, -2.54503, -0.826932 ) DX3DVNORM( -0.99999, 0.00448858, 0.000709304 )  //88
DX3DVERT( 0.807322, -2.67601, 9.70089e-008 ) DX3DVNORM( -0.99999, 0.00448858, 0.000709304 )  //89
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( -0.99999, 0.00403308, 0.0020585 )  //90
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( -0.99999, 0.00403308, 0.0020585 )  //91
DX3DVERT( 0.807322, -2.16494, -1.57292 ) DX3DVNORM( -0.99999, 0.00403308, 0.0020585 )  //92
DX3DVERT( 0.807322, -2.54503, -0.826932 ) DX3DVNORM( -0.99999, 0.00403308, 0.0020585 )  //93
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( -0.99999, 0.00320682, 0.00320628 )  //94
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.99999, 0.00320682, 0.00320628 )  //95
DX3DVERT( 0.807322, -1.57292, -2.16493 ) DX3DVNORM( -0.99999, 0.00320682, 0.00320628 )  //96
DX3DVERT( 0.807322, -2.16494, -1.57292 ) DX3DVNORM( -0.99999, 0.00320682, 0.00320628 )  //97
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.99999, 0.00205542, 0.00403597 )  //98
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( -0.99999, 0.00205542, 0.00403597 )  //99
DX3DVERT( 0.807322, -0.826932, -2.54504 ) DX3DVNORM( -0.99999, 0.00205542, 0.00403597 )  //100
DX3DVERT( 0.807322, -1.57292, -2.16493 ) DX3DVNORM( -0.99999, 0.00205542, 0.00403597 )  //101
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( -0.99999, 0.000709175, 0.00447423 )  //102
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -0.99999, 0.000709175, 0.00447423 )  //103
DX3DVERT( 0.807322, -4.85044e-008, -2.67601 ) DX3DVNORM( -0.99999, 0.000709175, 0.00447423 )  //104
DX3DVERT( 0.807322, -0.826932, -2.54504 ) DX3DVNORM( -0.99999, 0.000709175, 0.00447423 )  //105
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -0.99999, -0.000709885, 0.00447474 )  //106
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.99999, -0.000709885, 0.00447474 )  //107
DX3DVERT( 0.807322, 0.826932, -2.54504 ) DX3DVNORM( -0.99999, -0.000709885, 0.00447474 )  //108
DX3DVERT( 0.807322, -4.85044e-008, -2.67601 ) DX3DVNORM( -0.99999, -0.000709885, 0.00447474 )  //109
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.99999, -0.0020405, 0.00400667 )  //110
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.99999, -0.0020405, 0.00400667 )  //111
DX3DVERT( 0.807322, 1.57292, -2.16494 ) DX3DVNORM( -0.99999, -0.0020405, 0.00400667 )  //112
DX3DVERT( 0.807322, 0.826932, -2.54504 ) DX3DVNORM( -0.99999, -0.0020405, 0.00400667 )  //113
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.99999, -0.00318311, 0.00317948 )  //114
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.99999, -0.00318311, 0.00317948 )  //115
DX3DVERT( 0.807322, 2.16494, -1.57292 ) DX3DVNORM( -0.99999, -0.00318311, 0.00317948 )  //116
DX3DVERT( 0.807322, 1.57292, -2.16494 ) DX3DVNORM( -0.99999, -0.00318311, 0.00317948 )  //117
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.99999, -0.00403532, 0.00205632 )  //118
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.99999, -0.00403532, 0.00205632 )  //119
DX3DVERT( 0.807322, 2.54503, -0.826932 ) DX3DVNORM( -0.99999, -0.00403532, 0.00205632 )  //120
DX3DVERT( 0.807322, 2.16494, -1.57292 ) DX3DVNORM( -0.99999, -0.00403532, 0.00205632 )  //121
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.99999, -0.00448358, 0.000709277 )  //122
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -0.99999, -0.00448358, 0.000709277 )  //123
DX3DVERT( 0.807322, 2.67601, 9.70089e-008 ) DX3DVNORM( -0.99999, -0.00448358, 0.000709277 )  //124
DX3DVERT( 0.807322, 2.54503, -0.826932 ) DX3DVNORM( -0.99999, -0.00448358, 0.000709277 )  //125
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -0.99999, -0.00447732, -0.000709335 )  //126
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.99999, -0.00447732, -0.000709335 )  //127
DX3DVERT( 0.807322, 2.54504, 0.826932 ) DX3DVNORM( -0.99999, -0.00447732, -0.000709335 )  //128
DX3DVERT( 0.807322, 2.67601, 9.70089e-008 ) DX3DVNORM( -0.99999, -0.00447732, -0.000709335 )  //129
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.000205232, -0.309088, 0.951033 )  //130
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.000205232, -0.309088, 0.951033 )  //131
DX3DVERT( 0.807322, 2.54504, 0.826932 ) DX3DVNORM( -0.000205232, -0.309088, 0.951033 )  //132
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( 0.0022658, -0.587692, 0.809081 )  //133
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.0022658, -0.587692, 0.809081 )  //134
DX3DVERT( 0.807322, 2.16494, 1.57292 ) DX3DVNORM( 0.0022658, -0.587692, 0.809081 )  //135
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.997855, -0.0583282, -0.0297197 )  //136
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( -0.997855, -0.0583282, -0.0297197 )  //137
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0583282, -0.0297197 )  //138
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.00109155, -0.809041, 0.58775 )  //139
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00109155, -0.809041, 0.58775 )  //140
DX3DVERT( 0.807322, 1.57292, 2.16494 ) DX3DVNORM( -0.00109155, -0.809041, 0.58775 )  //141
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( -0.997855, -0.0462896, -0.0462896 )  //142
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.997855, -0.0462896, -0.0462896 )  //143
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0462896, -0.0462896 )  //144
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.000905487, -0.951071, 0.308971 )  //145
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.000905487, -0.951071, 0.308971 )  //146
DX3DVERT( 0.807322, 0.826932, 2.54503 ) DX3DVNORM( -0.000905487, -0.951071, 0.308971 )  //147
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( -0.997855, -0.0297196, -0.0583283 )  //148
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.997855, -0.0297196, -0.0583283 )  //149
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0297196, -0.0583283 )  //150
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( 6.57274e-007, -1, 2.94362e-009 )  //151
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 6.57274e-007, -1, 2.94362e-009 )  //152
DX3DVERT( 0.807322, -4.85044e-008, 2.67601 ) DX3DVNORM( 6.57274e-007, -1, 2.94362e-009 )  //153
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( -0.997855, -0.0102408, -0.0646574 )  //154
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( -0.997855, -0.0102408, -0.0646574 )  //155
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0102408, -0.0646574 )  //156
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.00100501, -0.951042, -0.30906 )  //157
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00100501, -0.951042, -0.30906 )  //158
DX3DVERT( 0.807322, -0.826932, 2.54504 ) DX3DVNORM( -0.00100501, -0.951042, -0.30906 )  //159
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( -0.997855, 0.0102408, -0.0646574 )  //160
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.997855, 0.0102408, -0.0646574 )  //161
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0102408, -0.0646574 )  //162
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( 3.86533e-005, -0.809, -0.587809 )  //163
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 3.86533e-005, -0.809, -0.587809 )  //164
DX3DVERT( 0.807322, -1.57292, 2.16494 ) DX3DVNORM( 3.86533e-005, -0.809, -0.587809 )  //165
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( -0.997855, 0.0297197, -0.0583283 )  //166
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( -0.997855, 0.0297197, -0.0583283 )  //167
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0297197, -0.0583283 )  //168
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.00229266, -0.587827, -0.808983 )  //169
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00229266, -0.587827, -0.808983 )  //170
DX3DVERT( 0.807322, -2.16494, 1.57292 ) DX3DVNORM( -0.00229266, -0.587827, -0.808983 )  //171
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( -0.997855, 0.0462895, -0.0462896 )  //172
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.997855, 0.0462895, -0.0462896 )  //173
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0462895, -0.0462896 )  //174
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.000413168, -0.309045, -0.951047 )  //175
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.000413168, -0.309045, -0.951047 )  //176
DX3DVERT( 0.807322, -2.54503, 0.826932 ) DX3DVNORM( -0.000413168, -0.309045, -0.951047 )  //177
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( -0.997855, 0.0583282, -0.0297197 )  //178
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.997855, 0.0583282, -0.0297197 )  //179
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0583282, -0.0297197 )  //180
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( 6.57345e-007, -2.94888e-009, -1 )  //181
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 6.57345e-007, -2.94888e-009, -1 )  //182
DX3DVERT( 0.807322, -2.67601, 9.70089e-008 ) DX3DVNORM( 6.57345e-007, -2.94888e-009, -1 )  //183
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( -0.997855, 0.0646574, -0.0102407 )  //184
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( -0.997855, 0.0646574, -0.0102407 )  //185
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0646574, -0.0102407 )  //186
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( 0.000881559, 0.309004, -0.95106 )  //187
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.000881559, 0.309004, -0.95106 )  //188
DX3DVERT( 0.807322, -2.54503, -0.826932 ) DX3DVNORM( 0.000881559, 0.309004, -0.95106 )  //189
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( -0.997855, 0.0646574, 0.0102407 )  //190
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( -0.997855, 0.0646574, 0.0102407 )  //191
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0646574, 0.0102407 )  //192
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( 0.000601854, 0.587748, -0.809044 )  //193
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.000601854, 0.587748, -0.809044 )  //194
DX3DVERT( 0.807322, -2.16494, -1.57292 ) DX3DVNORM( 0.000601854, 0.587748, -0.809044 )  //195
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( -0.997855, 0.0583282, 0.0297197 )  //196
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( -0.997855, 0.0583282, 0.0297197 )  //197
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0583282, 0.0297197 )  //198
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.00126643, 0.808994, -0.587815 )  //199
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00126643, 0.808994, -0.587815 )  //200
DX3DVERT( 0.807322, -1.57292, -2.16493 ) DX3DVNORM( -0.00126643, 0.808994, -0.587815 )  //201
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( -0.997855, 0.0462895, 0.0462896 )  //202
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.997855, 0.0462895, 0.0462896 )  //203
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0462895, 0.0462896 )  //204
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( 0.00143018, 0.951022, -0.309121 )  //205
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.00143018, 0.951022, -0.309121 )  //206
DX3DVERT( 0.807322, -0.826932, -2.54504 ) DX3DVNORM( 0.00143018, 0.951022, -0.309121 )  //207
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( -0.997855, 0.0297197, 0.0583283 )  //208
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( -0.997855, 0.0297197, 0.0583283 )  //209
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0297197, 0.0583283 )  //210
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -6.57365e-007, 1, 2.94415e-009 )  //211
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -6.57365e-007, 1, 2.94415e-009 )  //212
DX3DVERT( 0.807322, -4.85044e-008, -2.67601 ) DX3DVNORM( -6.57365e-007, 1, 2.94415e-009 )  //213
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( -0.997855, 0.0102408, 0.0646574 )  //214
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -0.997855, 0.0102408, 0.0646574 )  //215
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, 0.0102408, 0.0646574 )  //216
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.00201088, 0.951027, 0.309102 )  //217
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00201088, 0.951027, 0.309102 )  //218
DX3DVERT( 0.807322, 0.826932, -2.54504 ) DX3DVNORM( -0.00201088, 0.951027, 0.309102 )  //219
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( -0.997855, -0.0102408, 0.0646574 )  //220
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.997855, -0.0102408, 0.0646574 )  //221
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0102408, 0.0646574 )  //222
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.0013701, 0.808891, 0.587958 )  //223
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.0013701, 0.808891, 0.587958 )  //224
DX3DVERT( 0.807322, 1.57292, -2.16494 ) DX3DVNORM( -0.0013701, 0.808891, 0.587958 )  //225
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( -0.997855, -0.0297197, 0.0583283 )  //226
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.997855, -0.0297197, 0.0583283 )  //227
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0297197, 0.0583283 )  //228
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.00421282, 0.587463, 0.80924 )  //229
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.00421282, 0.587463, 0.80924 )  //230
DX3DVERT( 0.807322, 2.16494, -1.57292 ) DX3DVNORM( -0.00421282, 0.587463, 0.80924 )  //231
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( -0.997855, -0.0462895, 0.0462896 )  //232
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.997855, -0.0462895, 0.0462896 )  //233
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0462895, 0.0462896 )  //234
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.000799616, 0.308986, 0.951066 )  //235
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.000799616, 0.308986, 0.951066 )  //236
DX3DVERT( 0.807322, 2.54503, -0.826932 ) DX3DVNORM( -0.000799616, 0.308986, 0.951066 )  //237
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( -0.997855, -0.0583282, 0.0297197 )  //238
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.997855, -0.0583282, 0.0297197 )  //239
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0583282, 0.0297197 )  //240
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -6.57372e-007, -2.94871e-009, 1 )  //241
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -6.57372e-007, -2.94871e-009, 1 )  //242
DX3DVERT( 0.807322, 2.67601, 9.70089e-008 ) DX3DVNORM( -6.57372e-007, -2.94871e-009, 1 )  //243
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( -0.997855, -0.0646574, 0.0102407 )  //244
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -0.997855, -0.0646574, 0.0102407 )  //245
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0646574, 0.0102407 )  //246
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( -0.997855, -0.0646574, -0.0102407 )  //247
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( -0.997855, -0.0646574, -0.0102407 )  //248
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( -0.997855, -0.0646574, -0.0102407 )  //249
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0, 0, -0 )  //250
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( 0.997855, 0.0583281, 0.0297197 )  //251
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( 0.997855, 0.0583281, 0.0297197 )  //252
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0583281, 0.0297197 )  //253
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( 0.997855, 0.0462896, 0.0462896 )  //254
DX3DVERT( 0.807294, 2.17, 1.5766 ) DX3DVNORM( 0.997855, 0.0462896, 0.0462896 )  //255
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0462896, 0.0462896 )  //256
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( 0.997855, 0.0297197, 0.0583283 )  //257
DX3DVERT( 0.807294, 1.5766, 2.17 ) DX3DVNORM( 0.997855, 0.0297197, 0.0583283 )  //258
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0297197, 0.0583283 )  //259
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( 0.997855, 0.0102408, 0.0646574 )  //260
DX3DVERT( 0.807294, 0.828865, 2.55098 ) DX3DVNORM( 0.997855, 0.0102408, 0.0646574 )  //261
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0102408, 0.0646574 )  //262
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( 0.997855, -0.0102408, 0.0646574 )  //263
DX3DVERT( 0.807294, -4.85044e-008, 2.68226 ) DX3DVNORM( 0.997855, -0.0102408, 0.0646574 )  //264
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0102408, 0.0646574 )  //265
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( 0.997855, -0.0297197, 0.0583283 )  //266
DX3DVERT( 0.807294, -0.828865, 2.55098 ) DX3DVNORM( 0.997855, -0.0297197, 0.0583283 )  //267
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0297197, 0.0583283 )  //268
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( 0.997855, -0.0462895, 0.0462896 )  //269
DX3DVERT( 0.807294, -1.5766, 2.17 ) DX3DVNORM( 0.997855, -0.0462895, 0.0462896 )  //270
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0462895, 0.0462896 )  //271
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( 0.997855, -0.0583282, 0.0297197 )  //272
DX3DVERT( 0.807294, -2.17, 1.57659 ) DX3DVNORM( 0.997855, -0.0583282, 0.0297197 )  //273
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0583282, 0.0297197 )  //274
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( 0.997855, -0.0646574, 0.0102407 )  //275
DX3DVERT( 0.807294, -2.55098, 0.828865 ) DX3DVNORM( 0.997855, -0.0646574, 0.0102407 )  //276
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0646574, 0.0102407 )  //277
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( 0.997855, -0.0646574, -0.0102407 )  //278
DX3DVERT( 0.807294, -2.68226, 9.70089e-008 ) DX3DVNORM( 0.997855, -0.0646574, -0.0102407 )  //279
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0646574, -0.0102407 )  //280
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( 0.997855, -0.0583282, -0.0297197 )  //281
DX3DVERT( 0.807294, -2.55098, -0.828865 ) DX3DVNORM( 0.997855, -0.0583282, -0.0297197 )  //282
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0583282, -0.0297197 )  //283
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( 0.997855, -0.0462895, -0.0462896 )  //284
DX3DVERT( 0.807294, -2.17, -1.57659 ) DX3DVNORM( 0.997855, -0.0462895, -0.0462896 )  //285
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0462895, -0.0462896 )  //286
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( 0.997855, -0.0297197, -0.0583283 )  //287
DX3DVERT( 0.807294, -1.57659, -2.17 ) DX3DVNORM( 0.997855, -0.0297197, -0.0583283 )  //288
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0297197, -0.0583283 )  //289
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( 0.997855, -0.0102408, -0.0646574 )  //290
DX3DVERT( 0.807294, -0.828865, -2.55098 ) DX3DVNORM( 0.997855, -0.0102408, -0.0646574 )  //291
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, -0.0102408, -0.0646574 )  //292
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( 0.997855, 0.0102408, -0.0646574 )  //293
DX3DVERT( 0.807294, -4.85044e-008, -2.68226 ) DX3DVNORM( 0.997855, 0.0102408, -0.0646574 )  //294
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0102408, -0.0646574 )  //295
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( 0.997855, 0.0297198, -0.0583283 )  //296
DX3DVERT( 0.807294, 0.828865, -2.55098 ) DX3DVNORM( 0.997855, 0.0297198, -0.0583283 )  //297
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0297198, -0.0583283 )  //298
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( 0.997855, 0.0462895, -0.0462896 )  //299
DX3DVERT( 0.807294, 1.57659, -2.17 ) DX3DVNORM( 0.997855, 0.0462895, -0.0462896 )  //300
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0462895, -0.0462896 )  //301
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( 0.997855, 0.0583283, -0.0297197 )  //302
DX3DVERT( 0.807294, 2.17, -1.57659 ) DX3DVNORM( 0.997855, 0.0583283, -0.0297197 )  //303
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0583283, -0.0297197 )  //304
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( 0.997855, 0.0646574, -0.0102407 )  //305
DX3DVERT( 0.807294, 2.55098, -0.828865 ) DX3DVNORM( 0.997855, 0.0646574, -0.0102407 )  //306
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0646574, -0.0102407 )  //307
DX3DVERT( 0.807294, 2.55098, 0.828865 ) DX3DVNORM( 0.997855, 0.0646575, 0.0102407 )  //308
DX3DVERT( 0.807294, 2.68226, 9.70089e-008 ) DX3DVNORM( 0.997855, 0.0646575, 0.0102407 )  //309
DX3DVERT( 0.981095, 5.78476e-008, 2.03361e-007 ) DX3DVNORM( 0.997855, 0.0646575, 0.0102407 )  //310
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BASE_TIRERL___carbodyblack_2 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BASE_TIRERL___carbodyblack_2 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 311 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BASE_TIRERL___carbodyblack_2	NULL
#define vertexbuff_KEIA_BASE_TIRERL___carbodyblack_2	NULL
#endif




#if ((PT_KEIA_BASE_TIRERL___carbodyblack_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_TIRERL___carbodyblack_2 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BASE_TIRERL___carbodyblack_2 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
	1, 4, 2, // 2 8
	4, 5, 2, // 3 11
	6, 7, 9, // 4 14
	7, 8, 9, // 5 17
	7, 10, 8, // 6 20
	10, 11, 8, // 7 23
	12, 13, 15, // 8 26
	13, 14, 15, // 9 29
	13, 16, 14, // 10 32
	16, 17, 14, // 11 35
	18, 19, 21, // 12 38
	19, 20, 21, // 13 41
	19, 22, 20, // 14 44
	22, 23, 20, // 15 47
	24, 25, 27, // 16 50
	25, 26, 27, // 17 53
	25, 28, 26, // 18 56
	28, 29, 26, // 19 59
	30, 31, 30, // 20 62
	31, 31, 30, // 21 65
	32, 30, 32, // 22 68
	30, 30, 32, // 23 71
	33, 32, 33, // 24 74
	32, 32, 33, // 25 77
	34, 33, 34, // 26 80
	33, 33, 34, // 27 83
	35, 34, 35, // 28 86
	34, 34, 35, // 29 89
	36, 35, 36, // 30 92
	35, 35, 36, // 31 95
	37, 36, 37, // 32 98
	36, 36, 37, // 33 101
	38, 37, 38, // 34 104
	37, 37, 38, // 35 107
	39, 38, 39, // 36 110
	38, 38, 39, // 37 113
	40, 39, 40, // 38 116
	39, 39, 40, // 39 119
	41, 40, 41, // 40 122
	40, 40, 41, // 41 125
	42, 41, 42, // 42 128
	41, 41, 42, // 43 131
	43, 42, 43, // 44 134
	42, 42, 43, // 45 137
	44, 43, 44, // 46 140
	43, 43, 44, // 47 143
	45, 44, 45, // 48 146
	44, 44, 45, // 49 149
	46, 45, 46, // 50 152
	45, 45, 46, // 51 155
	47, 46, 47, // 52 158
	46, 46, 47, // 53 161
	48, 47, 48, // 54 164
	47, 47, 48, // 55 167
	49, 48, 49, // 56 170
	48, 48, 49, // 57 173
	31, 49, 31, // 58 176
	49, 49, 31, // 59 179
	31, 30, 31, // 60 182
	30, 30, 31, // 61 185
	30, 32, 30, // 62 188
	32, 32, 30, // 63 191
	32, 33, 32, // 64 194
	33, 33, 32, // 65 197
	33, 34, 33, // 66 200
	34, 34, 33, // 67 203
	34, 35, 34, // 68 206
	35, 35, 34, // 69 209
	35, 36, 35, // 70 212
	36, 36, 35, // 71 215
	36, 37, 36, // 72 218
	37, 37, 36, // 73 221
	37, 38, 37, // 74 224
	38, 38, 37, // 75 227
	38, 39, 38, // 76 230
	39, 39, 38, // 77 233
	39, 40, 39, // 78 236
	40, 40, 39, // 79 239
	40, 41, 40, // 80 242
	41, 41, 40, // 81 245
	41, 42, 41, // 82 248
	42, 42, 41, // 83 251
	42, 43, 42, // 84 254
	43, 43, 42, // 85 257
	43, 44, 43, // 86 260
	44, 44, 43, // 87 263
	44, 45, 44, // 88 266
	45, 45, 44, // 89 269
	45, 46, 45, // 90 272
	46, 46, 45, // 91 275
	46, 47, 46, // 92 278
	47, 47, 46, // 93 281
	47, 48, 47, // 94 284
	48, 48, 47, // 95 287
	48, 49, 48, // 96 290
	49, 49, 48, // 97 293
	49, 31, 49, // 98 296
	31, 31, 49, // 99 299
	31, 31, 31, // 100 302
	31, 31, 31, // 101 305
	30, 30, 30, // 102 308
	30, 30, 30, // 103 311
	30, 31, 30, // 104 314
	31, 31, 30, // 105 317
	32, 32, 32, // 106 320
	32, 32, 32, // 107 323
	32, 30, 32, // 108 326
	30, 30, 32, // 109 329
	33, 33, 33, // 110 332
	33, 33, 33, // 111 335
	33, 32, 33, // 112 338
	32, 32, 33, // 113 341
	34, 34, 34, // 114 344
	34, 34, 34, // 115 347
	34, 33, 34, // 116 350
	33, 33, 34, // 117 353
	35, 35, 35, // 118 356
	35, 35, 35, // 119 359
	35, 34, 35, // 120 362
	34, 34, 35, // 121 365
	36, 36, 36, // 122 368
	36, 36, 36, // 123 371
	36, 35, 36, // 124 374
	35, 35, 36, // 125 377
	37, 37, 37, // 126 380
	37, 37, 37, // 127 383
	37, 36, 37, // 128 386
	36, 36, 37, // 129 389
	38, 38, 38, // 130 392
	38, 38, 38, // 131 395
	38, 37, 38, // 132 398
	37, 37, 38, // 133 401
	39, 39, 39, // 134 404
	39, 39, 39, // 135 407
	39, 38, 39, // 136 410
	38, 38, 39, // 137 413
	40, 40, 40, // 138 416
	40, 40, 40, // 139 419
	40, 39, 40, // 140 422
	39, 39, 40, // 141 425
	41, 41, 41, // 142 428
	41, 41, 41, // 143 431
	41, 40, 41, // 144 434
	40, 40, 41, // 145 437
	42, 42, 42, // 146 440
	42, 42, 42, // 147 443
	42, 41, 42, // 148 446
	41, 41, 42, // 149 449
	43, 43, 43, // 150 452
	43, 43, 43, // 151 455
	43, 42, 43, // 152 458
	42, 42, 43, // 153 461
	44, 44, 44, // 154 464
	44, 44, 44, // 155 467
	44, 43, 44, // 156 470
	43, 43, 44, // 157 473
	45, 45, 45, // 158 476
	45, 45, 45, // 159 479
	45, 44, 45, // 160 482
	44, 44, 45, // 161 485
	46, 46, 46, // 162 488
	46, 46, 46, // 163 491
	46, 45, 46, // 164 494
	45, 45, 46, // 165 497
	47, 47, 47, // 166 500
	47, 47, 47, // 167 503
	47, 46, 47, // 168 506
	46, 46, 47, // 169 509
	48, 48, 48, // 170 512
	48, 48, 48, // 171 515
	48, 47, 48, // 172 518
	47, 47, 48, // 173 521
	49, 49, 49, // 174 524
	49, 49, 49, // 175 527
	49, 48, 49, // 176 530
	48, 48, 49, // 177 533
	31, 49, 31, // 178 536
	49, 49, 31, // 179 539
	50, 51, 53, // 180 542
	51, 52, 53, // 181 545
	54, 55, 57, // 182 548
	55, 56, 57, // 183 551
	58, 59, 61, // 184 554
	59, 60, 61, // 185 557
	62, 63, 65, // 186 560
	63, 64, 65, // 187 563
	66, 67, 69, // 188 566
	67, 68, 69, // 189 569
	70, 71, 73, // 190 572
	71, 72, 73, // 191 575
	74, 75, 77, // 192 578
	75, 76, 77, // 193 581
	78, 79, 81, // 194 584
	79, 80, 81, // 195 587
	82, 83, 85, // 196 590
	83, 84, 85, // 197 593
	86, 87, 89, // 198 596
	87, 88, 89, // 199 599
	90, 91, 93, // 200 602
	91, 92, 93, // 201 605
	94, 95, 97, // 202 608
	95, 96, 97, // 203 611
	98, 99, 101, // 204 614
	99, 100, 101, // 205 617
	102, 103, 105, // 206 620
	103, 104, 105, // 207 623
	106, 107, 109, // 208 626
	107, 108, 109, // 209 629
	110, 111, 113, // 210 632
	111, 112, 113, // 211 635
	114, 115, 117, // 212 638
	115, 116, 117, // 213 641
	118, 119, 121, // 214 644
	119, 120, 121, // 215 647
	122, 123, 125, // 216 650
	123, 124, 125, // 217 653
	126, 127, 129, // 218 656
	127, 128, 129, // 219 659
	130, 130, 132, // 220 662
	130, 131, 132, // 221 665
	133, 133, 135, // 222 668
	133, 134, 135, // 223 671
	136, 137, 138, // 224 674
	139, 139, 141, // 225 677
	139, 140, 141, // 226 680
	142, 143, 144, // 227 683
	145, 145, 147, // 228 686
	145, 146, 147, // 229 689
	148, 149, 150, // 230 692
	151, 151, 153, // 231 695
	151, 152, 153, // 232 698
	154, 155, 156, // 233 701
	157, 157, 159, // 234 704
	157, 158, 159, // 235 707
	160, 161, 162, // 236 710
	163, 163, 165, // 237 713
	163, 164, 165, // 238 716
	166, 167, 168, // 239 719
	169, 169, 171, // 240 722
	169, 170, 171, // 241 725
	172, 173, 174, // 242 728
	175, 175, 177, // 243 731
	175, 176, 177, // 244 734
	178, 179, 180, // 245 737
	181, 181, 183, // 246 740
	181, 182, 183, // 247 743
	184, 185, 186, // 248 746
	187, 187, 189, // 249 749
	187, 188, 189, // 250 752
	190, 191, 192, // 251 755
	193, 193, 195, // 252 758
	193, 194, 195, // 253 761
	196, 197, 198, // 254 764
	199, 199, 201, // 255 767
	199, 200, 201, // 256 770
	202, 203, 204, // 257 773
	205, 205, 207, // 258 776
	205, 206, 207, // 259 779
	208, 209, 210, // 260 782
	211, 211, 213, // 261 785
	211, 212, 213, // 262 788
	214, 215, 216, // 263 791
	217, 217, 219, // 264 794
	217, 218, 219, // 265 797
	220, 221, 222, // 266 800
	223, 223, 225, // 267 803
	223, 224, 225, // 268 806
	226, 227, 228, // 269 809
	229, 229, 231, // 270 812
	229, 230, 231, // 271 815
	232, 233, 234, // 272 818
	235, 235, 237, // 273 821
	235, 236, 237, // 274 824
	238, 239, 240, // 275 827
	241, 241, 243, // 276 830
	241, 242, 243, // 277 833
	244, 245, 246, // 278 836
	247, 248, 249, // 279 839
	130, 130, 132, // 280 842
	130, 131, 132, // 281 845
	133, 133, 135, // 282 848
	133, 134, 135, // 283 851
	136, 137, 138, // 284 854
	139, 139, 141, // 285 857
	139, 140, 141, // 286 860
	142, 143, 144, // 287 863
	145, 145, 147, // 288 866
	145, 146, 147, // 289 869
	148, 149, 150, // 290 872
	151, 151, 153, // 291 875
	151, 152, 153, // 292 878
	154, 155, 156, // 293 881
	157, 157, 159, // 294 884
	157, 158, 159, // 295 887
	160, 161, 162, // 296 890
	163, 163, 165, // 297 893
	163, 164, 165, // 298 896
	166, 167, 168, // 299 899
	169, 169, 171, // 300 902
	169, 170, 171, // 301 905
	172, 173, 174, // 302 908
	175, 175, 177, // 303 911
	175, 176, 177, // 304 914
	178, 179, 180, // 305 917
	181, 181, 183, // 306 920
	181, 182, 183, // 307 923
	184, 185, 186, // 308 926
	187, 187, 189, // 309 929
	187, 188, 189, // 310 932
	190, 191, 192, // 311 935
	193, 193, 195, // 312 938
	193, 194, 195, // 313 941
	196, 197, 198, // 314 944
	199, 199, 201, // 315 947
	199, 200, 201, // 316 950
	202, 203, 204, // 317 953
	205, 205, 207, // 318 956
	205, 206, 207, // 319 959
	208, 209, 210, // 320 962
	211, 211, 213, // 321 965
	211, 212, 213, // 322 968
	214, 215, 216, // 323 971
	217, 217, 219, // 324 974
	217, 218, 219, // 325 977
	220, 221, 222, // 326 980
	223, 223, 225, // 327 983
	223, 224, 225, // 328 986
	226, 227, 228, // 329 989
	229, 229, 231, // 330 992
	229, 230, 231, // 331 995
	232, 233, 234, // 332 998
	235, 235, 237, // 333 1001
	235, 236, 237, // 334 1004
	238, 239, 240, // 335 1007
	241, 241, 243, // 336 1010
	241, 242, 243, // 337 1013
	244, 245, 246, // 338 1016
	247, 248, 249, // 339 1019
	31, 31, 250, // 340 1022
	31, 31, 250, // 341 1025
	30, 30, 250, // 342 1028
	30, 30, 250, // 343 1031
	251, 252, 253, // 344 1034
	32, 32, 250, // 345 1037
	32, 32, 250, // 346 1040
	254, 255, 256, // 347 1043
	33, 33, 250, // 348 1046
	33, 33, 250, // 349 1049
	257, 258, 259, // 350 1052
	34, 34, 250, // 351 1055
	34, 34, 250, // 352 1058
	260, 261, 262, // 353 1061
	35, 35, 250, // 354 1064
	35, 35, 250, // 355 1067
	263, 264, 265, // 356 1070
	36, 36, 250, // 357 1073
	36, 36, 250, // 358 1076
	266, 267, 268, // 359 1079
	37, 37, 250, // 360 1082
	37, 37, 250, // 361 1085
	269, 270, 271, // 362 1088
	38, 38, 250, // 363 1091
	38, 38, 250, // 364 1094
	272, 273, 274, // 365 1097
	39, 39, 250, // 366 1100
	39, 39, 250, // 367 1103
	275, 276, 277, // 368 1106
	40, 40, 250, // 369 1109
	40, 40, 250, // 370 1112
	278, 279, 280, // 371 1115
	41, 41, 250, // 372 1118
	41, 41, 250, // 373 1121
	281, 282, 283, // 374 1124
	42, 42, 250, // 375 1127
	42, 42, 250, // 376 1130
	284, 285, 286, // 377 1133
	43, 43, 250, // 378 1136
	43, 43, 250, // 379 1139
	287, 288, 289, // 380 1142
	44, 44, 250, // 381 1145
	44, 44, 250, // 382 1148
	290, 291, 292, // 383 1151
	45, 45, 250, // 384 1154
	45, 45, 250, // 385 1157
	293, 294, 295, // 386 1160
	46, 46, 250, // 387 1163
	46, 46, 250, // 388 1166
	296, 297, 298, // 389 1169
	47, 47, 250, // 390 1172
	47, 47, 250, // 391 1175
	299, 300, 301, // 392 1178
	48, 48, 250, // 393 1181
	48, 48, 250, // 394 1184
	302, 303, 304, // 395 1187
	49, 49, 250, // 396 1190
	49, 49, 250, // 397 1193
	305, 306, 307, // 398 1196
	308, 309, 310, // 399 1199
DX3DINDEX_END
#endif

#else
#define index_KEIA_BASE_TIRERL___carbodyblack_2	NULL
#endif




#if ((PT_KEIA_BASE_TIRERL___carbodyblack_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BASE_TIRERL___carbodyblack_2 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BASE_TIRERL___carbodyblack_2_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BASE_TIRERL___carbodyblack_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BASE_TIRERL___carbodyblack_2 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BASE_TIRERL___carbodyblack_2_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BASE_TIRERL___carbodyblack_2_VERTEXSTRIP 	NULL
#endif




DX3DMODELTBL_START( modeltbl_KEIA_BASE_TIRERL__ )
DX3DMODEL_START( model_KEIA_BASE_TIRERL___cartire_0 )
DX3DMODEL_VERTEX( vertex_KEIA_BASE_TIRERL___cartire_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BASE_TIRERL___cartire_0 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 516 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_cartire )
DX3DMODEL_END
DX3DMODEL_START( model_KEIA_BASE_TIRERL___carwheelB_1 )
DX3DMODEL_VERTEX( vertex_KEIA_BASE_TIRERL___carwheelB_1 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BASE_TIRERL___carwheelB_1 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 276 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carwheelB )
DX3DMODEL_END
DX3DMODEL_START( model_KEIA_BASE_TIRERL___carbodyblack_2 )
DX3DMODEL_VERTEX( vertex_KEIA_BASE_TIRERL___carbodyblack_2 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BASE_TIRERL___carbodyblack_2 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 1200 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carbodyblack )
DX3DMODEL_END
DX3DMODELTBL_END




DX3DOBJECT_START_HASH( object_KEIA_BASE_TIRERL__, 315234985 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_KEIA_BASE_TIRERL__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	5.94, 2.86276, 13.14, 
	-0, -0, 0,                // -0, -0, 0
	-1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	5.94, 2.86276, 13.14, 
	-0, -0, 0,                // -0, -0, 0
	-1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_KEIA_BASE_TIRERR__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_KEIA_BASE_INNER__
/////////////////////////////////////////////
#if 0
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 7.20244, -5.29417, 1
#endif



#if ((PT_KEIA_BASE_INNER___carbodyblack_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_INNER___carbodyblack_0 == PT_TRILIST ) || ((PT_KEIA_BASE_INNER___carbodyblack_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BASE_INNER___carbodyblack_0 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BASE_INNER___carbodyblack_0 )
DX3DVERT( -6.1141, 0, -10.623 ) DX3DVNORM( 0, 1, -0 )  //0
DX3DVERT( -4.75541, 0, -10.623 ) DX3DVNORM( 0, 1, -0 )  //1
DX3DVERT( -4.75541, 0, -8.69154 ) DX3DVNORM( -0.000464325, 0.999999, -0.000968443 )  //2
DX3DVERT( -6.1141, 0, -8.69154 ) DX3DVNORM( -0.000928605, 0.999999, -0.000653231 )  //3
DX3DVERT( -3.39672, 0, -10.623 ) DX3DVNORM( 0, 1, -0 )  //4
DX3DVERT( -3.39672, 0, -8.69154 ) DX3DVNORM( 0, 0.999999, -0.00128366 )  //5
DX3DVERT( -2.03803, 0, -10.623 ) DX3DVNORM( 0, 1, -0 )  //6
DX3DVERT( -2.03803, 0, -8.69154 ) DX3DVNORM( 6.60995e-008, 0.999999, -0.00128361 )  //7
DX3DVERT( -0.679345, 0, -10.623 ) DX3DVNORM( 0, 1, -0 )  //8
DX3DVERT( -0.679345, 0, -8.69154 ) DX3DVNORM( 0.000464304, 0.999999, -0.000968368 )  //9
DX3DVERT( 0.679345, 0, -10.623 ) DX3DVNORM( 0, 1, -0 )  //10
DX3DVERT( 0.679345, 0, -8.69154 ) DX3DVNORM( 0.000464259, 1, -0.000326585 )  //11
DX3DVERT( 2.03803, 0, -10.623 ) DX3DVNORM( 0, 1, -0 )  //12
DX3DVERT( 2.03803, 0, -8.69154 ) DX3DVNORM( 0, 1, -0 )  //13
DX3DVERT( 3.39672, 0, -10.623 ) DX3DVNORM( 0, 1, -0 )  //14
DX3DVERT( 3.39672, 0, -8.69154 ) DX3DVNORM( 0, 1, -0 )  //15
DX3DVERT( 4.75541, 0, -10.623 ) DX3DVNORM( 0, 1, -0 )  //16
DX3DVERT( 4.75541, 0, -8.69154 ) DX3DVNORM( 0, 1, -0 )  //17
DX3DVERT( 6.1141, 0, -10.623 ) DX3DVNORM( 0, 1, -0 )  //18
DX3DVERT( 6.1141, 0, -8.69154 ) DX3DVNORM( 0, 1, -0 )  //19
DX3DVERT( -4.75541, 0.00513816, -6.69012 ) DX3DVNORM( -0.00126101, 0.999999, -0.000839705 )  //20
DX3DVERT( -6.1141, 0, -6.76009 ) DX3DVNORM( -0.00189147, 0.999998, 2.40989e-005 )  //21
DX3DVERT( -3.39672, 0.0051384, -6.69012 ) DX3DVNORM( 0, 0.999997, -0.00256731 )  //22
DX3DVERT( -2.03803, 0.00513816, -6.69012 ) DX3DVNORM( 1.32199e-007, 0.999997, -0.00256722 )  //23
DX3DVERT( -0.679345, 0.00513768, -6.69012 ) DX3DVNORM( 0.00126092, 0.999999, -0.000839647 )  //24
DX3DVERT( 0.679345, 0, -6.76009 ) DX3DVNORM( 0.000945646, 1, 1.20485e-005 )  //25
DX3DVERT( 2.03803, 0, -6.76009 ) DX3DVNORM( 0, 1, -0 )  //26
DX3DVERT( 3.39672, 0, -6.76009 ) DX3DVNORM( 0, 1, -0 )  //27
DX3DVERT( 4.75541, 0, -6.76009 ) DX3DVNORM( 0, 1, -0 )  //28
DX3DVERT( 6.1141, 0, -6.76009 ) DX3DVNORM( 0, 1, -0 )  //29
DX3DVERT( -4.75541, 0, -4.82864 ) DX3DVNORM( -0.000962863, 0.999999, 0.00067733 )  //30
DX3DVERT( -6.1141, 0, -4.82864 ) DX3DVNORM( -0.000962863, 0.999999, 0.00067733 )  //31
DX3DVERT( 0.679345, 0, -4.82864 ) DX3DVNORM( 0.000641849, 1, 0.000451512 )  //32
DX3DVERT( -0.679345, 0, -4.82864 ) DX3DVNORM( 0.000962773, 0.999999, 0.000677267 )  //33
DX3DVERT( 2.03803, 0, -4.82864 ) DX3DVNORM( 0, 1, -0 )  //34
DX3DVERT( 3.39672, 0, -4.82864 ) DX3DVNORM( 0, 1, -0 )  //35
DX3DVERT( 4.75541, 0, -4.82864 ) DX3DVNORM( 0, 1, -0 )  //36
DX3DVERT( 6.1141, 0, -4.82864 ) DX3DVNORM( 0, 1, -0 )  //37
DX3DVERT( -4.75541, 0, -2.89718 ) DX3DVNORM( 0, 1, -0 )  //38
DX3DVERT( -6.1141, 0, -2.89718 ) DX3DVNORM( 0, 1, -0 )  //39
DX3DVERT( -4.35962, 3.93236, -3.75273 ) DX3DVNORM( 0, 1, -0 )  //40
DX3DVERT( -3.59464, 3.93236, -3.75273 ) DX3DVNORM( 0, 1, -0 )  //41
DX3DVERT( -3.59464, 3.93236, -2.69312 ) DX3DVNORM( 0, 1, -0 )  //42
DX3DVERT( -4.35962, 3.93236, -2.69312 ) DX3DVNORM( 0, 1, -0 )  //43
DX3DVERT( -3.39056, 5.3043, -3.58992 ) DX3DVNORM( 0, 1, -0 )  //44
DX3DVERT( -2.04419, 5.3043, -3.58992 ) DX3DVNORM( 0, 1, -0 )  //45
DX3DVERT( -2.04419, 5.3043, -2.85593 ) DX3DVNORM( 0, 1, -0 )  //46
DX3DVERT( -3.39056, 5.3043, -2.85593 ) DX3DVNORM( 0, 1, -0 )  //47
DX3DVERT( -1.84012, 3.93236, -3.75273 ) DX3DVNORM( 0, 1, -0 )  //48
DX3DVERT( -1.07514, 3.93236, -3.75273 ) DX3DVNORM( 0, 1, -0 )  //49
DX3DVERT( -1.07514, 3.93236, -2.69312 ) DX3DVNORM( 0, 1, -0 )  //50
DX3DVERT( -1.84012, 3.93236, -2.69312 ) DX3DVNORM( 0, 1, -0 )  //51
DX3DVERT( 0.679345, 0, -2.89718 ) DX3DVNORM( 0, 1, -0 )  //52
DX3DVERT( -0.679345, 0, -2.89718 ) DX3DVNORM( 0, 1, -0 )  //53
DX3DVERT( 1.13871, 3.93236, -3.75273 ) DX3DVNORM( 0, 1, -0 )  //54
DX3DVERT( 1.85563, 3.93236, -3.75273 ) DX3DVNORM( 0, 1, -0 )  //55
DX3DVERT( 1.85563, 3.93236, -2.69312 ) DX3DVNORM( 0, 1, -0 )  //56
DX3DVERT( 1.13871, 3.93236, -2.69312 ) DX3DVNORM( 0, 1, -0 )  //57
DX3DVERT( 2.03803, 5.3043, -3.58992 ) DX3DVNORM( 0, 1, -0 )  //58
DX3DVERT( 3.39672, 5.3043, -3.58992 ) DX3DVNORM( 0, 1, -0 )  //59
DX3DVERT( 3.39672, 5.3043, -2.85593 ) DX3DVNORM( 0, 1, -0 )  //60
DX3DVERT( 2.03803, 5.3043, -2.85593 ) DX3DVNORM( 0, 1, -0 )  //61
DX3DVERT( 3.57913, 3.93236, -3.75273 ) DX3DVNORM( 0, 1, -0 )  //62
DX3DVERT( 4.29605, 3.93236, -3.75273 ) DX3DVNORM( 0, 1, -0 )  //63
DX3DVERT( 4.29605, 3.93236, -2.69312 ) DX3DVNORM( 0, 1, -0 )  //64
DX3DVERT( 3.57913, 3.93236, -2.69312 ) DX3DVNORM( 0, 1, -0 )  //65
DX3DVERT( 6.1141, 0, -2.89718 ) DX3DVNORM( 0, 1, -0 )  //66
DX3DVERT( 4.75541, 0, -2.89718 ) DX3DVNORM( 0, 1, -0 )  //67
DX3DVERT( -4.75541, 0, -0.965729 ) DX3DVNORM( 0, 1, -0 )  //68
DX3DVERT( -6.1141, 0, -0.965729 ) DX3DVNORM( 0, 1, -0 )  //69
DX3DVERT( -3.39672, 0, -2.89718 ) DX3DVNORM( 0, 1, -0 )  //70
DX3DVERT( -3.39672, 0, -0.965729 ) DX3DVNORM( 0, 1, -0 )  //71
DX3DVERT( -2.03803, 0, -2.89718 ) DX3DVNORM( 0, 1, -0 )  //72
DX3DVERT( -2.03803, 0, -0.965729 ) DX3DVNORM( 0, 1, -0 )  //73
DX3DVERT( -0.679345, 0, -0.965729 ) DX3DVNORM( 0, 1, -0 )  //74
DX3DVERT( 0.679345, 0, -0.965729 ) DX3DVNORM( 0, 1, -0 )  //75
DX3DVERT( 2.03803, 0, -2.89718 ) DX3DVNORM( 0, 1, -0 )  //76
DX3DVERT( 2.03803, 0, -0.965729 ) DX3DVNORM( 0, 1, -0 )  //77
DX3DVERT( 3.39672, 0, -2.89718 ) DX3DVNORM( 0, 1, -0 )  //78
DX3DVERT( 3.39672, 0, -0.965729 ) DX3DVNORM( 0, 1, -0 )  //79
DX3DVERT( 4.75541, 0, -0.965729 ) DX3DVNORM( 0, 1, -0 )  //80
DX3DVERT( 6.1141, 0, -0.965729 ) DX3DVNORM( 0, 1, -0 )  //81
DX3DVERT( -4.75541, 0, 0.965729 ) DX3DVNORM( 0, 1, -0 )  //82
DX3DVERT( -6.1141, 0, 0.965729 ) DX3DVNORM( 0, 1, -0 )  //83
DX3DVERT( -3.39672, 0, 0.965729 ) DX3DVNORM( 0, 1, -0 )  //84
DX3DVERT( -2.03803, 0, 0.965729 ) DX3DVNORM( 0, 1, -0 )  //85
DX3DVERT( -0.679345, 0, 0.965729 ) DX3DVNORM( 0, 1, -0 )  //86
DX3DVERT( 0.679345, 0, 0.965729 ) DX3DVNORM( 0, 1, -0 )  //87
DX3DVERT( 2.03803, 0, 0.965729 ) DX3DVNORM( 0, 1, -0 )  //88
DX3DVERT( 3.39672, 0, 0.965729 ) DX3DVNORM( 0, 1, -0 )  //89
DX3DVERT( 4.75541, 0, 0.965729 ) DX3DVNORM( 0, 1, -0 )  //90
DX3DVERT( 6.1141, 0, 0.965729 ) DX3DVNORM( 0, 1, -0 )  //91
DX3DVERT( -4.75541, 0, 2.89718 ) DX3DVNORM( 0, 1, -0 )  //92
DX3DVERT( -6.1141, 0, 2.89718 ) DX3DVNORM( 0, 1, -0 )  //93
DX3DVERT( -3.39672, 0, 2.89718 ) DX3DVNORM( 0, 1, -0 )  //94
DX3DVERT( -2.03803, 0, 2.89718 ) DX3DVNORM( 0, 1, -0 )  //95
DX3DVERT( -0.679345, 0, 2.89718 ) DX3DVNORM( 0, 1, -0 )  //96
DX3DVERT( 0.679345, 0, 2.89718 ) DX3DVNORM( 0, 1, -0 )  //97
DX3DVERT( 2.03803, 0, 2.89718 ) DX3DVNORM( 0, 1, -0 )  //98
DX3DVERT( 3.39672, 0, 2.89718 ) DX3DVNORM( 0, 1, -0 )  //99
DX3DVERT( 4.75541, 0, 2.89718 ) DX3DVNORM( 0, 1, -0 )  //100
DX3DVERT( 6.1141, 0, 2.89718 ) DX3DVNORM( 0, 1, -0 )  //101
DX3DVERT( -4.75541, 0, 4.08266 ) DX3DVNORM( 0, 1, -0 )  //102
DX3DVERT( -6.1141, 0, 4.08266 ) DX3DVNORM( 0, 1, -0 )  //103
DX3DVERT( -3.39672, 0, 4.08266 ) DX3DVNORM( 0, 1, -0 )  //104
DX3DVERT( -2.03803, 0, 4.08266 ) DX3DVNORM( 0, 1, -0 )  //105
DX3DVERT( -0.679345, 0, 4.08266 ) DX3DVNORM( 0, 1, -0 )  //106
DX3DVERT( 0.679345, 0, 4.08266 ) DX3DVNORM( 0, 1, -0 )  //107
DX3DVERT( 2.03803, 0, 4.08266 ) DX3DVNORM( 0, 1, -0 )  //108
DX3DVERT( 3.39672, 0, 4.08266 ) DX3DVNORM( 0, 1, -0 )  //109
DX3DVERT( 4.75541, 0, 4.08266 ) DX3DVNORM( 0, 1, -0 )  //110
DX3DVERT( 6.1141, 0, 4.08266 ) DX3DVNORM( 0, 1, -0 )  //111
DX3DVERT( -5.76549, 0, 4.54339 ) DX3DVNORM( 0, 1, -0 )  //112
DX3DVERT( -6.1141, 0, 4.54339 ) DX3DVNORM( 0, 1, -0 )  //113
DX3DVERT( -3.39672, 0, 4.54339 ) DX3DVNORM( 0, 1, -0 )  //114
DX3DVERT( -2.03803, 0, 4.54339 ) DX3DVNORM( 0, 1, -0 )  //115
DX3DVERT( -0.679345, 0, 4.54339 ) DX3DVNORM( 0, 1, -0 )  //116
DX3DVERT( 0.679345, 0, 4.54339 ) DX3DVNORM( 0, 1, -0 )  //117
DX3DVERT( 2.03803, 0, 4.54339 ) DX3DVNORM( 0, 1, -0 )  //118
DX3DVERT( 3.39672, 0, 4.54339 ) DX3DVNORM( 0, 1, -0 )  //119
DX3DVERT( 5.76549, 0, 4.54339 ) DX3DVNORM( 0, 1, -0 )  //120
DX3DVERT( 6.1141, 0, 4.54339 ) DX3DVNORM( 0, 1, -0 )  //121
DX3DVERT( -5.76549, 0, 6.47484 ) DX3DVNORM( 0.0496433, 0.948025, -0.3143 )  //122
DX3DVERT( -6.1141, 0, 6.47484 ) DX3DVNORM( 0.0749554, 0.965802, -0.248209 )  //123
DX3DVERT( -5.33159, 3.20773, 5.22738 ) DX3DVNORM( 0, 1, 2.5746e-007 )  //124
DX3DVERT( -3.80828, 3.20773, 5.22738 ) DX3DVNORM( 0, 1, 1.52984e-007 )  //125
DX3DVERT( -3.80828, 3.20773, 6.44321 ) DX3DVNORM( 0, 1, 1.52984e-007 )  //126
DX3DVERT( -5.33159, 3.20773, 6.4432 ) DX3DVNORM( 0, 1, 2.5746e-007 )  //127
DX3DVERT( -2.28497, 3.20773, 5.22738 ) DX3DVNORM( 0, 1, -5.34813e-008 )  //128
DX3DVERT( -2.28497, 3.20773, 6.44321 ) DX3DVNORM( 0, 1, -5.34813e-008 )  //129
DX3DVERT( -0.761655, 3.20773, 5.22738 ) DX3DVNORM( 0, 1, -7.77354e-008 )  //130
DX3DVERT( -0.761655, 3.20773, 6.44321 ) DX3DVNORM( 0, 1, -7.77354e-008 )  //131
DX3DVERT( 0.761655, 3.20773, 5.22738 ) DX3DVNORM( 0, 1, -1.2873e-007 )  //132
DX3DVERT( 0.761655, 3.20773, 6.44321 ) DX3DVNORM( 0, 1, -1.2873e-007 )  //133
DX3DVERT( 2.28497, 3.20773, 5.22738 ) DX3DVNORM( 0, 1, -1.79725e-007 )  //134
DX3DVERT( 2.28497, 3.20773, 6.44321 ) DX3DVNORM( 0, 1, -1.79725e-007 )  //135
DX3DVERT( 3.80828, 3.20773, 5.22738 ) DX3DVNORM( 0, 1, 5.34813e-008 )  //136
DX3DVERT( 3.80828, 3.20773, 6.44321 ) DX3DVNORM( 0, 1, 5.34813e-008 )  //137
DX3DVERT( 5.33159, 3.20773, 5.22738 ) DX3DVNORM( 0, 1, 2.08952e-007 )  //138
DX3DVERT( 5.33159, 3.20773, 6.4432 ) DX3DVNORM( 0, 1, 2.08952e-007 )  //139
DX3DVERT( 6.1141, 0, 6.47484 ) DX3DVNORM( -0.0749554, 0.965802, -0.248209 )  //140
DX3DVERT( 5.76549, 0, 6.47484 ) DX3DVNORM( -0.0496433, 0.948025, -0.3143 )  //141
DX3DVERT( -4.49966, 1.93695, 10.4592 ) DX3DVNORM( 0.0726092, 0.8851, -0.459702 )  //142
DX3DVERT( -5.78528, 1.93695, 9.96569 ) DX3DVNORM( 0.144784, 0.865548, -0.479442 )  //143
DX3DVERT( -3.39672, 0, 6.47484 ) DX3DVNORM( 0, 0.899358, -0.437213 )  //144
DX3DVERT( -3.21404, 1.93695, 10.4592 ) DX3DVNORM( 0, 0.899358, -0.437213 )  //145
DX3DVERT( -2.03803, 0, 6.47484 ) DX3DVNORM( 0, 0.899358, -0.437213 )  //146
DX3DVERT( -1.92843, 1.93695, 10.4592 ) DX3DVNORM( 0, 0.899358, -0.437213 )  //147
DX3DVERT( -0.679345, 0, 6.47484 ) DX3DVNORM( 0, 0.899358, -0.437213 )  //148
DX3DVERT( -0.642809, 1.93695, 10.4592 ) DX3DVNORM( 0, 0.899358, -0.437213 )  //149
DX3DVERT( 0.679345, 0, 6.47484 ) DX3DVNORM( 0, 0.899358, -0.437213 )  //150
DX3DVERT( 0.642809, 1.93695, 10.4592 ) DX3DVNORM( 0, 0.899358, -0.437213 )  //151
DX3DVERT( 2.03803, 0, 6.47484 ) DX3DVNORM( 0, 0.899358, -0.437213 )  //152
DX3DVERT( 1.92843, 1.93695, 10.4592 ) DX3DVNORM( 0, 0.899358, -0.437213 )  //153
DX3DVERT( 3.39672, 0, 6.47484 ) DX3DVNORM( 0, 0.899358, -0.437213 )  //154
DX3DVERT( 3.21404, 1.93695, 10.4592 ) DX3DVNORM( 0, 0.899358, -0.437213 )  //155
DX3DVERT( 4.49966, 1.93695, 10.4592 ) DX3DVNORM( -0.0726092, 0.8851, -0.459702 )  //156
DX3DVERT( 5.78528, 1.93695, 9.96569 ) DX3DVNORM( -0.144784, 0.865548, -0.479442 )  //157
DX3DVERT( -4.75541, 0, -4.82864 ) DX3DVNORM( 8.81201e-007, 0.263903, -0.964549 )  //158
DX3DVERT( -3.39672, 0, -4.82864 ) DX3DVNORM( 4.406e-007, 0.263903, -0.964549 )  //159
DX3DVERT( -3.59464, 3.93236, -3.75273 ) DX3DVNORM( 7.13017e-008, 0.215749, -0.976449 )  //160
DX3DVERT( -4.35962, 3.93236, -3.75273 ) DX3DVNORM( 8.81201e-007, 0.263903, -0.964549 )  //161
DX3DVERT( -3.39672, 0, -2.89718 ) DX3DVNORM( -4.5618e-007, -0.0518231, 0.998656 )  //162
DX3DVERT( -4.75541, 0, -2.89718 ) DX3DVNORM( -9.12361e-007, -0.0518229, 0.998656 )  //163
DX3DVERT( -4.35962, 3.93236, -2.69312 ) DX3DVNORM( -9.12361e-007, -0.0518229, 0.998656 )  //164
DX3DVERT( -3.59464, 3.93236, -2.69312 ) DX3DVNORM( 1.04328e-007, 0.00474773, 0.999989 )  //165
DX3DVERT( -4.75541, 0, -2.89718 ) DX3DVNORM( -0.994973, 0.100145, -0 )  //166
DX3DVERT( -4.75541, 0, -4.82864 ) DX3DVNORM( -0.994973, 0.100145, -0 )  //167
DX3DVERT( -4.35962, 3.93236, -3.75273 ) DX3DVNORM( -0.994973, 0.100145, -0 )  //168
DX3DVERT( -4.35962, 3.93236, -2.69312 ) DX3DVNORM( -0.994973, 0.100145, -0 )  //169
DX3DVERT( -2.03803, 0, -4.82864 ) DX3DVNORM( -4.40601e-007, 0.263903, -0.964549 )  //170
DX3DVERT( -1.84012, 3.93236, -3.75273 ) DX3DVNORM( -5.17616e-007, 0.215749, -0.976449 )  //171
DX3DVERT( -2.03803, 0, -2.89718 ) DX3DVNORM( 4.56181e-007, -0.0518231, 0.998656 )  //172
DX3DVERT( -1.84012, 3.93236, -2.69312 ) DX3DVNORM( 7.14526e-007, 0.00474772, 0.999989 )  //173
DX3DVERT( -0.679345, 0, -4.82864 ) DX3DVNORM( -8.81201e-007, 0.263903, -0.964549 )  //174
DX3DVERT( -1.07514, 3.93236, -3.75273 ) DX3DVNORM( -8.81201e-007, 0.263903, -0.964549 )  //175
DX3DVERT( -0.679345, 0, -4.82864 ) DX3DVNORM( 0.994973, 0.100145, -0 )  //176
DX3DVERT( -0.679345, 0, -2.89718 ) DX3DVNORM( 0.994973, 0.100145, -0 )  //177
DX3DVERT( -1.07514, 3.93236, -2.69312 ) DX3DVNORM( 0.994973, 0.100145, -0 )  //178
DX3DVERT( -1.07514, 3.93236, -3.75273 ) DX3DVNORM( 0.994973, 0.100145, -0 )  //179
DX3DVERT( -0.679345, 0, -2.89718 ) DX3DVNORM( 9.12361e-007, -0.0518229, 0.998656 )  //180
DX3DVERT( -1.07514, 3.93236, -2.69312 ) DX3DVNORM( 9.12361e-007, -0.0518229, 0.998656 )  //181
DX3DVERT( 0.679345, 0, -4.82864 ) DX3DVNORM( 9.01606e-007, 0.263903, -0.964549 )  //182
DX3DVERT( 2.03803, 0, -4.82864 ) DX3DVNORM( 4.50803e-007, 0.263903, -0.964549 )  //183
DX3DVERT( 1.85563, 3.93236, -3.75273 ) DX3DVNORM( 5.25789e-007, 0.215749, -0.976449 )  //184
DX3DVERT( 1.13871, 3.93236, -3.75273 ) DX3DVNORM( 9.01606e-007, 0.263903, -0.964549 )  //185
DX3DVERT( 2.03803, 0, -2.89718 ) DX3DVNORM( -4.66744e-007, -0.0518231, 0.998656 )  //186
DX3DVERT( 0.679345, 0, -2.89718 ) DX3DVNORM( -9.33487e-007, -0.0518229, 0.998656 )  //187
DX3DVERT( 1.13871, 3.93236, -2.69312 ) DX3DVNORM( -9.33487e-007, -0.0518229, 0.998656 )  //188
DX3DVERT( 1.85563, 3.93236, -2.69312 ) DX3DVNORM( -7.24075e-007, 0.00474775, 0.999989 )  //189
DX3DVERT( 0.679345, 0, -2.89718 ) DX3DVNORM( -0.993246, 0.116028, -0 )  //190
DX3DVERT( 0.679345, 0, -4.82864 ) DX3DVNORM( -0.993246, 0.116028, -0 )  //191
DX3DVERT( 1.13871, 3.93236, -3.75273 ) DX3DVNORM( -0.993246, 0.116028, -0 )  //192
DX3DVERT( 1.13871, 3.93236, -2.69312 ) DX3DVNORM( -0.993246, 0.116028, -0 )  //193
DX3DVERT( 3.39672, 0, -4.82864 ) DX3DVNORM( -4.50803e-007, 0.263903, -0.964549 )  //194
DX3DVERT( 3.57913, 3.93236, -3.75273 ) DX3DVNORM( -7.6766e-008, 0.215749, -0.976449 )  //195
DX3DVERT( 3.39672, 0, -2.89718 ) DX3DVNORM( 4.66744e-007, -0.0518231, 0.998656 )  //196
DX3DVERT( 3.57913, 3.93236, -2.69312 ) DX3DVNORM( -9.9748e-008, 0.00474775, 0.999989 )  //197
DX3DVERT( 4.75541, 0, -4.82864 ) DX3DVNORM( -9.01606e-007, 0.263903, -0.964549 )  //198
DX3DVERT( 4.29605, 3.93236, -3.75273 ) DX3DVNORM( -9.01606e-007, 0.263903, -0.964549 )  //199
DX3DVERT( 4.75541, 0, -4.82864 ) DX3DVNORM( 0.993246, 0.116028, -0 )  //200
DX3DVERT( 4.75541, 0, -2.89718 ) DX3DVNORM( 0.993246, 0.116028, -0 )  //201
DX3DVERT( 4.29605, 3.93236, -2.69312 ) DX3DVNORM( 0.993246, 0.116028, -0 )  //202
DX3DVERT( 4.29605, 3.93236, -3.75273 ) DX3DVNORM( 0.993246, 0.116028, -0 )  //203
DX3DVERT( 4.75541, 0, -2.89718 ) DX3DVNORM( 9.33487e-007, -0.0518229, 0.998656 )  //204
DX3DVERT( 4.29605, 3.93236, -2.69312 ) DX3DVNORM( 9.33487e-007, -0.0518229, 0.998656 )  //205
DX3DVERT( -2.04419, 5.3043, -3.58992 ) DX3DVNORM( -6.67823e-007, 0.117847, -0.993032 )  //206
DX3DVERT( -3.39056, 5.3043, -3.58992 ) DX3DVNORM( -6.67823e-007, 0.117847, -0.993032 )  //207
DX3DVERT( -1.84012, 3.93236, -3.75273 ) DX3DVNORM( 0.989117, 0.14713, -0 )  //208
DX3DVERT( -1.84012, 3.93236, -2.69312 ) DX3DVNORM( 0.989117, 0.14713, -0 )  //209
DX3DVERT( -2.04419, 5.3043, -2.85593 ) DX3DVNORM( 0.989117, 0.14713, -0 )  //210
DX3DVERT( -2.04419, 5.3043, -3.58992 ) DX3DVNORM( 0.989117, 0.14713, -0 )  //211
DX3DVERT( -3.39056, 5.3043, -2.85593 ) DX3DVNORM( 1.22434e-006, 0.117844, 0.993032 )  //212
DX3DVERT( -2.04419, 5.3043, -2.85593 ) DX3DVNORM( 1.22434e-006, 0.117844, 0.993032 )  //213
DX3DVERT( -3.59464, 3.93236, -2.69312 ) DX3DVNORM( -0.989117, 0.14713, -0 )  //214
DX3DVERT( -3.59464, 3.93236, -3.75273 ) DX3DVNORM( -0.989117, 0.14713, -0 )  //215
DX3DVERT( -3.39056, 5.3043, -3.58992 ) DX3DVNORM( -0.989117, 0.14713, -0 )  //216
DX3DVERT( -3.39056, 5.3043, -2.85593 ) DX3DVNORM( -0.989117, 0.14713, -0 )  //217
DX3DVERT( 3.39672, 5.3043, -3.58992 ) DX3DVNORM( 6.71875e-007, 0.117847, -0.993032 )  //218
DX3DVERT( 2.03803, 5.3043, -3.58992 ) DX3DVNORM( 6.71875e-007, 0.117847, -0.993032 )  //219
DX3DVERT( 3.57913, 3.93236, -3.75273 ) DX3DVNORM( 0.991277, 0.131795, -0 )  //220
DX3DVERT( 3.57913, 3.93236, -2.69312 ) DX3DVNORM( 0.991277, 0.131795, -0 )  //221
DX3DVERT( 3.39672, 5.3043, -2.85593 ) DX3DVNORM( 0.991277, 0.131795, -0 )  //222
DX3DVERT( 3.39672, 5.3043, -3.58992 ) DX3DVNORM( 0.991277, 0.131795, -0 )  //223
DX3DVERT( 2.03803, 5.3043, -2.85593 ) DX3DVNORM( -1.23177e-006, 0.117844, 0.993032 )  //224
DX3DVERT( 3.39672, 5.3043, -2.85593 ) DX3DVNORM( -1.23177e-006, 0.117844, 0.993032 )  //225
DX3DVERT( 1.85563, 3.93236, -2.69312 ) DX3DVNORM( -0.991277, 0.131794, -0 )  //226
DX3DVERT( 1.85563, 3.93236, -3.75273 ) DX3DVNORM( -0.991277, 0.131794, -0 )  //227
DX3DVERT( 2.03803, 5.3043, -3.58992 ) DX3DVNORM( -0.991277, 0.131794, -0 )  //228
DX3DVERT( 2.03803, 5.3043, -2.85593 ) DX3DVNORM( -0.991277, 0.131794, -0 )  //229
DX3DVERT( -5.76549, 0, 4.54339 ) DX3DVNORM( 7.47078e-007, 0.208544, -0.978013 )  //230
DX3DVERT( -3.39672, 0, 4.54339 ) DX3DVNORM( 3.73539e-007, 0.208544, -0.978013 )  //231
DX3DVERT( -3.80828, 3.20773, 5.22738 ) DX3DVNORM( 3.73539e-007, 0.208544, -0.978013 )  //232
DX3DVERT( -5.33159, 3.20773, 5.22738 ) DX3DVNORM( 7.47078e-007, 0.208544, -0.978013 )  //233
DX3DVERT( -3.39672, 0, 6.47484 ) DX3DVNORM( -3.05534e-007, 0.00986188, 0.999951 )  //234
DX3DVERT( -5.76549, 0, 6.47484 ) DX3DVNORM( -6.11069e-007, 0.00986203, 0.999951 )  //235
DX3DVERT( -5.33159, 3.20773, 6.4432 ) DX3DVNORM( -6.11069e-007, 0.00986203, 0.999951 )  //236
DX3DVERT( -3.80828, 3.20773, 6.44321 ) DX3DVNORM( -3.05534e-007, 0.00986188, 0.999951 )  //237
DX3DVERT( -5.76549, 0, 6.47484 ) DX3DVNORM( -0.990975, 0.134048, -0 )  //238
DX3DVERT( -5.76549, 0, 4.54339 ) DX3DVNORM( -0.990975, 0.134048, -0 )  //239
DX3DVERT( -5.33159, 3.20773, 5.22738 ) DX3DVNORM( -0.990975, 0.134048, -0 )  //240
DX3DVERT( -5.33159, 3.20773, 6.4432 ) DX3DVNORM( -0.990975, 0.134048, -0 )  //241
DX3DVERT( -2.03803, 0, 4.54339 ) DX3DVNORM( 3.02674e-007, 0.208545, -0.978013 )  //242
DX3DVERT( -2.28497, 3.20773, 5.22738 ) DX3DVNORM( 3.02674e-007, 0.208545, -0.978013 )  //243
DX3DVERT( -2.03803, 0, 6.47484 ) DX3DVNORM( -4.12618e-007, 0.00986148, 0.999951 )  //244
DX3DVERT( -2.28497, 3.20773, 6.44321 ) DX3DVNORM( -4.12618e-007, 0.00986148, 0.999951 )  //245
DX3DVERT( -0.679345, 0, 4.54339 ) DX3DVNORM( 3.02674e-007, 0.208545, -0.978013 )  //246
DX3DVERT( -0.761655, 3.20773, 5.22738 ) DX3DVNORM( 3.02674e-007, 0.208545, -0.978013 )  //247
DX3DVERT( -0.679345, 0, 6.47484 ) DX3DVNORM( -4.12617e-007, 0.00986104, 0.999951 )  //248
DX3DVERT( -0.761655, 3.20773, 6.44321 ) DX3DVNORM( -4.12617e-007, 0.00986104, 0.999951 )  //249
DX3DVERT( 0.679345, 0, 4.54339 ) DX3DVNORM( -3.02674e-007, 0.208545, -0.978013 )  //250
DX3DVERT( 0.761655, 3.20773, 5.22738 ) DX3DVNORM( -3.02674e-007, 0.208545, -0.978013 )  //251
DX3DVERT( 0.679345, 0, 6.47484 ) DX3DVNORM( 4.12617e-007, 0.00986104, 0.999951 )  //252
DX3DVERT( 0.761655, 3.20773, 6.44321 ) DX3DVNORM( 4.12617e-007, 0.00986104, 0.999951 )  //253
DX3DVERT( 2.03803, 0, 4.54339 ) DX3DVNORM( 0, 0.208545, -0.978013 )  //254
DX3DVERT( 2.28497, 3.20773, 5.22738 ) DX3DVNORM( 0, 0.208545, -0.978013 )  //255
DX3DVERT( 2.03803, 0, 6.47484 ) DX3DVNORM( -2.84217e-014, 0.00986131, 0.999951 )  //256
DX3DVERT( 2.28497, 3.20773, 6.44321 ) DX3DVNORM( -2.84217e-014, 0.00986131, 0.999951 )  //257
DX3DVERT( 3.39672, 0, 4.54339 ) DX3DVNORM( -2.94989e-007, 0.208544, -0.978013 )  //258
DX3DVERT( 3.80828, 3.20773, 5.22738 ) DX3DVNORM( -2.94989e-007, 0.208544, -0.978013 )  //259
DX3DVERT( 3.39672, 0, 6.47484 ) DX3DVNORM( 1.98451e-007, 0.00986149, 0.999951 )  //260
DX3DVERT( 3.80828, 3.20773, 6.44321 ) DX3DVNORM( 1.98451e-007, 0.00986149, 0.999951 )  //261
DX3DVERT( 5.76549, 0, 4.54339 ) DX3DVNORM( -1.19532e-006, 0.208544, -0.978013 )  //262
DX3DVERT( 5.33159, 3.20773, 5.22738 ) DX3DVNORM( -1.19532e-006, 0.208544, -0.978013 )  //263
DX3DVERT( 5.76549, 0, 4.54339 ) DX3DVNORM( 0.990975, 0.134048, -0 )  //264
DX3DVERT( 5.76549, 0, 6.47484 ) DX3DVNORM( 0.990975, 0.134048, -0 )  //265
DX3DVERT( 5.33159, 3.20773, 6.4432 ) DX3DVNORM( 0.990975, 0.134048, -0 )  //266
DX3DVERT( 5.33159, 3.20773, 5.22738 ) DX3DVNORM( 0.990975, 0.134048, -0 )  //267
DX3DVERT( 5.76549, 0, 6.47484 ) DX3DVNORM( 1.22214e-006, 0.00986159, 0.999951 )  //268
DX3DVERT( 5.33159, 3.20773, 6.4432 ) DX3DVNORM( 1.22214e-006, 0.00986159, 0.999951 )  //269
DX3DVERT( -3.39672, 0, -4.82864 ) DX3DVNORM( -7.10543e-015, 0.999996, 0.0027603 )  //270
DX3DVERT( -4.75541, 0, -4.82864 ) DX3DVNORM( -8.6902e-008, 0.999996, 0.0027603 )  //271
DX3DVERT( -4.75541, 0.00513816, -6.69012 ) DX3DVNORM( -8.6902e-008, 0.999996, 0.0027603 )  //272
DX3DVERT( -3.39672, 0.0051384, -6.69012 ) DX3DVNORM( -7.10543e-015, 0.999996, 0.0027603 )  //273
DX3DVERT( -2.03803, 0, -4.82864 ) DX3DVNORM( 1.31458e-007, 0.999996, 0.0027602 )  //274
DX3DVERT( -2.03803, 0.00513816, -6.69012 ) DX3DVNORM( 1.31458e-007, 0.999996, 0.0027602 )  //275
DX3DVERT( -0.679345, 0, -4.82864 ) DX3DVNORM( 1.76013e-007, 0.999996, 0.0027601 )  //276
DX3DVERT( -0.679345, 0.00513768, -6.69012 ) DX3DVNORM( 1.76013e-007, 0.999996, 0.0027601 )  //277
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BASE_INNER___carbodyblack_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BASE_INNER___carbodyblack_0 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 278 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BASE_INNER___carbodyblack_0	NULL
#define vertexbuff_KEIA_BASE_INNER___carbodyblack_0	NULL
#endif




#if ((PT_KEIA_BASE_INNER___carbodyblack_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_INNER___carbodyblack_0 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BASE_INNER___carbodyblack_0 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
	1, 4, 2, // 2 8
	4, 5, 2, // 3 11
	4, 6, 5, // 4 14
	6, 7, 5, // 5 17
	6, 8, 7, // 6 20
	8, 9, 7, // 7 23
	8, 10, 9, // 8 26
	10, 11, 9, // 9 29
	10, 12, 11, // 10 32
	12, 13, 11, // 11 35
	12, 14, 13, // 12 38
	14, 15, 13, // 13 41
	14, 16, 15, // 14 44
	16, 17, 15, // 15 47
	16, 18, 17, // 16 50
	18, 19, 17, // 17 53
	3, 2, 21, // 18 56
	2, 20, 21, // 19 59
	2, 5, 20, // 20 62
	5, 22, 20, // 21 65
	5, 7, 22, // 22 68
	7, 23, 22, // 23 71
	7, 9, 23, // 24 74
	9, 24, 23, // 25 77
	9, 11, 24, // 26 80
	11, 25, 24, // 27 83
	11, 13, 25, // 28 86
	13, 26, 25, // 29 89
	13, 15, 26, // 30 92
	15, 27, 26, // 31 95
	15, 17, 27, // 32 98
	17, 28, 27, // 33 101
	17, 19, 28, // 34 104
	19, 29, 28, // 35 107
	21, 20, 31, // 36 110
	20, 30, 31, // 37 113
	24, 25, 33, // 38 116
	25, 32, 33, // 39 119
	25, 26, 32, // 40 122
	26, 34, 32, // 41 125
	26, 27, 34, // 42 128
	27, 35, 34, // 43 131
	27, 28, 35, // 44 134
	28, 36, 35, // 45 137
	28, 29, 36, // 46 140
	29, 37, 36, // 47 143
	31, 30, 39, // 48 146
	30, 38, 39, // 49 149
	40, 41, 43, // 50 152
	41, 42, 43, // 51 155
	44, 45, 47, // 52 158
	45, 46, 47, // 53 161
	48, 49, 51, // 54 164
	49, 50, 51, // 55 167
	33, 32, 53, // 56 170
	32, 52, 53, // 57 173
	54, 55, 57, // 58 176
	55, 56, 57, // 59 179
	58, 59, 61, // 60 182
	59, 60, 61, // 61 185
	62, 63, 65, // 62 188
	63, 64, 65, // 63 191
	36, 37, 67, // 64 194
	37, 66, 67, // 65 197
	39, 38, 69, // 66 200
	38, 68, 69, // 67 203
	38, 70, 68, // 68 206
	70, 71, 68, // 69 209
	70, 72, 71, // 70 212
	72, 73, 71, // 71 215
	72, 53, 73, // 72 218
	53, 74, 73, // 73 221
	53, 52, 74, // 74 224
	52, 75, 74, // 75 227
	52, 76, 75, // 76 230
	76, 77, 75, // 77 233
	76, 78, 77, // 78 236
	78, 79, 77, // 79 239
	78, 67, 79, // 80 242
	67, 80, 79, // 81 245
	67, 66, 80, // 82 248
	66, 81, 80, // 83 251
	69, 68, 83, // 84 254
	68, 82, 83, // 85 257
	68, 71, 82, // 86 260
	71, 84, 82, // 87 263
	71, 73, 84, // 88 266
	73, 85, 84, // 89 269
	73, 74, 85, // 90 272
	74, 86, 85, // 91 275
	74, 75, 86, // 92 278
	75, 87, 86, // 93 281
	75, 77, 87, // 94 284
	77, 88, 87, // 95 287
	77, 79, 88, // 96 290
	79, 89, 88, // 97 293
	79, 80, 89, // 98 296
	80, 90, 89, // 99 299
	80, 81, 90, // 100 302
	81, 91, 90, // 101 305
	83, 82, 93, // 102 308
	82, 92, 93, // 103 311
	82, 84, 92, // 104 314
	84, 94, 92, // 105 317
	84, 85, 94, // 106 320
	85, 95, 94, // 107 323
	85, 86, 95, // 108 326
	86, 96, 95, // 109 329
	86, 87, 96, // 110 332
	87, 97, 96, // 111 335
	87, 88, 97, // 112 338
	88, 98, 97, // 113 341
	88, 89, 98, // 114 344
	89, 99, 98, // 115 347
	89, 90, 99, // 116 350
	90, 100, 99, // 117 353
	90, 91, 100, // 118 356
	91, 101, 100, // 119 359
	93, 92, 103, // 120 362
	92, 102, 103, // 121 365
	92, 94, 102, // 122 368
	94, 104, 102, // 123 371
	94, 95, 104, // 124 374
	95, 105, 104, // 125 377
	95, 96, 105, // 126 380
	96, 106, 105, // 127 383
	96, 97, 106, // 128 386
	97, 107, 106, // 129 389
	97, 98, 107, // 130 392
	98, 108, 107, // 131 395
	98, 99, 108, // 132 398
	99, 109, 108, // 133 401
	99, 100, 109, // 134 404
	100, 110, 109, // 135 407
	100, 101, 110, // 136 410
	101, 111, 110, // 137 413
	103, 102, 113, // 138 416
	102, 112, 113, // 139 419
	102, 104, 112, // 140 422
	104, 114, 112, // 141 425
	104, 105, 114, // 142 428
	105, 115, 114, // 143 431
	105, 106, 115, // 144 434
	106, 116, 115, // 145 437
	106, 107, 116, // 146 440
	107, 117, 116, // 147 443
	107, 108, 117, // 148 446
	108, 118, 117, // 149 449
	108, 109, 118, // 150 452
	109, 119, 118, // 151 455
	109, 110, 119, // 152 458
	110, 120, 119, // 153 461
	110, 111, 120, // 154 464
	111, 121, 120, // 155 467
	113, 112, 123, // 156 470
	112, 122, 123, // 157 473
	124, 125, 127, // 158 476
	125, 126, 127, // 159 479
	125, 128, 126, // 160 482
	128, 129, 126, // 161 485
	128, 130, 129, // 162 488
	130, 131, 129, // 163 491
	130, 132, 131, // 164 494
	132, 133, 131, // 165 497
	132, 134, 133, // 166 500
	134, 135, 133, // 167 503
	134, 136, 135, // 168 506
	136, 137, 135, // 169 509
	136, 138, 137, // 170 512
	138, 139, 137, // 171 515
	120, 121, 141, // 172 518
	121, 140, 141, // 173 521
	123, 122, 143, // 174 524
	122, 142, 143, // 175 527
	122, 144, 142, // 176 530
	144, 145, 142, // 177 533
	144, 146, 145, // 178 536
	146, 147, 145, // 179 539
	146, 148, 147, // 180 542
	148, 149, 147, // 181 545
	148, 150, 149, // 182 548
	150, 151, 149, // 183 551
	150, 152, 151, // 184 554
	152, 153, 151, // 185 557
	152, 154, 153, // 186 560
	154, 155, 153, // 187 563
	154, 141, 155, // 188 566
	141, 156, 155, // 189 569
	141, 140, 156, // 190 572
	140, 157, 156, // 191 575
	158, 159, 161, // 192 578
	159, 160, 161, // 193 581
	162, 163, 165, // 194 584
	163, 164, 165, // 195 587
	166, 167, 169, // 196 590
	167, 168, 169, // 197 593
	159, 170, 160, // 198 596
	170, 171, 160, // 199 599
	172, 162, 173, // 200 602
	162, 165, 173, // 201 605
	170, 174, 171, // 202 608
	174, 175, 171, // 203 611
	176, 177, 179, // 204 614
	177, 178, 179, // 205 617
	180, 172, 181, // 206 620
	172, 173, 181, // 207 623
	182, 183, 185, // 208 626
	183, 184, 185, // 209 629
	186, 187, 189, // 210 632
	187, 188, 189, // 211 635
	190, 191, 193, // 212 638
	191, 192, 193, // 213 641
	183, 194, 184, // 214 644
	194, 195, 184, // 215 647
	196, 186, 197, // 216 650
	186, 189, 197, // 217 653
	194, 198, 195, // 218 656
	198, 199, 195, // 219 659
	200, 201, 203, // 220 662
	201, 202, 203, // 221 665
	204, 196, 205, // 222 668
	196, 197, 205, // 223 671
	160, 171, 207, // 224 674
	171, 206, 207, // 225 677
	208, 209, 211, // 226 680
	209, 210, 211, // 227 683
	173, 165, 213, // 228 686
	165, 212, 213, // 229 689
	214, 215, 217, // 230 692
	215, 216, 217, // 231 695
	184, 195, 219, // 232 698
	195, 218, 219, // 233 701
	220, 221, 223, // 234 704
	221, 222, 223, // 235 707
	197, 189, 225, // 236 710
	189, 224, 225, // 237 713
	226, 227, 229, // 238 716
	227, 228, 229, // 239 719
	230, 231, 233, // 240 722
	231, 232, 233, // 241 725
	234, 235, 237, // 242 728
	235, 236, 237, // 243 731
	238, 239, 241, // 244 734
	239, 240, 241, // 245 737
	231, 242, 232, // 246 740
	242, 243, 232, // 247 743
	244, 234, 245, // 248 746
	234, 237, 245, // 249 749
	242, 246, 243, // 250 752
	246, 247, 243, // 251 755
	248, 244, 249, // 252 758
	244, 245, 249, // 253 761
	246, 250, 247, // 254 764
	250, 251, 247, // 255 767
	252, 248, 253, // 256 770
	248, 249, 253, // 257 773
	250, 254, 251, // 258 776
	254, 255, 251, // 259 779
	256, 252, 257, // 260 782
	252, 253, 257, // 261 785
	254, 258, 255, // 262 788
	258, 259, 255, // 263 791
	260, 256, 261, // 264 794
	256, 257, 261, // 265 797
	258, 262, 259, // 266 800
	262, 263, 259, // 267 803
	264, 265, 267, // 268 806
	265, 266, 267, // 269 809
	268, 260, 269, // 270 812
	260, 261, 269, // 271 815
	270, 271, 273, // 272 818
	271, 272, 273, // 273 821
	274, 270, 275, // 274 824
	270, 273, 275, // 275 827
	276, 274, 277, // 276 830
	274, 275, 277, // 277 833
DX3DINDEX_END
#endif

#else
#define index_KEIA_BASE_INNER___carbodyblack_0	NULL
#endif




#if ((PT_KEIA_BASE_INNER___carbodyblack_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BASE_INNER___carbodyblack_0 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BASE_INNER___carbodyblack_0_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BASE_INNER___carbodyblack_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BASE_INNER___carbodyblack_0 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BASE_INNER___carbodyblack_0_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BASE_INNER___carbodyblack_0_VERTEXSTRIP 	NULL
#endif




DX3DMODELTBL_START( modeltbl_KEIA_BASE_INNER__ )
DX3DMODEL_START( model_KEIA_BASE_INNER___carbodyblack_0 )
DX3DMODEL_VERTEX( vertex_KEIA_BASE_INNER___carbodyblack_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BASE_INNER___carbodyblack_0 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 834 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carbodyblack )
DX3DMODEL_END
DX3DMODELTBL_END




DX3DOBJECT_START_HASH( object_KEIA_BASE_INNER__, 1635569817 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_KEIA_BASE_INNER__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	0, 7.20244, 5.29417, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	0, 7.20244, 5.29417, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_KEIA_BASE_TIRERL__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_KEIA_BASE_NUMBERPLATEF__
/////////////////////////////////////////////
#if 0
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 3.2598, 15.8312, 1
#endif

DX3DMATERIAL_START( material_carnumber )
DX3DMATERIAL_DIFF( 1, 0.7384, 0.7384, 0.7384 )
DX3DMATERIAL_SPEC( 1, 0.5, 0.5, 0.5 )
DX3DMATERIAL_TEX( NULL )
DX3DMATERIAL_SHADER( DEFAULT )
DX3DMATERIAL_FLG( 0 )
DX3DMATERIAL_CALLBACK( -1 )
DX3DMATERIAL_END




#if ((PT_KEIA_BASE_NUMBERPLATEF___carnumber_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_NUMBERPLATEF___carnumber_0 == PT_TRILIST ) || ((PT_KEIA_BASE_NUMBERPLATEF___carnumber_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BASE_NUMBERPLATEF___carnumber_0 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BASE_NUMBERPLATEF___carnumber_0 )
DX3DVERT( -1.50932, -0.169539, -1.62918 ) DX3DVNORM( 0, -9.21348e-005, -1 )  //0
DX3DVERT( 1.50932, -0.169539, -1.62918 ) DX3DVNORM( 0, -9.21348e-005, -1 )  //1
DX3DVERT( 1.50932, 1.16831, -1.6293 ) DX3DVNORM( 0, -9.21348e-005, -1 )  //2
DX3DVERT( -1.50932, 1.16831, -1.6293 ) DX3DVNORM( 0, -9.21348e-005, -1 )  //3
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BASE_NUMBERPLATEF___carnumber_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BASE_NUMBERPLATEF___carnumber_0 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 4 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BASE_NUMBERPLATEF___carnumber_0	NULL
#define vertexbuff_KEIA_BASE_NUMBERPLATEF___carnumber_0	NULL
#endif




#if ((PT_KEIA_BASE_NUMBERPLATEF___carnumber_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_NUMBERPLATEF___carnumber_0 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BASE_NUMBERPLATEF___carnumber_0 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
DX3DINDEX_END
#endif

#else
#define index_KEIA_BASE_NUMBERPLATEF___carnumber_0	NULL
#endif




#if ((PT_KEIA_BASE_NUMBERPLATEF___carnumber_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BASE_NUMBERPLATEF___carnumber_0 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BASE_NUMBERPLATEF___carnumber_0_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BASE_NUMBERPLATEF___carnumber_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BASE_NUMBERPLATEF___carnumber_0 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BASE_NUMBERPLATEF___carnumber_0_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BASE_NUMBERPLATEF___carnumber_0_VERTEXSTRIP 	NULL
#endif




DX3DMODELTBL_START( modeltbl_KEIA_BASE_NUMBERPLATEF__ )
DX3DMODEL_START( model_KEIA_BASE_NUMBERPLATEF___carnumber_0 )
DX3DMODEL_VERTEX( vertex_KEIA_BASE_NUMBERPLATEF___carnumber_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BASE_NUMBERPLATEF___carnumber_0 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 6 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carnumber )
DX3DMODEL_END
DX3DMODELTBL_END




DX3DOBJECT_START_HASH( object_KEIA_BASE_NUMBERPLATEF__, 3353996201 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_KEIA_BASE_NUMBERPLATEF__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	0, 3.2598, -15.8312, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	0, 3.2598, -15.8312, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_KEIA_BASE_INNER__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_KEIA_BASE_NUMBERPLATER__
/////////////////////////////////////////////
#if 0
	-1, 0, -1.22465e-016, 0, 
	0, 1, 0, 0, 
	1.22465e-016, 0, -1, 0, 
	0, 4.3221, -15.3926, 1
#endif



#if ((PT_KEIA_BASE_NUMBERPLATER___carnumber_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_NUMBERPLATER___carnumber_0 == PT_TRILIST ) || ((PT_KEIA_BASE_NUMBERPLATER___carnumber_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BASE_NUMBERPLATER___carnumber_0 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BASE_NUMBERPLATER___carnumber_0 )
DX3DVERT( -1.50932, -0.169539, -1.62918 ) DX3DVNORM( 0, -9.21348e-005, -1 )  //0
DX3DVERT( 1.50932, -0.169539, -1.62918 ) DX3DVNORM( 0, -9.21348e-005, -1 )  //1
DX3DVERT( 1.50932, 1.16831, -1.6293 ) DX3DVNORM( 0, -9.21348e-005, -1 )  //2
DX3DVERT( -1.50932, 1.16831, -1.6293 ) DX3DVNORM( 0, -9.21348e-005, -1 )  //3
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BASE_NUMBERPLATER___carnumber_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BASE_NUMBERPLATER___carnumber_0 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 4 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BASE_NUMBERPLATER___carnumber_0	NULL
#define vertexbuff_KEIA_BASE_NUMBERPLATER___carnumber_0	NULL
#endif




#if ((PT_KEIA_BASE_NUMBERPLATER___carnumber_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_NUMBERPLATER___carnumber_0 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BASE_NUMBERPLATER___carnumber_0 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
DX3DINDEX_END
#endif

#else
#define index_KEIA_BASE_NUMBERPLATER___carnumber_0	NULL
#endif




#if ((PT_KEIA_BASE_NUMBERPLATER___carnumber_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BASE_NUMBERPLATER___carnumber_0 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BASE_NUMBERPLATER___carnumber_0_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BASE_NUMBERPLATER___carnumber_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BASE_NUMBERPLATER___carnumber_0 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BASE_NUMBERPLATER___carnumber_0_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BASE_NUMBERPLATER___carnumber_0_VERTEXSTRIP 	NULL
#endif




DX3DMODELTBL_START( modeltbl_KEIA_BASE_NUMBERPLATER__ )
DX3DMODEL_START( model_KEIA_BASE_NUMBERPLATER___carnumber_0 )
DX3DMODEL_VERTEX( vertex_KEIA_BASE_NUMBERPLATER___carnumber_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BASE_NUMBERPLATER___carnumber_0 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 6 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carnumber )
DX3DMODEL_END
DX3DMODELTBL_END




DX3DOBJECT_START_HASH( object_KEIA_BASE_NUMBERPLATER__, 3354013529 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_KEIA_BASE_NUMBERPLATER__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	0, 4.3221, 15.3926, 
	-0, -3.14159, 0,                // -0, -180, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	0, 4.3221, 15.3926, 
	-0, -3.14159, 0,                // -0, -180, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_KEIA_BASE_NUMBERPLATEF__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_KEIA_BASE_WIPERRBASE_WIPERRCTRL__
/////////////////////////////////////////////
#if 0
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
#endif



#if ((PT_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0 == PT_TRILIST ) || ((PT_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0 )
DX3DVERT( -0.0378179, 0.0659634, 0.134004 ) DX3DVNORM( -0.0196981, 3.7147e-008, -0.999806 )  //0
DX3DVERT( 0.118291, 0.0624284, 0.130929 ) DX3DVNORM( -0.0196999, 8.62572e-009, -0.999806 )  //1
DX3DVERT( 0.115109, 0.174921, 0.130991 ) DX3DVNORM( -0.0196999, 8.62572e-009, -0.999806 )  //2
DX3DVERT( -0.0378179, 0.171458, 0.134004 ) DX3DVNORM( -0.0196981, 3.7147e-008, -0.999806 )  //3
DX3DVERT( 1.14992, 0.0390674, 0.1106 ) DX3DVNORM( -0.00985135, -9.94828e-009, -0.999951 )  //4
DX3DVERT( 2.33766, 0.0390674, 0.1106 ) DX3DVNORM( 0.0195653, 0, -0.999809 )  //5
DX3DVERT( 2.33766, 0.198354, 0.1106 ) DX3DVNORM( 0.0195653, 0, -0.999809 )  //6
DX3DVERT( 1.14992, 0.198354, 0.1106 ) DX3DVNORM( -0.00985135, -9.94828e-009, -0.999951 )  //7
DX3DVERT( 3.51849, 0.00971112, 0.156833 ) DX3DVNORM( 0.0863603, 0, -0.996264 )  //8
DX3DVERT( 3.51849, 0.168998, 0.156833 ) DX3DVNORM( 0.0863603, 0, -0.996264 )  //9
DX3DVERT( 4.69363, -0.00843879, 0.315015 ) DX3DVNORM( 0.133404, 0, -0.991062 )  //10
DX3DVERT( 4.69363, 0.0800373, 0.315015 ) DX3DVNORM( 0.133404, 0, -0.991062 )  //11
DX3DVERT( -0.0378179, 0.171458, 0.134004 ) DX3DVNORM( -0.0226387, 0.999744, -2.73886e-007 )  //12
DX3DVERT( 0.115109, 0.174921, 0.130991 ) DX3DVNORM( -0.0226388, 0.999744, -1.99626e-007 )  //13
DX3DVERT( 0.108002, 0.17476, 0.22497 ) DX3DVNORM( -0.0222713, 0.999581, -0.0184744 )  //14
DX3DVERT( -0.0378179, 0.171458, 0.222098 ) DX3DVNORM( -0.0220846, 0.999372, -0.0277127 )  //15
DX3DVERT( 1.14992, 0.198354, 0.1106 ) DX3DVNORM( -0.0113202, 0.999936, -6.26866e-008 )  //16
DX3DVERT( 2.33766, 0.198354, 0.1106 ) DX3DVNORM( 0.0124275, 0.999923, -0 )  //17
DX3DVERT( 2.33766, 0.198354, 0.245503 ) DX3DVNORM( 0.0124275, 0.999923, 7.7734e-008 )  //18
DX3DVERT( 1.14992, 0.198354, 0.245503 ) DX3DVNORM( -0.0233079, 0.999728, -3.13543e-008 )  //19
DX3DVERT( 3.51849, 0.168998, 0.156833 ) DX3DVNORM( 0.0515406, 0.994696, -0.0890115 )  //20
DX3DVERT( 3.51849, 0.168998, 0.291736 ) DX3DVNORM( 0.0433931, 0.998069, -0.0444558 )  //21
DX3DVERT( 4.69363, 0.0800373, 0.315015 ) DX3DVNORM( 0.0777818, 0.981087, -0.177252 )  //22
DX3DVERT( 4.69363, 0.115443, 0.37608 ) DX3DVNORM( 0.0594276, 0.99647, -0.0592988 )  //23
DX3DVERT( -0.0585621, 0.183725, 0.45117 ) DX3DVNORM( -0.0197028, 1.6033e-005, 0.999806 )  //24
DX3DVERT( 0.121139, 0.187794, 0.454709 ) DX3DVNORM( -0.0197028, 1.6033e-005, 0.999806 )  //25
DX3DVERT( 0.125037, 0.0495613, 0.454791 ) DX3DVNORM( -0.0197028, 1.6033e-005, 0.999806 )  //26
DX3DVERT( -0.0585621, 0.0537188, 0.45117 ) DX3DVNORM( -0.0197028, 1.6033e-005, 0.999806 )  //27
DX3DVERT( 1.14992, 0.198354, 0.367228 ) DX3DVNORM( 0.0308398, 0, 0.999524 )  //28
DX3DVERT( 2.33766, 0.198354, 0.367228 ) DX3DVNORM( -0.0195654, 0, 0.999809 )  //29
DX3DVERT( 2.33766, 0.0390674, 0.367228 ) DX3DVNORM( -0.0195654, 0, 0.999809 )  //30
DX3DVERT( 1.14992, 0.0390674, 0.367228 ) DX3DVNORM( 0.0308398, 0, 0.999524 )  //31
DX3DVERT( 3.51849, 0.168998, 0.413461 ) DX3DVNORM( -0.0553637, 0, 0.998466 )  //32
DX3DVERT( 3.51849, 0.00971112, 0.413461 ) DX3DVNORM( -0.0553637, 0, 0.998466 )  //33
DX3DVERT( 4.69363, 0.115443, 0.497805 ) DX3DVNORM( -0.0744023, 0, 0.997228 )  //34
DX3DVERT( 4.69363, -0.0438441, 0.497805 ) DX3DVNORM( -0.0744023, 0, 0.997228 )  //35
DX3DVERT( -0.0378179, 0.0659634, 0.222098 ) DX3DVNORM( -0.0220849, -0.999373, -0.0276642 )  //36
DX3DVERT( 0.111165, 0.0625897, 0.225036 ) DX3DVNORM( -0.0222715, -0.999582, -0.018442 )  //37
DX3DVERT( 0.118291, 0.0624284, 0.130929 ) DX3DVNORM( -0.0226388, -0.999744, -4.92099e-008 )  //38
DX3DVERT( -0.0378179, 0.0659634, 0.134004 ) DX3DVNORM( -0.0226387, -0.999744, -6.7e-008 )  //39
DX3DVERT( 1.14992, 0.0390674, 0.245503 ) DX3DVNORM( -0.0233079, -0.999728, -7.8582e-009 )  //40
DX3DVERT( 2.33766, 0.0390674, 0.245503 ) DX3DVNORM( -0.0124275, -0.999923, -8.61477e-008 )  //41
DX3DVERT( 2.33766, 0.0390674, 0.1106 ) DX3DVNORM( -0.0124274, -0.999923, -0 )  //42
DX3DVERT( 1.14992, 0.0390674, 0.1106 ) DX3DVNORM( -0.0113202, -0.999936, -1.57109e-008 )  //43
DX3DVERT( 3.51849, 0.00971112, 0.291736 ) DX3DVNORM( -0.0268092, -0.998646, -0.0445815 )  //44
DX3DVERT( 3.51849, 0.00971112, 0.156833 ) DX3DVNORM( -0.0183381, -0.995841, -0.0892473 )  //45
DX3DVERT( 4.69363, -0.0438441, 0.37608 ) DX3DVNORM( -0.00524309, -0.998214, -0.059509 )  //46
DX3DVERT( 4.69363, -0.00843879, 0.315015 ) DX3DVNORM( -0.011676, -0.984001, -0.177779 )  //47
DX3DVERT( 4.69363, -0.00843879, 0.315015 ) DX3DVNORM( 1, 0, -0 )  //48
DX3DVERT( 4.69363, -0.0438441, 0.37608 ) DX3DVNORM( 1, 0, -0 )  //49
DX3DVERT( 4.69363, 0.115443, 0.37608 ) DX3DVNORM( 1, 0, -0 )  //50
DX3DVERT( 4.69363, 0.0800373, 0.315015 ) DX3DVNORM( 1, 0, -0 )  //51
DX3DVERT( -0.0378179, 0.0659634, 0.222098 ) DX3DVNORM( -0.998981, 0, -0.0451402 )  //52
DX3DVERT( -0.0378179, 0.0659634, 0.134004 ) DX3DVNORM( -1, 0, -0 )  //53
DX3DVERT( -0.0378179, 0.171458, 0.134004 ) DX3DVNORM( -1, 0, -0 )  //54
DX3DVERT( -0.0378179, 0.171458, 0.222098 ) DX3DVNORM( -0.998981, 0, -0.0451402 )  //55
DX3DVERT( 2.33766, 0.198354, 0.367228 ) DX3DVNORM( 0.0124275, 0.999923, 1.55468e-007 )  //56
DX3DVERT( 1.14992, 0.198354, 0.367228 ) DX3DVNORM( -0.0352989, 0.999377, -0 )  //57
DX3DVERT( 1.14992, 0.0390674, 0.367228 ) DX3DVNORM( -0.0352989, -0.999377, -0 )  //58
DX3DVERT( 2.33766, 0.0390674, 0.367228 ) DX3DVNORM( -0.0124275, -0.999923, -1.72295e-007 )  //59
DX3DVERT( 0.621628, 0.0764336, 0.335245 ) DX3DVNORM( -1, 0, -0 )  //60
DX3DVERT( 0.621628, 0.160988, 0.335245 ) DX3DVNORM( -1, 0, -0 )  //61
DX3DVERT( 0.621628, 0.160988, 0.399859 ) DX3DVNORM( -1, 0, -0 )  //62
DX3DVERT( 0.621628, 0.0764336, 0.399859 ) DX3DVNORM( -1, 0, -0 )  //63
DX3DVERT( 3.51849, 0.168998, 0.413461 ) DX3DVNORM( 0.0351915, 0.999381, 5.12189e-007 )  //64
DX3DVERT( 3.51849, 0.00971112, 0.413461 ) DX3DVNORM( -0.0351915, -0.999381, -4.84498e-007 )  //65
DX3DVERT( 4.69363, 0.115443, 0.497805 ) DX3DVNORM( 0.0499279, 0.998753, 3.56709e-007 )  //66
DX3DVERT( 5.55246, 0.0687149, 0.505589 ) DX3DVNORM( 1, 0, -0 )  //67
DX3DVERT( 5.55246, -0.00813881, 0.505589 ) DX3DVNORM( 1, 0, -0 )  //68
DX3DVERT( 5.55246, -0.00813881, 0.564318 ) DX3DVNORM( 1, 0, -0 )  //69
DX3DVERT( 5.55246, 0.0687149, 0.564318 ) DX3DVNORM( 1, 0, -0 )  //70
DX3DVERT( 4.69363, -0.0438441, 0.497805 ) DX3DVNORM( -0.00199557, -0.999998, -3.12487e-007 )  //71
DX3DVERT( 4.69363, 0.115443, 0.37608 ) DX3DVNORM( 0.149112, 0, -0.98882 )  //72
DX3DVERT( 4.69363, -0.0438441, 0.37608 ) DX3DVNORM( 0.149112, 0, -0.98882 )  //73
DX3DVERT( 5.55246, -0.00813881, 0.505589 ) DX3DVNORM( 0.149112, 0, -0.98882 )  //74
DX3DVERT( 5.55246, 0.0687149, 0.505589 ) DX3DVNORM( 0.149112, 0, -0.98882 )  //75
DX3DVERT( 5.55246, -0.00813881, 0.564318 ) DX3DVNORM( 0.0415388, -0.999137, -0 )  //76
DX3DVERT( 5.55246, -0.00813881, 0.505589 ) DX3DVNORM( 0.0415388, -0.999137, -0 )  //77
DX3DVERT( 5.55246, 0.0687149, 0.564318 ) DX3DVNORM( -0.0772145, 0, 0.997014 )  //78
DX3DVERT( 5.55246, -0.00813881, 0.564318 ) DX3DVNORM( -0.0772145, 0, 0.997014 )  //79
DX3DVERT( 5.55246, 0.0687149, 0.505589 ) DX3DVNORM( 0.0543286, 0.998523, -0 )  //80
DX3DVERT( 5.55246, 0.0687149, 0.564318 ) DX3DVNORM( 0.0543286, 0.998523, -0 )  //81
DX3DVERT( 1.14992, 0.0390674, 0.245503 ) DX3DVNORM( -0.167474, 0, -0.985877 )  //82
DX3DVERT( 1.14992, 0.198354, 0.245503 ) DX3DVNORM( -0.167474, 0, -0.985877 )  //83
DX3DVERT( 0.621628, 0.160988, 0.335245 ) DX3DVNORM( -0.167474, 0, -0.985877 )  //84
DX3DVERT( 0.621628, 0.0764336, 0.335245 ) DX3DVNORM( -0.167474, 0, -0.985877 )  //85
DX3DVERT( 0.621628, 0.160988, 0.399859 ) DX3DVNORM( -0.0705539, 0.997508, -0 )  //86
DX3DVERT( 0.621628, 0.160988, 0.335245 ) DX3DVNORM( -0.0705539, 0.997508, -0 )  //87
DX3DVERT( 0.621628, 0.0764336, 0.399859 ) DX3DVNORM( 0.0616503, 0, 0.998098 )  //88
DX3DVERT( 0.621628, 0.160988, 0.399859 ) DX3DVNORM( 0.0616503, 0, 0.998098 )  //89
DX3DVERT( 0.621628, 0.0764336, 0.335245 ) DX3DVNORM( -0.0705539, -0.997508, -0 )  //90
DX3DVERT( 0.621628, 0.0764336, 0.399859 ) DX3DVNORM( -0.0705539, -0.997508, -0 )  //91
DX3DVERT( 0.111165, 0.0625897, 0.225036 ) DX3DVNORM( -0.0197011, 1.28853e-005, 0.999806 )  //92
DX3DVERT( 0.108002, 0.17476, 0.22497 ) DX3DVNORM( -0.0197011, 1.28853e-005, 0.999806 )  //93
DX3DVERT( 1.14992, 0.198354, 0.245503 ) DX3DVNORM( -0.0197011, 1.28853e-005, 0.999806 )  //94
DX3DVERT( 1.14992, 0.0390674, 0.245503 ) DX3DVNORM( -0.0197011, 1.28853e-005, 0.999806 )  //95
DX3DVERT( 0.121139, 0.187794, 0.454709 ) DX3DVNORM( -0.0215135, 0.998232, -0.0554039 )  //96
DX3DVERT( -0.0585621, 0.183725, 0.45117 ) DX3DVNORM( -0.0215135, 0.998232, -0.0554039 )  //97
DX3DVERT( 0.108002, 0.17476, 0.22497 ) DX3DVNORM( 0.997883, 0.0281067, -0.0586546 )  //98
DX3DVERT( 0.111165, 0.0625897, 0.225036 ) DX3DVNORM( 0.997883, 0.0281067, -0.0586546 )  //99
DX3DVERT( 0.125037, 0.0495613, 0.454791 ) DX3DVNORM( 0.997883, 0.0281067, -0.0586546 )  //100
DX3DVERT( 0.121139, 0.187794, 0.454709 ) DX3DVNORM( 0.997883, 0.0281067, -0.0586546 )  //101
DX3DVERT( -0.0585621, 0.0537188, 0.45117 ) DX3DVNORM( -0.0215141, -0.998238, -0.0553072 )  //102
DX3DVERT( 0.125037, 0.0495613, 0.454791 ) DX3DVNORM( -0.0215141, -0.998238, -0.0553072 )  //103
DX3DVERT( -0.0585621, 0.183725, 0.45117 ) DX3DVNORM( -0.995925, 0, -0.0901884 )  //104
DX3DVERT( -0.0585621, 0.0537188, 0.45117 ) DX3DVNORM( -0.995925, 0, -0.0901884 )  //105
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 106 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0	NULL
#define vertexbuff_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0	NULL
#endif




#if ((PT_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
	4, 5, 7, // 2 8
	5, 6, 7, // 3 11
	5, 8, 6, // 4 14
	8, 9, 6, // 5 17
	8, 10, 9, // 6 20
	10, 11, 9, // 7 23
	12, 13, 15, // 8 26
	13, 14, 15, // 9 29
	16, 17, 19, // 10 32
	17, 18, 19, // 11 35
	17, 20, 18, // 12 38
	20, 21, 18, // 13 41
	20, 22, 21, // 14 44
	22, 23, 21, // 15 47
	24, 25, 27, // 16 50
	25, 26, 27, // 17 53
	28, 29, 31, // 18 56
	29, 30, 31, // 19 59
	29, 32, 30, // 20 62
	32, 33, 30, // 21 65
	32, 34, 33, // 22 68
	34, 35, 33, // 23 71
	36, 37, 39, // 24 74
	37, 38, 39, // 25 77
	40, 41, 43, // 26 80
	41, 42, 43, // 27 83
	41, 44, 42, // 28 86
	44, 45, 42, // 29 89
	44, 46, 45, // 30 92
	46, 47, 45, // 31 95
	48, 49, 51, // 32 98
	49, 50, 51, // 33 101
	52, 53, 55, // 34 104
	53, 54, 55, // 35 107
	19, 18, 57, // 36 110
	18, 56, 57, // 37 113
	41, 40, 59, // 38 116
	40, 58, 59, // 39 119
	60, 61, 63, // 40 122
	61, 62, 63, // 41 125
	18, 21, 56, // 42 128
	21, 64, 56, // 43 131
	44, 41, 65, // 44 134
	41, 59, 65, // 45 137
	21, 23, 64, // 46 140
	23, 66, 64, // 47 143
	67, 68, 70, // 48 146
	68, 69, 70, // 49 149
	46, 44, 71, // 50 152
	44, 65, 71, // 51 155
	72, 73, 75, // 52 158
	73, 74, 75, // 53 161
	46, 71, 77, // 54 164
	71, 76, 77, // 55 167
	35, 34, 79, // 56 170
	34, 78, 79, // 57 173
	66, 23, 81, // 58 176
	23, 80, 81, // 59 179
	82, 83, 85, // 60 182
	83, 84, 85, // 61 185
	19, 57, 87, // 62 188
	57, 86, 87, // 63 191
	28, 31, 89, // 64 194
	31, 88, 89, // 65 197
	58, 40, 91, // 66 200
	40, 90, 91, // 67 203
	2, 1, 7, // 68 206
	1, 4, 7, // 69 209
	14, 13, 19, // 70 212
	13, 16, 19, // 71 215
	92, 93, 95, // 72 218
	93, 94, 95, // 73 221
	38, 37, 43, // 74 224
	37, 40, 43, // 75 227
	15, 14, 97, // 76 230
	14, 96, 97, // 77 233
	98, 99, 101, // 78 236
	99, 100, 101, // 79 239
	37, 36, 103, // 80 242
	36, 102, 103, // 81 245
	52, 55, 105, // 82 248
	55, 104, 105, // 83 251
DX3DINDEX_END
#endif

#else
#define index_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0	NULL
#endif




#if ((PT_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0_VERTEXSTRIP 	NULL
#endif




DX3DMODELTBL_START( modeltbl_KEIA_BASE_WIPERRBASE_WIPERRCTRL__ )
DX3DMODEL_START( model_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0 )
DX3DMODEL_VERTEX( vertex_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BASE_WIPERRBASE_WIPERRCTRL___carbodyblack_0 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 252 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carbodyblack )
DX3DMODEL_END
DX3DMODELTBL_END




DX3DOBJECT_START_HASH( object_KEIA_BASE_WIPERRBASE_WIPERRCTRL__, 860344889 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_KEIA_BASE_WIPERRBASE_WIPERRCTRL__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	0, 0, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	0, 0, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_NULL__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_KEIA_BASE_WIPERRBASE__
/////////////////////////////////////////////
#if 0
	0.971696, 0.0567346, -0.229321, 0, 
	-0.225581, 0.511076, -0.829406, 0, 
	0.0701444, 0.857661, 0.509408, 0, 
	0.0997568, 11.0335, 10.0799, 1
#endif



DX3DOBJECT_START_HASH( object_KEIA_BASE_WIPERRBASE__, 1508701317 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_NULL__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	0.0997568, 11.0335, -10.0799, 
	1.02001, -0.23138, 0.0583209,                // 58.4424, -13.2571, 3.34154
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	0.0997568, 11.0335, -10.0799, 
	1.02001, -0.23138, 0.0583209,                // 58.4424, -13.2571, 3.34154
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_KEIA_BASE_NUMBERPLATER__ )
DX3DOBJECT_CHILD( object_KEIA_BASE_WIPERRBASE_WIPERRCTRL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_KEIA_BASE_WIPERLBASE_WIPERLCTRL__
/////////////////////////////////////////////
#if 0
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
#endif



#if ((PT_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0 == PT_TRILIST ) || ((PT_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0 )
DX3DVERT( -0.0284187, -0.134777, -0.0320133 ) DX3DVNORM( -0.0209096, 1.0209e-007, -0.999781 )  //0
DX3DVERT( 0.124898, -0.138463, -0.0352198 ) DX3DVNORM( -0.0209115, 7.04762e-008, -0.999781 )  //1
DX3DVERT( 0.121772, -0.0211857, -0.0351544 ) DX3DVNORM( -0.0209115, 7.04762e-008, -0.999781 )  //2
DX3DVERT( -0.0284187, -0.024796, -0.0320133 ) DX3DVNORM( -0.0209096, 1.0209e-007, -0.999781 )  //3
DX3DVERT( 1.13807, -0.162817, -0.0564132 ) DX3DVNORM( -0.0104572, 1.94323e-008, -0.999945 )  //4
DX3DVERT( 2.30455, -0.162817, -0.0564132 ) DX3DVNORM( 0.0207675, 0, -0.999784 )  //5
DX3DVERT( 2.30455, 0.00324392, -0.0564132 ) DX3DVNORM( 0.0207675, 0, -0.999784 )  //6
DX3DVERT( 1.13807, 0.00324392, -0.0564132 ) DX3DVNORM( -0.0104572, 1.94323e-008, -0.999945 )  //7
DX3DVERT( 3.46426, -0.193422, -0.00821364 ) DX3DVNORM( 0.0916045, 0, -0.995795 )  //8
DX3DVERT( 3.46426, -0.0273609, -0.00821364 ) DX3DVNORM( 0.0916045, 0, -0.995795 )  //9
DX3DVERT( 4.61837, -0.212344, 0.156696 ) DX3DVNORM( 0.141452, 0, -0.989945 )  //10
DX3DVERT( 4.61837, -0.120105, 0.156696 ) DX3DVNORM( 0.141452, 0, -0.989945 )  //11
DX3DVERT( -0.0284187, -0.024796, -0.0320133 ) DX3DVNORM( -0.0240308, 0.999711, -1.33745e-007 )  //12
DX3DVERT( 0.121772, -0.0211857, -0.0351544 ) DX3DVNORM( -0.0240309, 0.999711, -1.24265e-007 )  //13
DX3DVERT( 0.114792, -0.0213535, 0.0628209 ) DX3DVNORM( -0.0236408, 0.99955, -0.0184738 )  //14
DX3DVERT( -0.0284187, -0.024796, 0.0598269 ) DX3DVNORM( -0.0234426, 0.999341, -0.0277118 )  //15
DX3DVERT( 1.13807, 0.00324392, -0.0564132 ) DX3DVNORM( -0.0120164, 0.999928, -5.7397e-008 )  //16
DX3DVERT( 2.30455, 0.00324392, -0.0564132 ) DX3DVNORM( 0.0131916, 0.999913, -0 )  //17
DX3DVERT( 2.30455, 0.00324392, 0.0842268 ) DX3DVNORM( 0.0131917, 0.999913, 8.69909e-008 )  //18
DX3DVERT( 1.13807, 0.00324392, 0.0842268 ) DX3DVNORM( -0.0247371, 0.999694, -2.87099e-008 )  //19
DX3DVERT( 3.46426, -0.0273609, -0.00821364 ) DX3DVNORM( 0.0546975, 0.99453, -0.0889814 )  //20
DX3DVERT( 3.46426, -0.0273609, 0.132426 ) DX3DVNORM( 0.0460541, 0.99795, -0.0444401 )  //21
DX3DVERT( 4.61837, -0.120105, 0.156696 ) DX3DVNORM( 0.0825357, 0.980711, -0.177185 )  //22
DX3DVERT( 4.61837, -0.0831938, 0.220358 ) DX3DVNORM( 0.0829458, 0.994788, -0.0592936 )  //23
DX3DVERT( -0.0487915, -0.0120074, 0.298641 ) DX3DVNORM( -0.0209146, 1.6027e-005, 0.999781 )  //24
DX3DVERT( 0.127693, -0.00776505, 0.302331 ) DX3DVNORM( -0.0209146, 1.6027e-005, 0.999781 )  //25
DX3DVERT( 0.131522, -0.151877, 0.302416 ) DX3DVNORM( -0.0209146, 1.6027e-005, 0.999781 )  //26
DX3DVERT( -0.0487915, -0.147543, 0.298641 ) DX3DVNORM( -0.0209146, 1.6027e-005, 0.999781 )  //27
DX3DVERT( 1.13807, 0.00324392, 0.211129 ) DX3DVNORM( 0.0327313, 0, 0.999464 )  //28
DX3DVERT( 2.30455, 0.00324392, 0.211129 ) DX3DVNORM( -0.0207676, 0, 0.999784 )  //29
DX3DVERT( 2.30455, -0.162817, 0.211129 ) DX3DVNORM( -0.0207676, 0, 0.999784 )  //30
DX3DVERT( 1.13807, -0.162817, 0.211129 ) DX3DVNORM( 0.0327313, 0, 0.999464 )  //31
DX3DVERT( 3.46425, -0.0273609, 0.259329 ) DX3DVNORM( -0.0587566, 0, 0.998272 )  //32
DX3DVERT( 3.46425, -0.193422, 0.259329 ) DX3DVNORM( -0.0587566, 0, 0.998272 )  //33
DX3DVERT( 4.61837, -0.0831938, 0.34726 ) DX3DVNORM( -0.0645161, 0, 0.997917 )  //34
DX3DVERT( 4.61837, -0.249255, 0.34726 ) DX3DVNORM( -0.0645161, 0, 0.997917 )  //35
DX3DVERT( -0.0284187, -0.134777, 0.0598269 ) DX3DVNORM( -0.0234428, -0.999342, -0.0276634 )  //36
DX3DVERT( 0.117898, -0.138294, 0.0628896 ) DX3DVNORM( -0.0236409, -0.99955, -0.0184416 )  //37
DX3DVERT( 0.124898, -0.138463, -0.0352198 ) DX3DVNORM( -0.0240308, -0.999711, -1.8818e-007 )  //38
DX3DVERT( -0.0284187, -0.134777, -0.0320133 ) DX3DVNORM( -0.0240307, -0.999711, -1.30871e-007 )  //39
DX3DVERT( 1.13807, -0.162817, 0.0842268 ) DX3DVNORM( -0.0247371, -0.999694, -6.1401e-008 )  //40
DX3DVERT( 2.30455, -0.162817, 0.0842268 ) DX3DVNORM( -0.0131917, -0.999913, -8.41825e-008 )  //41
DX3DVERT( 2.30455, -0.162817, -0.0564132 ) DX3DVNORM( -0.0131916, -0.999913, -0 )  //42
DX3DVERT( 1.13807, -0.162817, -0.0564132 ) DX3DVNORM( -0.0120164, -0.999928, -1.22753e-007 )  //43
DX3DVERT( 3.46426, -0.193422, 0.132426 ) DX3DVNORM( -0.0284567, -0.9986, -0.0445816 )  //44
DX3DVERT( 3.46426, -0.193422, -0.00821364 ) DX3DVNORM( -0.0194657, -0.995819, -0.0892469 )  //45
DX3DVERT( 4.61837, -0.249255, 0.220358 ) DX3DVNORM( -0.0242392, -0.997935, -0.0594789 )  //46
DX3DVERT( 4.61837, -0.212344, 0.156696 ) DX3DVNORM( -0.0123942, -0.983993, -0.177777 )  //47
DX3DVERT( 4.61837, -0.212344, 0.156696 ) DX3DVNORM( 1, 0, -0 )  //48
DX3DVERT( 4.61837, -0.249255, 0.220358 ) DX3DVNORM( 1, 0, -0 )  //49
DX3DVERT( 4.61837, -0.0831938, 0.220358 ) DX3DVNORM( 1, 0, -0 )  //50
DX3DVERT( 4.61837, -0.120105, 0.156696 ) DX3DVNORM( 1, 0, -0 )  //51
DX3DVERT( -0.0284187, -0.134777, 0.0598269 ) DX3DVNORM( -0.999095, 0, -0.0425383 )  //52
DX3DVERT( -0.0284187, -0.134777, -0.0320133 ) DX3DVNORM( -1, 0, -0 )  //53
DX3DVERT( -0.0284187, -0.024796, -0.0320133 ) DX3DVNORM( -1, 0, -0 )  //54
DX3DVERT( -0.0284187, -0.024796, 0.0598269 ) DX3DVNORM( -0.999095, 0, -0.0425383 )  //55
DX3DVERT( 2.30455, 0.00324392, 0.211129 ) DX3DVNORM( 0.0131917, 0.999913, 1.73982e-007 )  //56
DX3DVERT( 1.13807, 0.00324392, 0.211129 ) DX3DVNORM( -0.0374618, 0.999298, -0 )  //57
DX3DVERT( 1.13807, -0.162817, 0.211129 ) DX3DVNORM( -0.0374618, -0.999298, -0 )  //58
DX3DVERT( 2.30455, -0.162817, 0.211129 ) DX3DVNORM( -0.0131917, -0.999913, -1.68365e-007 )  //59
DX3DVERT( 0.619227, -0.123862, 0.177786 ) DX3DVNORM( -1, 0, -0 )  //60
DX3DVERT( 0.619227, -0.0357115, 0.177786 ) DX3DVNORM( -1, 0, -0 )  //61
DX3DVERT( 0.619227, -0.0357115, 0.245148 ) DX3DVNORM( -1, 0, -0 )  //62
DX3DVERT( 0.619227, -0.123862, 0.245148 ) DX3DVNORM( -1, 0, -0 )  //63
DX3DVERT( 3.46425, -0.0273609, 0.259329 ) DX3DVNORM( 0.0373532, 0.999302, 4.97727e-007 )  //64
DX3DVERT( 3.46425, -0.193422, 0.259329 ) DX3DVNORM( -0.0373531, -0.999302, -4.7325e-007 )  //65
DX3DVERT( 4.61837, -0.0831938, 0.34726 ) DX3DVNORM( 0.0827126, 0.996573, 3.23923e-007 )  //66
DX3DVERT( 5.4285, -0.17864, 0.329075 ) DX3DVNORM( 1, 0, -0 )  //67
DX3DVERT( 5.4285, -0.258762, 0.329075 ) DX3DVNORM( 1, 0, -0 )  //68
DX3DVERT( 5.4285, -0.258762, 0.390301 ) DX3DVNORM( 1, 0, -0 )  //69
DX3DVERT( 5.4285, -0.17864, 0.390301 ) DX3DVNORM( 1, 0, -0 )  //70
DX3DVERT( 4.61837, -0.249255, 0.34726 ) DX3DVNORM( -0.0300326, -0.999549, -3.04922e-007 )  //71
DX3DVERT( 4.61837, -0.0831938, 0.220358 ) DX3DVNORM( 0.133005, 0, -0.991115 )  //72
DX3DVERT( 4.61837, -0.249255, 0.220358 ) DX3DVNORM( 0.133005, 0, -0.991115 )  //73
DX3DVERT( 5.4285, -0.258762, 0.329075 ) DX3DVNORM( 0.133005, 0, -0.991115 )  //74
DX3DVERT( 5.4285, -0.17864, 0.329075 ) DX3DVNORM( 0.133005, 0, -0.991115 )  //75
DX3DVERT( 5.4285, -0.258762, 0.390301 ) DX3DVNORM( -0.0117343, -0.999931, -0 )  //76
DX3DVERT( 5.4285, -0.258762, 0.329075 ) DX3DVNORM( -0.0117343, -0.999931, -0 )  //77
DX3DVERT( 5.4285, -0.17864, 0.390301 ) DX3DVNORM( -0.0530543, 0, 0.998592 )  //78
DX3DVERT( 5.4285, -0.258762, 0.390301 ) DX3DVNORM( -0.0530543, 0, 0.998592 )  //79
DX3DVERT( 5.4285, -0.17864, 0.329075 ) DX3DVNORM( 0.117006, 0.993131, -0 )  //80
DX3DVERT( 5.4285, -0.17864, 0.390301 ) DX3DVNORM( 0.117006, 0.993131, -0 )  //81
DX3DVERT( 1.13807, -0.162817, 0.0842268 ) DX3DVNORM( -0.177462, 0, -0.984128 )  //82
DX3DVERT( 1.13807, 0.00324392, 0.0842268 ) DX3DVNORM( -0.177462, 0, -0.984128 )  //83
DX3DVERT( 0.619227, -0.0357115, 0.177786 ) DX3DVNORM( -0.177462, 0, -0.984128 )  //84
DX3DVERT( 0.619227, -0.123862, 0.177786 ) DX3DVNORM( -0.177462, 0, -0.984128 )  //85
DX3DVERT( 0.619227, -0.0357115, 0.245148 ) DX3DVNORM( -0.074871, 0.997193, -0 )  //86
DX3DVERT( 0.619227, -0.0357115, 0.177786 ) DX3DVNORM( -0.074871, 0.997193, -0 )  //87
DX3DVERT( 0.619227, -0.123862, 0.245148 ) DX3DVNORM( 0.0654275, 0, 0.997857 )  //88
DX3DVERT( 0.619227, -0.0357115, 0.245148 ) DX3DVNORM( 0.0654275, 0, 0.997857 )  //89
DX3DVERT( 0.619227, -0.123862, 0.177786 ) DX3DVNORM( -0.074871, -0.997193, -0 )  //90
DX3DVERT( 0.619227, -0.123862, 0.245148 ) DX3DVNORM( -0.074871, -0.997193, -0 )  //91
DX3DVERT( 0.117898, -0.138294, 0.0628896 ) DX3DVNORM( -0.0209126, 1.29323e-005, 0.999781 )  //92
DX3DVERT( 0.114792, -0.0213535, 0.0628209 ) DX3DVNORM( -0.0209126, 1.29323e-005, 0.999781 )  //93
DX3DVERT( 1.13807, 0.00324392, 0.0842268 ) DX3DVNORM( -0.0209126, 1.29323e-005, 0.999781 )  //94
DX3DVERT( 1.13807, -0.162817, 0.0842268 ) DX3DVNORM( -0.0209126, 1.29323e-005, 0.999781 )  //95
DX3DVERT( 0.127693, -0.00776505, 0.302331 ) DX3DVNORM( -0.0228364, 0.998203, -0.0554022 )  //96
DX3DVERT( -0.0487915, -0.0120074, 0.298641 ) DX3DVNORM( -0.0228364, 0.998203, -0.0554022 )  //97
DX3DVERT( 0.114792, -0.0213535, 0.0628209 ) DX3DVNORM( 0.99812, 0.026485, -0.0552688 )  //98
DX3DVERT( 0.117898, -0.138294, 0.0628896 ) DX3DVNORM( 0.99812, 0.026485, -0.0552688 )  //99
DX3DVERT( 0.131522, -0.151877, 0.302416 ) DX3DVNORM( 0.99812, 0.026485, -0.0552688 )  //100
DX3DVERT( 0.127693, -0.00776505, 0.302331 ) DX3DVNORM( 0.99812, 0.026485, -0.0552688 )  //101
DX3DVERT( -0.0487915, -0.147543, 0.298641 ) DX3DVNORM( -0.022837, -0.998208, -0.0553055 )  //102
DX3DVERT( 0.131522, -0.151877, 0.302416 ) DX3DVNORM( -0.022837, -0.998208, -0.0553055 )  //103
DX3DVERT( -0.0487915, -0.0120074, 0.298641 ) DX3DVNORM( -0.996381, 0, -0.0849996 )  //104
DX3DVERT( -0.0487915, -0.147543, 0.298641 ) DX3DVNORM( -0.996381, 0, -0.0849996 )  //105
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 106 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0	NULL
#define vertexbuff_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0	NULL
#endif




#if ((PT_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
	4, 5, 7, // 2 8
	5, 6, 7, // 3 11
	5, 8, 6, // 4 14
	8, 9, 6, // 5 17
	8, 10, 9, // 6 20
	10, 11, 9, // 7 23
	12, 13, 15, // 8 26
	13, 14, 15, // 9 29
	16, 17, 19, // 10 32
	17, 18, 19, // 11 35
	17, 20, 18, // 12 38
	20, 21, 18, // 13 41
	20, 22, 21, // 14 44
	22, 23, 21, // 15 47
	24, 25, 27, // 16 50
	25, 26, 27, // 17 53
	28, 29, 31, // 18 56
	29, 30, 31, // 19 59
	29, 32, 30, // 20 62
	32, 33, 30, // 21 65
	32, 34, 33, // 22 68
	34, 35, 33, // 23 71
	36, 37, 39, // 24 74
	37, 38, 39, // 25 77
	40, 41, 43, // 26 80
	41, 42, 43, // 27 83
	41, 44, 42, // 28 86
	44, 45, 42, // 29 89
	44, 46, 45, // 30 92
	46, 47, 45, // 31 95
	48, 49, 51, // 32 98
	49, 50, 51, // 33 101
	52, 53, 55, // 34 104
	53, 54, 55, // 35 107
	19, 18, 57, // 36 110
	18, 56, 57, // 37 113
	41, 40, 59, // 38 116
	40, 58, 59, // 39 119
	60, 61, 63, // 40 122
	61, 62, 63, // 41 125
	18, 21, 56, // 42 128
	21, 64, 56, // 43 131
	44, 41, 65, // 44 134
	41, 59, 65, // 45 137
	21, 23, 64, // 46 140
	23, 66, 64, // 47 143
	67, 68, 70, // 48 146
	68, 69, 70, // 49 149
	46, 44, 71, // 50 152
	44, 65, 71, // 51 155
	72, 73, 75, // 52 158
	73, 74, 75, // 53 161
	46, 71, 77, // 54 164
	71, 76, 77, // 55 167
	35, 34, 79, // 56 170
	34, 78, 79, // 57 173
	66, 23, 81, // 58 176
	23, 80, 81, // 59 179
	82, 83, 85, // 60 182
	83, 84, 85, // 61 185
	19, 57, 87, // 62 188
	57, 86, 87, // 63 191
	28, 31, 89, // 64 194
	31, 88, 89, // 65 197
	58, 40, 91, // 66 200
	40, 90, 91, // 67 203
	2, 1, 7, // 68 206
	1, 4, 7, // 69 209
	14, 13, 19, // 70 212
	13, 16, 19, // 71 215
	92, 93, 95, // 72 218
	93, 94, 95, // 73 221
	38, 37, 43, // 74 224
	37, 40, 43, // 75 227
	15, 14, 97, // 76 230
	14, 96, 97, // 77 233
	98, 99, 101, // 78 236
	99, 100, 101, // 79 239
	37, 36, 103, // 80 242
	36, 102, 103, // 81 245
	52, 55, 105, // 82 248
	55, 104, 105, // 83 251
DX3DINDEX_END
#endif

#else
#define index_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0	NULL
#endif




#if ((PT_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0_VERTEXSTRIP 	NULL
#endif




DX3DMODELTBL_START( modeltbl_KEIA_BASE_WIPERLBASE_WIPERLCTRL__ )
DX3DMODEL_START( model_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0 )
DX3DMODEL_VERTEX( vertex_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BASE_WIPERLBASE_WIPERLCTRL___carbodyblack_0 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 252 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carbodyblack )
DX3DMODEL_END
DX3DMODELTBL_END




DX3DOBJECT_START_HASH( object_KEIA_BASE_WIPERLBASE_WIPERLCTRL__, 479747257 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_KEIA_BASE_WIPERLBASE_WIPERLCTRL__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	0, 0, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	0, 0, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_NULL__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_KEIA_BASE_WIPERLBASE__
/////////////////////////////////////////////
#if 0
	0.977014, 0.0517172, 0.206804, 0, 
	0.151669, 0.513064, -0.844844, 0, 
	-0.149797, 0.856791, 0.493427, 0, 
	-5.41232, 10.912, 8.74332, 1
#endif



DX3DOBJECT_START_HASH( object_KEIA_BASE_WIPERLBASE__, 622952197 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_NULL__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	-5.41232, 10.912, -8.74332, 
	1.04219, 0.208308, 0.0528845,                // 59.7131, 11.9351, 3.03006
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	-5.41232, 10.912, -8.74332, 
	1.04219, 0.208308, 0.0528845,                // 59.7131, 11.9351, 3.03006
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_KEIA_BASE_WIPERRBASE__ )
DX3DOBJECT_CHILD( object_KEIA_BASE_WIPERLBASE_WIPERLCTRL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_KEIA_BODYR1__
/////////////////////////////////////////////
#if 0
	-1, 0, -1.22465e-016, 0, 
	0, 1, 0, 0, 
	-1.22465e-016, -0, 1, 0, 
	0, -0.673368, 0, 1
#endif



#if ((PT_KEIA_BODYR1___carbodycolor_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR1___carbodycolor_0 == PT_TRILIST ) || ((PT_KEIA_BODYR1___carbodycolor_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BODYR1___carbodycolor_0 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BODYR1___carbodycolor_0 )
DX3DVERT( -6.57116, 8.98116, -14.0404 ) DX3DVNORM( -0.841887, 0.492878, -0.219768 )  //0
DX3DVERT( -6.35941, 8.88118, -14.8853 ) DX3DVNORM( -0.714494, 0.500546, -0.488827 )  //1
DX3DVERT( -5.76264, 9.14685, -14.9618 ) DX3DVNORM( -0.460249, 0.706283, -0.537899 )  //2
DX3DVERT( -6.35264, 7.52912, -15.404 ) DX3DVNORM( -0.654132, 0.472062, -0.590989 )  //3
DX3DVERT( -6.54128, 7.95409, -14.8645 ) DX3DVNORM( -0.901238, 0.315206, -0.297347 )  //4
DX3DVERT( -6.82871, 7.55528, -15.0086 ) DX3DVNORM( -0.803807, 0.493358, -0.332405 )  //5
DX3DVERT( -6.86365, 6.67622, -15.9232 ) DX3DVNORM( -0.835598, 0.411671, -0.363735 )  //6
DX3DVERT( -6.51048, 6.66339, -16.2408 ) DX3DVNORM( -0.465636, 0.591364, -0.658386 )  //7
DX3DVERT( -6.84231, 4.80754, -16.2498 ) DX3DVNORM( -0.84641, -0.0364646, -0.531282 )  //8
DX3DVERT( -6.46395, 2.87958, -16.2969 ) DX3DVNORM( -0.769559, -0.156732, -0.619043 )  //9
DX3DVERT( -6.51995, 4.82123, -16.5648 ) DX3DVNORM( -0.520351, 0.0340986, -0.853271 )  //10
DX3DVERT( -5.75464, 3.32697, -16.7201 ) DX3DVNORM( -0.388022, -0.1036, -0.915809 )  //11
DX3DVERT( -5.741, 10.8518, -7.69346 ) DX3DVNORM( -0.853576, 0.516697, -0.0665673 )  //12
DX3DVERT( -6.61477, 9.56764, -9.65824 ) DX3DVNORM( -0.921213, 0.386043, -0.0483428 )  //13
DX3DVERT( -5.91096, 10.3576, -10.5723 ) DX3DVNORM( -0.772072, 0.628782, -0.0924033 )  //14
DX3DVERT( -6.55531, 9.32279, -11.8666 ) DX3DVNORM( -0.918016, 0.392097, -0.0592193 )  //15
DX3DVERT( -6.92038, 7.33589, -12.9482 ) DX3DVNORM( -0.977872, 0.198933, -0.0647442 )  //16
DX3DVERT( -6.9191, 7.29136, -12.0314 ) DX3DVNORM( -0.984381, 0.174244, 0.0251685 )  //17
DX3DVERT( -6.44033, 8.00111, 15.9722 ) DX3DVNORM( -0.901159, 0.428732, 0.0640382 )  //18
DX3DVERT( -7.0516, 7.08147, 13.5271 ) DX3DVNORM( -0.901159, 0.428732, 0.0640382 )  //19
DX3DVERT( -6.242, 8.46922, 15.6291 ) DX3DVNORM( -0.901159, 0.428732, 0.0640382 )  //20
DX3DVERT( -6.242, 8.46922, 15.6291 ) DX3DVNORM( -0.949818, 0.225028, 0.217272 )  //21
DX3DVERT( -7.0516, 7.08147, 13.5271 ) DX3DVNORM( -0.970695, 0.228976, 0.0729489 )  //22
DX3DVERT( -6.03974, 9.79518, 15.14 ) DX3DVNORM( -0.943651, 0.291964, 0.155816 )  //23
DX3DVERT( -6.82809, 8.03, 12.8495 ) DX3DVNORM( -0.970782, 0.228267, 0.0740002 )  //24
DX3DVERT( -6.9431, 6.82883, 12.0628 ) DX3DVNORM( -0.993067, 0.114981, -0.0244314 )  //25
DX3DVERT( -4.67269, 14.447, 12.8452 ) DX3DVNORM( -0.922256, 0.384881, -0.0361803 )  //26
DX3DVERT( -6.62813, 10.3366, 11.3237 ) DX3DVNORM( -0.965699, 0.222523, 0.133825 )  //27
DX3DVERT( -6.10314, 11.6562, 11.5688 ) DX3DVNORM( -0.922308, 0.382136, 0.0576246 )  //28
DX3DVERT( -6.6361, 9.3856, 2.61874 ) DX3DVNORM( -0.979633, 0.19963, -0.0216245 )  //29
DX3DVERT( -6.10314, 11.2298, 3.49985 ) DX3DVNORM( -0.949372, 0.31314, -0.0252048 )  //30
DX3DVERT( -6.10314, 11.3399, 4.15916 ) DX3DVNORM( -0.940003, 0.34025, -0.0249735 )  //31
DX3DVERT( -6.6715, 9.24484, -4.41678 ) DX3DVNORM( -0.974198, 0.224567, -0.0225151 )  //32
DX3DVERT( -6.62813, 9.58596, -8.62647 ) DX3DVNORM( -0.931513, 0.363708, 0.000223029 )  //33
DX3DVERT( -5.21142, 13.5836, 13.0296 ) DX3DVNORM( -0.913214, 0.40387, -0.0541154 )  //34
DX3DVERT( -4.82181, 14.1882, 13.0357 ) DX3DVNORM( -0.711852, 0.616773, 0.335943 )  //35
DX3DVERT( -5.02558, 13.6658, 13.4823 ) DX3DVNORM( -0.725344, 0.551064, 0.41256 )  //36
DX3DVERT( -4.7573, 14.0876, 13.1807 ) DX3DVNORM( -0.360658, 0.68332, 0.634822 )  //37
DX3DVERT( -7.21802, 10.9251, -7.11136 ) DX3DVNORM( -0.990875, 0.00321581, -0.134742 )  //38
DX3DVERT( -7.2307, 11.6591, -7.00056 ) DX3DVNORM( -0.991211, 0.00536166, -0.13218 )  //39
DX3DVERT( -7.31188, 10.9542, -6.42044 ) DX3DVNORM( -0.995662, 0.0178606, -0.0913131 )  //40
DX3DVERT( -7.26839, 11.9113, -6.69765 ) DX3DVNORM( -0.997265, 0.0251832, -0.0694828 )  //41
DX3DVERT( -7.2708, 11.9315, -6.33754 ) DX3DVNORM( -0.999044, 0.0427593, -0.00907445 )  //42
DX3DVERT( -5.31638, 13.1671, -5.29084 ) DX3DVNORM( -0.893071, 0.449909, -0.00247058 )  //43
DX3DVERT( -5.73974, 12.2384, -5.95772 ) DX3DVNORM( -0.937569, 0.34286, 0.0584109 )  //44
DX3DVERT( -5.81141, 12.125, -6.15896 ) DX3DVNORM( -0.914481, 0.40192, 0.0467425 )  //45
DX3DVERT( -6.10314, 10.756, -6.11994 ) DX3DVNORM( -0.973222, 0.229794, -0.00587407 )  //46
DX3DVERT( -5.80431, 9.62364, -14.149 ) DX3DVNORM( -0.666206, 0.68993, -0.283136 )  //47
DX3DVERT( -5.76511, 10.2448, -11.7339 ) DX3DVNORM( -0.722329, 0.675632, -0.147519 )  //48
DX3DVERT( -6.44033, 8.00111, 15.9722 ) DX3DVNORM( -0.829767, 0.356989, 0.429005 )  //49
DX3DVERT( -6.89158, 6.94526, 15.978 ) DX3DVNORM( -0.938351, 0.0958647, 0.332126 )  //50
DX3DVERT( -7.0516, 7.08147, 13.5271 ) DX3DVNORM( -0.952538, 0.294113, 0.0785387 )  //51
DX3DVERT( -7.04739, 6.45971, 15.1905 ) DX3DVNORM( -0.985596, 0.114695, 0.12428 )  //52
DX3DVERT( -6.65927, 2.98897, 10.0941 ) DX3DVNORM( -0.983275, -0.181871, 0.00965093 )  //53
DX3DVERT( -6.65927, 2.58843, 2.54585 ) DX3DVNORM( -0.962988, -0.269308, 0.0112935 )  //54
DX3DVERT( -6.77061, 3.58986, 10.0744 ) DX3DVNORM( -0.978266, -0.207226, 0.00724487 )  //55
DX3DVERT( -6.98347, 3.50189, 2.55351 ) DX3DVNORM( -0.988749, -0.149022, 0.0129253 )  //56
DX3DVERT( -6.69345, 2.79517, -15.7022 ) DX3DVNORM( -0.909016, -0.179278, -0.376231 )  //57
DX3DVERT( -7.00588, 4.24239, -15.6369 ) DX3DVNORM( -0.960502, -0.0675686, -0.269946 )  //58
DX3DVERT( -6.11619, 3.6595, 16.6038 ) DX3DVNORM( -0.860545, -0.1313, 0.492161 )  //59
DX3DVERT( -6.39256, 4.57057, 16.6223 ) DX3DVNORM( -0.978167, -0.175249, 0.111704 )  //60
DX3DVERT( -6.4861, 6.21291, 16.6158 ) DX3DVNORM( -0.7716, 0.117248, 0.625209 )  //61
DX3DVERT( -6.26894, 8.68022, -15.083 ) DX3DVNORM( -0.633886, 0.376958, -0.675345 )  //62
DX3DVERT( -5.74182, 8.72143, -15.339 ) DX3DVNORM( -0.430799, 0.508105, -0.745816 )  //63
DX3DVERT( -5.81624, 4.88922, -16.8173 ) DX3DVNORM( -0.340708, 0.0376635, -0.939414 )  //64
DX3DVERT( -4.32129, 15.1003, 3.50155 ) DX3DVNORM( -0.808836, 0.588034, 0.000624538 )  //65
DX3DVERT( -4.38506, 15.043, 4.70825 ) DX3DVNORM( -0.827825, 0.560987, -0.000444079 )  //66
DX3DVERT( -4.75679, 14.5006, 4.137 ) DX3DVNORM( -0.831838, 0.554463, 0.0248353 )  //67
DX3DVERT( -4.75679, 14.4766, 5.20322 ) DX3DVNORM( -0.852271, 0.523101, 0.000710866 )  //68
DX3DVERT( -4.99807, 13.7224, -4.13574 ) DX3DVNORM( -0.906422, 0.422201, 0.0120607 )  //69
DX3DVERT( -5.07054, 13.6035, -3.61918 ) DX3DVNORM( -0.89591, 0.443898, -0.017292 )  //70
DX3DVERT( -5.30479, 13.2617, 11.3012 ) DX3DVNORM( -0.890367, 0.45258, 0.0491718 )  //71
DX3DVERT( -4.65125, 14.5679, 11.8228 ) DX3DVNORM( -0.8944, 0.44719, 0.00832597 )  //72
DX3DVERT( -6.995, 4.66434, -9.1048 ) DX3DVNORM( -0.999046, -0.0436282, 0.00189835 )  //73
DX3DVERT( -7.03226, 5.72437, -9.41341 ) DX3DVNORM( -0.999409, -0.0343124, 0.00232065 )  //74
DX3DVERT( -7.03124, 5.96612, 2.57418 ) DX3DVNORM( -0.999341, -0.036075, -0.00397736 )  //75
DX3DVERT( -6.91222, 4.791, 2.56433 ) DX3DVNORM( -0.995098, -0.0987063, -0.00605537 )  //76
DX3DVERT( -6.48849, 3.19556, 16.1895 ) DX3DVNORM( -0.693298, -0.0828318, 0.715875 )  //77
DX3DVERT( -6.9507, 5.27935, 15.983 ) DX3DVNORM( -0.795323, -0.00877084, 0.606123 )  //78
DX3DVERT( -6.96398, 6.96348, -13.9006 ) DX3DVNORM( -0.944658, 0.327834, 0.0120705 )  //79
DX3DVERT( -6.98288, 6.19521, -14.8777 ) DX3DVNORM( -0.992253, 0.10629, -0.0643124 )  //80
DX3DVERT( -7.0377, 6.0611, 10.9679 ) DX3DVNORM( -0.997006, 0.0771991, -0.0043407 )  //81
DX3DVERT( -6.1769, 9.86179, 13.2675 ) DX3DVNORM( -0.959031, 0.279546, -0.0459695 )  //82
DX3DVERT( -4.57612, 14.6601, 9.96332 ) DX3DVNORM( -0.791016, 0.602659, 0.105339 )  //83
DX3DVERT( -4.95835, 14.2459, 9.95837 ) DX3DVNORM( -0.830101, 0.553889, 0.0643311 )  //84
DX3DVERT( -4.45787, 14.9242, 7.0707 ) DX3DVNORM( -0.798161, 0.602377, 0.00900743 )  //85
DX3DVERT( -4.72561, 14.3795, -1.92301 ) DX3DVNORM( -0.890196, 0.455314, -0.0155117 )  //86
DX3DVERT( -4.38367, 15.0766, 1.69344 ) DX3DVNORM( -0.830089, 0.557618, -0.00386528 )  //87
DX3DVERT( -4.75679, 14.6343, 2.93016 ) DX3DVNORM( -0.839172, 0.54369, 0.0138297 )  //88
DX3DVERT( -4.31956, 15.1171, 2.99501 ) DX3DVNORM( -0.763159, 0.645236, 0.0354758 )  //89
DX3DVERT( -5.42864, 13.1938, 4.19159 ) DX3DVNORM( -0.917661, 0.39735, 0.00337504 )  //90
DX3DVERT( -5.42864, 13.2151, 2.78333 ) DX3DVNORM( -0.920267, 0.391143, -0.01074 )  //91
DX3DVERT( -4.50683, 14.8748, -1.92042 ) DX3DVNORM( -0.910152, 0.414237, -0.00551609 )  //92
DX3DVERT( -5.73263, 10.575, -10.5649 ) DX3DVNORM( -0.757654, 0.643306, -0.110075 )  //93
DX3DVERT( -6.62813, 8.84764, 2.59835 ) DX3DVNORM( -0.995173, 0.0981097, -0.00207764 )  //94
DX3DVERT( -7.03124, 6.96141, 2.58253 ) DX3DVNORM( -0.995569, 0.09386, 0.00569523 )  //95
DX3DVERT( -6.65927, 2.68697, -9.01331 ) DX3DVNORM( -0.957112, -0.289647, -0.00641919 )  //96
DX3DVERT( -6.8808, 3.57674, -9.01867 ) DX3DVNORM( -0.987854, -0.155344, -0.0036518 )  //97
DX3DVERT( -7.03608, 5.14044, 10.4031 ) DX3DVNORM( -0.999991, -0.00409155, -0.00110146 )  //98
DX3DVERT( -6.10314, 11.1959, 2.64114 ) DX3DVNORM( -0.95519, 0.295851, -0.00916885 )  //99
DX3DVERT( -7.03124, 6.60482, -10.1204 ) DX3DVNORM( -0.993436, 0.113487, -0.014336 )  //100
DX3DVERT( -6.9191, 7.0469, -10.9858 ) DX3DVNORM( -0.987893, 0.154061, -0.0182685 )  //101
DX3DVERT( -7.02576, 4.25643, 10.1061 ) DX3DVNORM( -0.987287, -0.157515, -0.0212908 )  //102
DX3DVERT( -6.86365, 6.67622, -15.9232 ) DX3DVNORM( -0.917696, 0.0784574, -0.389458 )  //103
DX3DVERT( -6.51048, 6.66339, -16.2408 ) DX3DVNORM( -0.528273, 0.149719, -0.83577 )  //104
DX3DVERT( -5.73379, 7.60088, -15.9673 ) DX3DVNORM( -0.445939, 0.51329, -0.733261 )  //105
DX3DVERT( -5.76299, 7.26077, -16.182 ) DX3DVNORM( -0.341525, 0.505321, -0.792471 )  //106
DX3DVERT( -5.73768, 6.63669, -16.5704 ) DX3DVNORM( -0.327693, 0.489553, -0.808057 )  //107
DX3DVERT( -6.98288, 6.19521, -14.8777 ) DX3DVNORM( -0.994668, 0.0393335, -0.0953366 )  //108
DX3DVERT( -6.96771, 5.20149, -15.4461 ) DX3DVNORM( -0.995997, 0.0453521, -0.0770279 )  //109
DX3DVERT( -5.73768, 6.63669, -16.5704 ) DX3DVNORM( -0.364559, 0.154275, -0.918312 )  //110
DX3DVERT( -5.98553, 7.57004, -15.7938 ) DX3DVNORM( -0.588225, 0.471864, -0.656762 )  //111
DX3DVERT( 0, 2.87959, -16.4276 ) DX3DVNORM( 0.00441769, -0.93151, -0.363688 )  //112
DX3DVERT( 0, 3.23582, -17.19 ) DX3DVNORM( 0.00523202, -0.901875, -0.431965 )  //113
DX3DVERT( -1.53157, 3.23582, -17.1899 ) DX3DVNORM( 0.00274795, -0.886374, -0.462962 )  //114
DX3DVERT( -1.52188, 2.87959, -16.4646 ) DX3DVNORM( -0.0253106, -0.949557, -0.312572 )  //115
DX3DVERT( 0, 8.46922, 16.4663 ) DX3DVNORM( -5.54238e-007, 0.591219, 0.806511 )  //116
DX3DVERT( 0, 8.00111, 16.8095 ) DX3DVNORM( -5.54238e-007, 0.591219, 0.806511 )  //117
DX3DVERT( -1.57624, 8.00111, 16.8095 ) DX3DVNORM( -0.039254, 0.571041, 0.819982 )  //118
DX3DVERT( -1.58803, 8.46922, 16.4663 ) DX3DVNORM( -0.039254, 0.571041, 0.819982 )  //119
DX3DVERT( 0, 14.373, 13.883 ) DX3DVNORM( 0, 0.552557, 0.833475 )  //120
DX3DVERT( 0, 13.7145, 14.3196 ) DX3DVNORM( 0.000587943, 0.486467, 0.873699 )  //121
DX3DVERT( -1.65623, 13.7145, 14.3196 ) DX3DVNORM( -0.0456145, 0.48821, 0.871533 )  //122
DX3DVERT( -1.68014, 14.373, 13.883 ) DX3DVNORM( -0.0495855, 0.551619, 0.832621 )  //123
DX3DVERT( 0, 14.6048, 13.5357 ) DX3DVNORM( 0.0275151, 0.896251, 0.442694 )  //124
DX3DVERT( 0, 14.373, 13.883 ) DX3DVNORM( 0, 0.831815, 0.555053 )  //125
DX3DVERT( -1.68014, 14.373, 13.883 ) DX3DVNORM( -0.0196515, 0.79122, 0.611216 )  //126
DX3DVERT( -1.68919, 14.6048, 13.5357 ) DX3DVNORM( 0.00227208, 0.864495, 0.502637 )  //127
DX3DVERT( 0, 9.63579, -14.9775 ) DX3DVNORM( -0.00093677, 0.786008, -0.618215 )  //128
DX3DVERT( 0, 10.0922, -14.1038 ) DX3DVNORM( 0.0146124, 0.924235, -0.381544 )  //129
DX3DVERT( -1.68797, 10.1232, -14.1136 ) DX3DVNORM( 0.0157041, 0.921623, -0.387768 )  //130
DX3DVERT( -1.67827, 9.63579, -14.9775 ) DX3DVNORM( -0.00358323, 0.778344, -0.627828 )  //131
DX3DVERT( 0, 10.8031, -11.6793 ) DX3DVNORM( 0.0206737, 0.956767, -0.290119 )  //132
DX3DVERT( -1.70763, 10.8349, -11.692 ) DX3DVNORM( 0.0153634, 0.957717, -0.2873 )  //133
DX3DVERT( 0, 4.57057, 16.9654 ) DX3DVNORM( 6.81273e-007, -0.215292, 0.97655 )  //134
DX3DVERT( 0, 3.65951, 16.7645 ) DX3DVNORM( 6.81273e-007, -0.215292, 0.97655 )  //135
DX3DVERT( -1.48967, 3.6595, 16.7645 ) DX3DVNORM( -0.022488, -0.215487, 0.976248 )  //136
DX3DVERT( -1.51125, 4.57057, 16.9654 ) DX3DVNORM( -0.022488, -0.215487, 0.976248 )  //137
DX3DVERT( 0, 8.00111, 16.8095 ) DX3DVNORM( 2.75189e-007, 0.083251, 0.996529 )  //138
DX3DVERT( 0, 6.21291, 16.9589 ) DX3DVNORM( 2.75189e-007, 0.083251, 0.996529 )  //139
DX3DVERT( -1.5504, 6.21291, 16.9589 ) DX3DVNORM( -0.0405097, 0.0965825, 0.9945 )  //140
DX3DVERT( -1.57624, 8.00111, 16.8095 ) DX3DVNORM( -0.0405097, 0.0965825, 0.9945 )  //141
DX3DVERT( 0, 6.21223, 16.7872 ) DX3DVNORM( 6.12159e-005, 0.00396093, 0.999992 )  //142
DX3DVERT( 0, 4.56989, 16.7937 ) DX3DVNORM( 6.12159e-005, 0.00396093, 0.999992 )  //143
DX3DVERT( -1.50724, 4.56996, 16.7937 ) DX3DVNORM( -0.0233581, 0.00354437, 0.999721 )  //144
DX3DVERT( -1.54639, 6.21231, 16.7872 ) DX3DVNORM( -0.0233581, 0.00354437, 0.999721 )  //145
DX3DVERT( 0, 8.00616, -16.4774 ) DX3DVNORM( -0.0113183, 0.670844, -0.741512 )  //146
DX3DVERT( -1.65025, 8.00863, -16.4244 ) DX3DVNORM( -0.0180587, 0.66317, -0.748251 )  //147
DX3DVERT( 0, 15.5905, 3.50155 ) DX3DVNORM( 0.00700667, 0.998691, 0.05066 )  //148
DX3DVERT( 0, 15.4824, 4.70824 ) DX3DVNORM( 0.0136322, 0.998151, 0.0592421 )  //149
DX3DVERT( -1.80455, 15.5332, 4.70825 ) DX3DVNORM( -0.0490353, 0.997249, 0.0555802 )  //150
DX3DVERT( -1.81047, 15.5905, 3.50155 ) DX3DVNORM( -0.0563669, 0.997397, 0.044964 )  //151
DX3DVERT( 0, 15.1016, 11.9216 ) DX3DVNORM( 0.0166354, 0.987419, 0.157247 )  //152
DX3DVERT( 0, 14.8948, 12.4005 ) DX3DVNORM( 0.0488668, 0.95544, 0.291111 )  //153
DX3DVERT( -1.70221, 14.8948, 12.974 ) DX3DVNORM( 0.0109102, 0.956107, 0.292816 )  //154
DX3DVERT( -1.74603, 15.1016, 11.9216 ) DX3DVNORM( -0.0207304, 0.991503, 0.128422 )  //155
DX3DVERT( 0, 3.65951, 16.7645 ) DX3DVNORM( 3.31925e-007, -0.77825, 0.627954 )  //156
DX3DVERT( 0, 3.19556, 16.1895 ) DX3DVNORM( 3.31925e-007, -0.77825, 0.627954 )  //157
DX3DVERT( -1.48339, 3.19556, 16.1895 ) DX3DVNORM( -0.0074266, -0.850427, 0.52604 )  //158
DX3DVERT( -1.48967, 3.6595, 16.7645 ) DX3DVNORM( -0.0143586, -0.778246, 0.627795 )  //159
DX3DVERT( 0, 15.3906, 7.07069 ) DX3DVNORM( 0.00124207, 0.998394, 0.0566386 )  //160
DX3DVERT( 0, 15.2227, 9.98385 ) DX3DVNORM( -0.0104129, 0.998249, 0.058232 )  //161
DX3DVERT( -1.75778, 15.1874, 9.98385 ) DX3DVNORM( -0.0397456, 0.997473, 0.0588812 )  //162
DX3DVERT( -1.79111, 15.3876, 7.0707 ) DX3DVNORM( -0.0436351, 0.997429, 0.0568441 )  //163
DX3DVERT( 0, 15.5668, 1.69343 ) DX3DVNORM( 3.38404e-006, 0.998183, -0.0602609 )  //164
DX3DVERT( 0, 15.6072, 2.99501 ) DX3DVNORM( 3.55383e-006, 1, 0.000968233 )  //165
DX3DVERT( -1.81147, 15.6072, 2.99501 ) DX3DVNORM( -0.0606435, 0.998158, 0.00152757 )  //166
DX3DVERT( -1.81202, 15.5668, 1.69343 ) DX3DVNORM( -0.0586235, 0.996489, -0.0597787 )  //167
DX3DVERT( 0, 15.2423, -1.92042 ) DX3DVNORM( 0.000432527, 0.970329, -0.241789 )  //168
DX3DVERT( -1.80947, 15.2423, -1.92042 ) DX3DVNORM( -0.0467321, 0.971376, -0.232905 )  //169
DX3DVERT( 0, 14.9056, -2.71533 ) DX3DVNORM( 0.000872635, 0.910911, -0.412601 )  //170
DX3DVERT( -1.88331, 14.9077, -2.71857 ) DX3DVNORM( -0.0204505, 0.914552, -0.403951 )  //171
DX3DVERT( 0, 11.1517, -10.5555 ) DX3DVNORM( 0.00981837, 0.950497, -0.310579 )  //172
DX3DVERT( -1.71624, 11.1933, -10.5577 ) DX3DVNORM( -0.00604592, 0.95682, -0.290618 )  //173
DX3DVERT( 0, 11.4407, -9.84271 ) DX3DVNORM( -0.0104821, 0.923228, -0.38411 )  //174
DX3DVERT( -1.72025, 11.4407, -9.69568 ) DX3DVNORM( -0.0338921, 0.927828, -0.371466 )  //175
DX3DVERT( 0, 6.65159, -17.0114 ) DX3DVNORM( -0.00602847, 0.423724, -0.905771 )  //176
DX3DVERT( 0, 7.25808, -16.7171 ) DX3DVNORM( -0.00602847, 0.423724, -0.905771 )  //177
DX3DVERT( -1.61816, 7.25808, -16.7169 ) DX3DVNORM( -0.0429259, 0.437117, -0.89838 )  //178
DX3DVERT( -1.61009, 6.65159, -16.9901 ) DX3DVNORM( -0.0429259, 0.437117, -0.89838 )  //179
DX3DVERT( 0, 7.25808, -16.7171 ) DX3DVNORM( -9.01166e-005, 0.155198, -0.987883 )  //180
DX3DVERT( 0, 7.64479, -16.6563 ) DX3DVNORM( -9.01166e-005, 0.155198, -0.987883 )  //181
DX3DVERT( -1.62592, 7.64479, -16.6562 ) DX3DVNORM( -0.0495893, 0.132066, -0.99 )  //182
DX3DVERT( -1.61816, 7.25808, -16.7169 ) DX3DVNORM( -0.0495893, 0.132066, -0.99 )  //183
DX3DVERT( 0, 4.83635, -17.2955 ) DX3DVNORM( -0.0066463, 0.160177, -0.987066 )  //184
DX3DVERT( 0, 6.65159, -17.0114 ) DX3DVNORM( -0.0066463, 0.160177, -0.987066 )  //185
DX3DVERT( -1.61009, 6.65159, -16.9901 ) DX3DVNORM( -0.0344967, 0.16426, -0.985814 )  //186
DX3DVERT( -1.57051, 4.83635, -17.2954 ) DX3DVNORM( -0.0344967, 0.16426, -0.985814 )  //187
DX3DVERT( -5.03208, 2.90261, -16.3434 ) DX3DVNORM( 0.0395118, -0.909373, -0.414101 )  //188
DX3DVERT( -5.03717, 3.25884, -16.815 ) DX3DVNORM( -0.0712584, -0.768043, -0.636422 )  //189
DX3DVERT( -5.75464, 3.32697, -16.7201 ) DX3DVNORM( -0.0606874, -0.718379, -0.693 )  //190
DX3DVERT( -6.46395, 2.87958, -16.2969 ) DX3DVNORM( -0.0403522, -0.882535, -0.468512 )  //191
DX3DVERT( -5.54254, 8.46922, 15.9518 ) DX3DVNORM( -0.207308, 0.498816, 0.841549 )  //192
DX3DVERT( -5.14556, 8.00111, 16.295 ) DX3DVNORM( -0.207308, 0.498816, 0.841549 )  //193
DX3DVERT( -6.44033, 8.00111, 15.9722 ) DX3DVNORM( -0.260303, 0.534302, 0.804216 )  //194
DX3DVERT( -6.242, 8.46922, 15.6291 ) DX3DVNORM( -0.260303, 0.534302, 0.804216 )  //195
DX3DVERT( -4.50786, 14.269, 13.4907 ) DX3DVNORM( -0.50309, 0.616311, 0.605856 )  //196
DX3DVERT( -4.73112, 13.6922, 13.9273 ) DX3DVNORM( -0.550785, 0.547563, 0.629929 )  //197
DX3DVERT( -4.7573, 14.0876, 13.1807 ) DX3DVNORM( -0.711557, 0.61031, 0.34815 )  //198
DX3DVERT( -5.02558, 13.6658, 13.4823 ) DX3DVNORM( -0.711543, 0.549222, 0.438249 )  //199
DX3DVERT( -4.38703, 14.399, 13.3621 ) DX3DVNORM( -0.427248, 0.762922, 0.48519 )  //200
DX3DVERT( -4.50786, 14.269, 13.4907 ) DX3DVNORM( -0.464936, 0.664387, 0.585171 )  //201
DX3DVERT( -4.7573, 14.0876, 13.1807 ) DX3DVNORM( -0.697375, 0.612272, 0.372547 )  //202
DX3DVERT( -4.82181, 14.1882, 13.0357 ) DX3DVNORM( -0.615971, 0.695516, 0.369916 )  //203
DX3DVERT( -5.63174, 11.257, -8.58251 ) DX3DVNORM( -0.519827, 0.802721, -0.292263 )  //204
DX3DVERT( -5.23328, 13.1799, -5.34817 ) DX3DVNORM( -0.523242, 0.777997, -0.347762 )  //205
DX3DVERT( -5.31638, 13.1671, -5.29084 ) DX3DVNORM( -0.808581, 0.556781, -0.190242 )  //206
DX3DVERT( -5.63725, 11.9374, -7.17319 ) DX3DVNORM( -0.869263, 0.441226, -0.222939 )  //207
DX3DVERT( -5.741, 10.8518, -7.69346 ) DX3DVNORM( -0.809378, 0.54992, -0.206144 )  //208
DX3DVERT( -5.12378, 9.31168, -14.9586 ) DX3DVNORM( -0.152315, 0.753057, -0.640082 )  //209
DX3DVERT( -5.03522, 9.9061, -14.1127 ) DX3DVNORM( -0.20492, 0.892834, -0.401069 )  //210
DX3DVERT( -5.80431, 9.62364, -14.149 ) DX3DVNORM( -0.307949, 0.869944, -0.385181 )  //211
DX3DVERT( -5.76264, 9.14685, -14.9618 ) DX3DVNORM( -0.209069, 0.742664, -0.636192 )  //212
DX3DVERT( -4.93044, 10.6286, -11.6965 ) DX3DVNORM( -0.242404, 0.930241, -0.275485 )  //213
DX3DVERT( -5.76511, 10.2448, -11.7339 ) DX3DVNORM( -0.394508, 0.884167, -0.250225 )  //214
DX3DVERT( -5.11759, 4.57057, 16.7545 ) DX3DVNORM( -0.0718164, -0.0629545, 0.995429 )  //215
DX3DVERT( -5.10869, 3.6595, 16.6402 ) DX3DVNORM( -0.0597113, -0.12736, 0.990057 )  //216
DX3DVERT( -6.11619, 3.6595, 16.6038 ) DX3DVNORM( -0.0734305, -0.0839649, 0.993759 )  //217
DX3DVERT( -6.39256, 4.57057, 16.6223 ) DX3DVNORM( -0.0870645, -0.0418789, 0.995322 )  //218
DX3DVERT( -5.14556, 8.00111, 16.295 ) DX3DVNORM( -0.137447, 0.241607, 0.960591 )  //219
DX3DVERT( -5.14324, 6.21291, 16.748 ) DX3DVNORM( -0.111366, 0.122492, 0.986201 )  //220
DX3DVERT( -6.4861, 6.21291, 16.6158 ) DX3DVNORM( -0.133104, 0.147364, 0.980085 )  //221
DX3DVERT( -6.44033, 8.00111, 15.9722 ) DX3DVNORM( -0.162631, 0.291063, 0.94278 )  //222
DX3DVERT( -4.72208, 8.66714, -15.6238 ) DX3DVNORM( -0.127925, 0.663209, -0.737421 )  //223
DX3DVERT( -5.74182, 8.72143, -15.339 ) DX3DVNORM( -0.168832, 0.652793, -0.738483 )  //224
DX3DVERT( -5.03717, 3.25884, -16.815 ) DX3DVNORM( -0.14878, -0.0826152, -0.985413 )  //225
DX3DVERT( -4.9766, 4.90388, -16.9774 ) DX3DVNORM( -0.147363, 0.0366945, -0.988402 )  //226
DX3DVERT( -5.81624, 4.88922, -16.8173 ) DX3DVNORM( -0.173472, 0.0348436, -0.984222 )  //227
DX3DVERT( -5.75464, 3.32697, -16.7201 ) DX3DVNORM( -0.163759, -0.0796484, -0.98328 )  //228
DX3DVERT( -3.46745, 15.327, 3.50155 ) DX3DVNORM( -0.222569, 0.974917, -0.000406183 )  //229
DX3DVERT( -3.7231, 15.2696, 4.70825 ) DX3DVNORM( -0.238468, 0.970711, 0.0292047 )  //230
DX3DVERT( -4.38506, 15.043, 4.70825 ) DX3DVNORM( -0.30267, 0.952806, 0.0234794 )  //231
DX3DVERT( -4.32129, 15.1003, 3.50155 ) DX3DVNORM( -0.258859, 0.965909, -0.00344618 )  //232
DX3DVERT( -4.55231, 14.5827, -2.84285 ) DX3DVNORM( -0.395874, 0.872556, -0.286232 )  //233
DX3DVERT( -4.99807, 13.7224, -4.13574 ) DX3DVNORM( -0.742966, 0.650046, -0.159503 )  //234
DX3DVERT( -4.17548, 14.7772, 11.9312 ) DX3DVNORM( -0.320208, 0.944106, 0.0783004 )  //235
DX3DVERT( -4.35947, 14.5953, 12.8428 ) DX3DVNORM( -0.356441, 0.902273, 0.242598 )  //236
DX3DVERT( -4.67269, 14.447, 12.8452 ) DX3DVNORM( -0.479937, 0.846016, 0.232202 )  //237
DX3DVERT( -4.65125, 14.5679, 11.8228 ) DX3DVNORM( -0.425618, 0.902563, 0.0650323 )  //238
DX3DVERT( -5.10869, 3.6595, 16.6402 ) DX3DVNORM( -0.0132601, -0.6992, 0.714803 )  //239
DX3DVERT( -4.24627, 3.19556, 16.1895 ) DX3DVNORM( -0.00692238, -0.817145, 0.576391 )  //240
DX3DVERT( -6.48849, 3.19556, 16.1895 ) DX3DVNORM( -0.00816892, -0.684112, 0.729331 )  //241
DX3DVERT( -6.11619, 3.6595, 16.6038 ) DX3DVNORM( -0.00816892, -0.684112, 0.729331 )  //242
DX3DVERT( -3.96116, 15.0857, 7.11405 ) DX3DVNORM( -0.273576, 0.960719, 0.0466319 )  //243
DX3DVERT( -4.00472, 14.9445, 9.96405 ) DX3DVNORM( -0.308376, 0.949882, 0.0512759 )  //244
DX3DVERT( -4.57612, 14.6601, 9.96332 ) DX3DVNORM( -0.407999, 0.911927, 0.0438817 )  //245
DX3DVERT( -4.45787, 14.9242, 7.0707 ) DX3DVNORM( -0.352914, 0.934487, 0.046746 )  //246
DX3DVERT( -3.46993, 15.3032, 1.69344 ) DX3DVNORM( -0.195197, 0.979811, -0.0432287 )  //247
DX3DVERT( -3.46074, 15.2972, 2.99501 ) DX3DVNORM( -0.215096, 0.976532, -0.0109216 )  //248
DX3DVERT( -4.31956, 15.1171, 2.99501 ) DX3DVNORM( -0.227329, 0.973761, -0.0105221 )  //249
DX3DVERT( -4.38367, 15.0766, 1.69344 ) DX3DVNORM( -0.195356, 0.980008, -0.037692 )  //250
DX3DVERT( -3.47083, 14.9787, -1.92042 ) DX3DVNORM( -0.148241, 0.971466, -0.185143 )  //251
DX3DVERT( -4.50683, 14.8748, -1.92042 ) DX3DVNORM( -0.360419, 0.913595, -0.188263 )  //252
DX3DVERT( -6.03974, 9.79518, 15.14 ) DX3DVNORM( -0.646828, 0.385477, 0.658044 )  //253
DX3DVERT( -5.18649, 11.1464, 15.0962 ) DX3DVNORM( -0.395394, 0.442533, 0.804878 )  //254
DX3DVERT( -5.42152, 9.83236, 15.6995 ) DX3DVNORM( -0.382655, 0.34797, 0.855858 )  //255
DX3DVERT( -4.84075, 11.055, -10.548 ) DX3DVNORM( -0.351297, 0.90214, -0.250466 )  //256
DX3DVERT( -5.73263, 10.575, -10.5649 ) DX3DVNORM( -0.59228, 0.772916, -0.227607 )  //257
DX3DVERT( -4.92707, 6.65159, -16.7129 ) DX3DVNORM( -0.125546, 0.509305, -0.851379 )  //258
DX3DVERT( -4.94087, 7.2462, -16.3488 ) DX3DVNORM( -0.125546, 0.509305, -0.851379 )  //259
DX3DVERT( -5.76299, 7.26077, -16.182 ) DX3DVNORM( -0.15964, 0.514906, -0.842251 )  //260
DX3DVERT( -5.73768, 6.63669, -16.5704 ) DX3DVNORM( -0.15964, 0.514906, -0.842251 )  //261
DX3DVERT( -4.94087, 7.2462, -16.3488 ) DX3DVNORM( -0.181044, 0.332673, -0.925501 )  //262
DX3DVERT( -4.96185, 7.57884, -16.2051 ) DX3DVNORM( -0.181044, 0.332673, -0.925501 )  //263
DX3DVERT( -5.73379, 7.60088, -15.9673 ) DX3DVNORM( -0.208217, 0.461931, -0.862128 )  //264
DX3DVERT( -5.76299, 7.26077, -16.182 ) DX3DVNORM( -0.208217, 0.461931, -0.862128 )  //265
DX3DVERT( -4.92707, 6.65159, -16.7129 ) DX3DVNORM( -0.143844, 0.155553, -0.977298 )  //266
DX3DVERT( -5.73768, 6.63669, -16.5704 ) DX3DVNORM( -0.180895, 0.148876, -0.972169 )  //267
DX3DVERT( -3.05293, 3.23582, -17.0934 ) DX3DVNORM( -0.0406636, -0.843299, -0.535904 )  //268
DX3DVERT( -3.03456, 2.87958, -16.5627 ) DX3DVNORM( 0.0314165, -0.950929, -0.307811 )  //269
DX3DVERT( -3.01659, 8.00111, 16.641 ) DX3DVNORM( -0.116025, 0.506097, 0.854636 )  //270
DX3DVERT( -3.72156, 8.46922, 16.2978 ) DX3DVNORM( -0.116025, 0.506097, 0.854636 )  //271
DX3DVERT( -3.06045, 13.7192, 14.1511 ) DX3DVNORM( -0.114282, 0.502055, 0.857252 )  //272
DX3DVERT( -3.07263, 14.373, 13.7145 ) DX3DVNORM( -0.119372, 0.569386, 0.813357 )  //273
DX3DVERT( -3.07263, 14.373, 13.7145 ) DX3DVNORM( -0.11266, 0.700831, 0.704375 )  //274
DX3DVERT( -3.15161, 14.6048, 13.5357 ) DX3DVNORM( -0.117281, 0.812877, 0.570506 )  //275
DX3DVERT( -2.6797, 10.1476, -14.1215 ) DX3DVNORM( -0.0414929, 0.913873, -0.403875 )  //276
DX3DVERT( -2.69045, 9.63579, -14.9775 ) DX3DVNORM( -0.0508645, 0.766496, -0.640231 )  //277
DX3DVERT( -2.6461, 10.8473, -11.7014 ) DX3DVNORM( -0.0370639, 0.956502, -0.289362 )  //278
DX3DVERT( -2.99856, 3.6595, 16.6955 ) DX3DVNORM( -0.0454284, -0.193082, 0.98013 )  //279
DX3DVERT( -2.99814, 4.57057, 16.8963 ) DX3DVNORM( -0.0527335, -0.128257, 0.990338 )  //280
DX3DVERT( -3.01716, 6.21291, 16.8898 ) DX3DVNORM( -0.0867409, 0.101695, 0.991027 )  //281
DX3DVERT( -3.01659, 8.00111, 16.641 ) DX3DVNORM( -0.0964654, 0.150682, 0.983864 )  //282
DX3DVERT( -2.99012, 4.57003, 16.7248 ) DX3DVNORM( -0.0467645, 0.00312587, 0.998901 )  //283
DX3DVERT( -3.00914, 6.21238, 16.7183 ) DX3DVNORM( -0.0467645, 0.00312587, 0.998901 )  //284
DX3DVERT( -3.61496, 8.05554, -16.2859 ) DX3DVNORM( -0.0558244, 0.664295, -0.745382 )  //285
DX3DVERT( -2.81184, 15.419, 4.70825 ) DX3DVNORM( -0.14243, 0.988858, 0.0432719 )  //286
DX3DVERT( -2.45249, 15.5108, 3.50155 ) DX3DVNORM( -0.152846, 0.988029, 0.0208775 )  //287
DX3DVERT( -3.17686, 14.8948, 12.932 ) DX3DVNORM( -0.127886, 0.953561, 0.272702 )  //288
DX3DVERT( -3.15813, 14.9672, 11.9216 ) DX3DVNORM( -0.134685, 0.986296, 0.0952859 )  //289
DX3DVERT( -2.99856, 3.6595, 16.6955 ) DX3DVNORM( -0.0157003, -0.743678, 0.668354 )  //290
DX3DVERT( -3.21562, 15.1268, 9.98385 ) DX3DVNORM( -0.137466, 0.988752, 0.0589211 )  //291
DX3DVERT( -3.132, 15.2502, 7.0707 ) DX3DVNORM( -0.140596, 0.98872, 0.0516357 )  //292
DX3DVERT( -2.46145, 15.5275, 2.99501 ) DX3DVNORM( -0.162102, 0.986763, -0.00462482 )  //293
DX3DVERT( -2.48373, 15.4871, 1.69343 ) DX3DVNORM( -0.156158, 0.986256, -0.0539708 )  //294
DX3DVERT( -2.51693, 15.1626, -1.92042 ) DX3DVNORM( -0.129232, 0.97018, -0.20506 )  //295
DX3DVERT( -2.5206, 14.8714, -2.75325 ) DX3DVNORM( -0.0894177, 0.920662, -0.379981 )  //296
DX3DVERT( -2.61223, 11.1762, -10.5593 ) DX3DVNORM( -0.055311, 0.9633, -0.262667 )  //297
DX3DVERT( -3.68273, 11.4407, -9.27069 ) DX3DVNORM( -0.102888, 0.9325, -0.346204 )  //298
DX3DVERT( -3.22939, 7.25808, -16.5382 ) DX3DVNORM( -0.085565, 0.476664, -0.874912 )  //299
DX3DVERT( -3.19905, 6.65159, -16.8819 ) DX3DVNORM( -0.085565, 0.476664, -0.874912 )  //300
DX3DVERT( -3.58793, 7.64479, -16.4775 ) DX3DVNORM( -0.12463, 0.152612, -0.980396 )  //301
DX3DVERT( -3.22939, 7.25808, -16.5382 ) DX3DVNORM( -0.12463, 0.152612, -0.980396 )  //302
DX3DVERT( -3.19905, 6.65159, -16.8819 ) DX3DVNORM( -0.0844732, 0.165151, -0.982644 )  //303
DX3DVERT( -3.21224, 4.83635, -17.199 ) DX3DVNORM( -0.101647, 0.0821644, -0.991422 )  //304
DX3DVERT( -3.05293, 3.23582, -17.0934 ) DX3DVNORM( -0.133766, -0.0855623, -0.987312 )  //305
DX3DVERT( -5.7568, 12.085, -6.7596 ) DX3DVNORM( -0.737373, 0.630195, -0.243177 )  //306
DX3DVERT( -5.63725, 11.9374, -7.17319 ) DX3DVNORM( -0.737373, 0.630195, -0.243177 )  //307
DX3DVERT( -5.741, 10.8518, -7.69346 ) DX3DVNORM( -0.184043, 0.414208, -0.891381 )  //308
DX3DVERT( -5.63725, 11.9374, -7.17319 ) DX3DVNORM( -0.145378, 0.71895, -0.679688 )  //309
DX3DVERT( -6.33808, 11.8997, -7.08325 ) DX3DVNORM( -0.203377, 0.65563, -0.727178 )  //310
DX3DVERT( -6.34336, 10.9514, -7.48559 ) DX3DVNORM( -0.232669, 0.347815, -0.908234 )  //311
DX3DVERT( -5.7568, 12.085, -6.7596 ) DX3DVNORM( -0.0741581, 0.974243, -0.21296 )  //312
DX3DVERT( -6.448, 12.0628, -6.67524 ) DX3DVNORM( -0.135866, 0.957538, -0.254285 )  //313
DX3DVERT( -5.81141, 12.125, -6.15896 ) DX3DVNORM( -0.237528, 0.00851306, 0.971343 )  //314
DX3DVERT( -6.10314, 10.756, -6.11994 ) DX3DVNORM( -0.237528, 0.00851306, 0.971343 )  //315
DX3DVERT( -6.56343, 10.8782, -6.33192 ) DX3DVNORM( -0.180554, -0.0343769, 0.982964 )  //316
DX3DVERT( -6.54188, 12.0622, -6.23868 ) DX3DVNORM( -0.180554, -0.0343769, 0.982964 )  //317
DX3DVERT( -6.10314, 10.756, -6.11994 ) DX3DVNORM( -0.202804, -0.973718, -0.103655 )  //318
DX3DVERT( -5.741, 10.8518, -7.69346 ) DX3DVNORM( -0.202804, -0.973718, -0.103655 )  //319
DX3DVERT( -6.34336, 10.9514, -7.48559 ) DX3DVNORM( -0.119827, -0.990524, -0.0671058 )  //320
DX3DVERT( -6.56343, 10.8782, -6.33192 ) DX3DVNORM( -0.119827, -0.990524, -0.0671058 )  //321
DX3DVERT( -7.2307, 11.6591, -7.00056 ) DX3DVNORM( -0.258803, 0.58681, -0.767251 )  //322
DX3DVERT( -7.21802, 10.9251, -7.11136 ) DX3DVNORM( -0.279652, 0.278968, -0.918679 )  //323
DX3DVERT( -7.26839, 11.9113, -6.69765 ) DX3DVNORM( -0.197933, 0.93481, -0.294877 )  //324
DX3DVERT( -7.31188, 10.9542, -6.42044 ) DX3DVNORM( -0.122638, -0.0770874, 0.989453 )  //325
DX3DVERT( -7.2708, 11.9315, -6.33754 ) DX3DVNORM( -0.122638, -0.0770874, 0.989453 )  //326
DX3DVERT( -7.21802, 10.9251, -7.11136 ) DX3DVNORM( -0.035832, -0.998908, -0.0299857 )  //327
DX3DVERT( -7.31188, 10.9542, -6.42044 ) DX3DVNORM( -0.035832, -0.998908, -0.0299857 )  //328
DX3DVERT( -1.6145, 9.71103, 16.1621 ) DX3DVNORM( -0.0321245, 0.329294, 0.943681 )  //329
DX3DVERT( 0, 9.69071, 16.1649 ) DX3DVNORM( 0.00183439, 0.329606, 0.944117 )  //330
DX3DVERT( 0, 8.46922, 16.4663 ) DX3DVNORM( 0.000650873, 0.238775, 0.971075 )  //331
DX3DVERT( -1.58803, 8.46922, 16.4663 ) DX3DVNORM( -0.0357881, 0.233852, 0.971613 )  //332
DX3DVERT( -3.69095, 9.81167, 15.9939 ) DX3DVNORM( -0.112437, 0.327136, 0.938264 )  //333
DX3DVERT( -3.72156, 8.46922, 16.2978 ) DX3DVNORM( -0.122455, 0.218408, 0.968144 )  //334
DX3DVERT( -5.81141, 12.125, -6.15896 ) DX3DVNORM( -0.0597271, 0.997133, -0.0464611 )  //335
DX3DVERT( -6.54188, 12.0622, -6.23868 ) DX3DVNORM( -0.117863, 0.991964, -0.045992 )  //336
DX3DVERT( -7.2708, 11.9315, -6.33754 ) DX3DVNORM( -0.175597, 0.983416, -0.0453662 )  //337
DX3DVERT( -1.62906, 11.1081, 15.5191 ) DX3DVNORM( -0.034767, 0.421794, 0.906025 )  //338
DX3DVERT( 0, 11.0719, 15.5315 ) DX3DVNORM( 0.00208691, 0.417472, 0.908687 )  //339
DX3DVERT( -3.47739, 11.1352, 15.3697 ) DX3DVNORM( -0.10472, 0.431559, 0.895986 )  //340
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BODYR1___carbodycolor_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BODYR1___carbodycolor_0 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 341 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BODYR1___carbodycolor_0	NULL
#define vertexbuff_KEIA_BODYR1___carbodycolor_0	NULL
#endif




#if ((PT_KEIA_BODYR1___carbodycolor_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR1___carbodycolor_0 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BODYR1___carbodycolor_0 )
	0, 1, 2, // 0 2
	3, 4, 5, // 1 5
	5, 6, 7, // 2 8
	8, 9, 10, // 3 11
	9, 11, 10, // 4 14
	12, 13, 14, // 5 17
	0, 15, 16, // 6 20
	13, 15, 14, // 7 23
	16, 15, 17, // 8 26
	18, 19, 20, // 9 29
	21, 22, 23, // 10 32
	23, 22, 24, // 11 35
	22, 25, 24, // 12 38
	26, 27, 28, // 13 41
	27, 29, 28, // 14 44
	30, 31, 29, // 15 47
	28, 29, 31, // 16 50
	12, 32, 33, // 17 53
	34, 35, 36, // 18 56
	37, 36, 35, // 19 59
	38, 39, 40, // 20 62
	39, 41, 40, // 21 65
	41, 42, 40, // 22 68
	43, 44, 45, // 23 71
	45, 44, 46, // 24 74
	2, 47, 0, // 25 77
	47, 48, 0, // 26 80
	48, 15, 0, // 27 83
	49, 50, 51, // 28 86
	50, 52, 51, // 29 89
	53, 54, 55, // 30 92
	54, 56, 55, // 31 95
	57, 9, 58, // 32 98
	9, 8, 58, // 33 101
	59, 50, 60, // 34 104
	49, 61, 50, // 35 107
	50, 61, 60, // 36 110
	3, 62, 4, // 37 113
	4, 62, 1, // 38 116
	1, 62, 2, // 39 119
	2, 62, 63, // 40 122
	11, 64, 10, // 41 125
	65, 66, 67, // 42 128
	66, 68, 67, // 43 131
	43, 69, 44, // 44 134
	69, 70, 44, // 45 137
	71, 72, 28, // 46 140
	72, 26, 28, // 47 143
	73, 74, 76, // 48 146
	74, 75, 76, // 49 149
	77, 78, 59, // 50 152
	78, 50, 59, // 51 155
	4, 79, 5, // 52 158
	5, 79, 80, // 53 161
	5, 80, 6, // 54 164
	27, 81, 29, // 55 167
	25, 27, 24, // 56 170
	82, 24, 27, // 57 173
	13, 12, 33, // 58 176
	83, 84, 85, // 59 179
	66, 85, 68, // 60 182
	68, 85, 84, // 61 185
	86, 87, 88, // 62 188
	87, 89, 88, // 63 191
	67, 90, 88, // 64 194
	90, 91, 88, // 65 197
	84, 83, 71, // 66 200
	83, 72, 71, // 67 203
	87, 86, 92, // 68 206
	69, 92, 70, // 69 209
	70, 92, 86, // 70 212
	34, 36, 23, // 71 215
	48, 93, 15, // 72 218
	93, 14, 15, // 73 221
	93, 12, 14, // 74 224
	79, 4, 16, // 75 227
	16, 4, 0, // 76 230
	94, 32, 29, // 77 233
	94, 81, 95, // 78 236
	54, 96, 56, // 79 239
	96, 97, 56, // 80 242
	75, 95, 98, // 81 245
	95, 81, 98, // 82 248
	99, 91, 30, // 83 251
	91, 90, 30, // 84 254
	30, 90, 31, // 85 257
	88, 89, 67, // 86 260
	89, 65, 67, // 87 263
	24, 82, 23, // 88 266
	23, 82, 34, // 89 269
	81, 27, 25, // 90 272
	81, 94, 29, // 91 275
	95, 100, 32, // 92 278
	100, 33, 32, // 93 281
	32, 94, 95, // 94 284
	27, 26, 82, // 95 287
	33, 100, 13, // 96 290
	100, 101, 13, // 97 293
	12, 46, 32, // 98 296
	46, 99, 32, // 99 299
	30, 29, 99, // 100 302
	32, 99, 29, // 101 305
	34, 26, 35, // 102 308
	82, 26, 34, // 103 311
	74, 100, 75, // 104 314
	100, 95, 75, // 105 317
	98, 102, 75, // 106 320
	102, 76, 75, // 107 323
	56, 76, 55, // 108 326
	76, 102, 55, // 109 329
	97, 73, 56, // 110 332
	73, 76, 56, // 111 335
	50, 78, 52, // 112 338
	17, 15, 101, // 113 341
	15, 13, 101, // 114 344
	103, 10, 104, // 115 347
	105, 7, 106, // 116 350
	7, 107, 106, // 117 353
	108, 109, 103, // 118 356
	10, 103, 8, // 119 359
	8, 103, 58, // 120 362
	58, 103, 109, // 121 365
	64, 110, 10, // 122 368
	110, 104, 10, // 123 371
	3, 5, 7, // 124 374
	105, 111, 7, // 125 377
	7, 111, 3, // 126 380
	112, 113, 115, // 127 383
	113, 114, 115, // 128 386
	116, 117, 119, // 129 389
	117, 118, 119, // 130 392
	120, 121, 123, // 131 395
	121, 122, 123, // 132 398
	124, 125, 127, // 133 401
	125, 126, 127, // 134 404
	128, 129, 131, // 135 407
	129, 130, 131, // 136 410
	129, 132, 130, // 137 413
	132, 133, 130, // 138 416
	134, 135, 137, // 139 419
	135, 136, 137, // 140 422
	138, 139, 141, // 141 425
	139, 140, 141, // 142 428
	142, 143, 145, // 143 431
	143, 144, 145, // 144 434
	146, 128, 147, // 145 437
	128, 131, 147, // 146 440
	148, 149, 151, // 147 443
	149, 150, 151, // 148 446
	152, 153, 155, // 149 449
	153, 154, 155, // 150 452
	156, 157, 159, // 151 455
	157, 158, 159, // 152 458
	160, 161, 163, // 153 461
	161, 162, 163, // 154 464
	149, 160, 150, // 155 467
	160, 163, 150, // 156 470
	164, 165, 167, // 157 473
	165, 166, 167, // 158 476
	161, 152, 162, // 159 479
	152, 155, 162, // 160 482
	168, 164, 169, // 161 485
	164, 167, 169, // 162 488
	170, 168, 171, // 163 491
	168, 169, 171, // 164 494
	132, 172, 133, // 165 497
	172, 173, 133, // 166 500
	172, 174, 173, // 167 503
	174, 175, 173, // 168 506
	165, 148, 166, // 169 509
	148, 151, 166, // 170 512
	153, 124, 154, // 171 515
	124, 127, 154, // 172 518
	176, 177, 179, // 173 521
	177, 178, 179, // 174 524
	180, 181, 183, // 175 527
	181, 182, 183, // 176 530
	184, 185, 187, // 177 533
	185, 186, 187, // 178 536
	188, 189, 191, // 179 539
	189, 190, 191, // 180 542
	192, 193, 195, // 181 545
	193, 194, 195, // 182 548
	196, 197, 198, // 183 551
	198, 197, 199, // 184 554
	200, 201, 203, // 185 557
	201, 202, 203, // 186 560
	204, 205, 208, // 187 563
	205, 206, 207, // 188 566
	205, 207, 208, // 189 569
	209, 210, 212, // 190 572
	210, 211, 212, // 191 575
	210, 213, 211, // 192 578
	213, 214, 211, // 193 581
	215, 216, 218, // 194 584
	216, 217, 218, // 195 587
	219, 220, 222, // 196 590
	220, 221, 222, // 197 593
	220, 215, 221, // 198 596
	215, 218, 221, // 199 599
	223, 209, 224, // 200 602
	209, 212, 224, // 201 605
	225, 226, 228, // 202 608
	226, 227, 228, // 203 611
	229, 230, 232, // 204 614
	230, 231, 232, // 205 617
	205, 233, 206, // 206 620
	233, 234, 206, // 207 623
	235, 236, 238, // 208 626
	236, 237, 238, // 209 629
	239, 240, 242, // 210 632
	240, 241, 242, // 211 635
	243, 244, 246, // 212 638
	244, 245, 246, // 213 641
	230, 243, 231, // 214 644
	243, 246, 231, // 215 647
	247, 248, 250, // 216 650
	248, 249, 250, // 217 653
	244, 235, 245, // 218 656
	235, 238, 245, // 219 659
	251, 247, 252, // 220 662
	247, 250, 252, // 221 665
	251, 252, 233, // 222 668
	233, 252, 234, // 223 671
	199, 197, 253, // 224 674
	197, 254, 253, // 225 677
	254, 255, 253, // 226 680
	213, 256, 214, // 227 683
	256, 257, 214, // 228 686
	256, 204, 257, // 229 689
	204, 208, 257, // 230 692
	248, 229, 249, // 231 695
	229, 232, 249, // 232 698
	236, 200, 237, // 233 701
	200, 203, 237, // 234 704
	258, 259, 261, // 235 707
	259, 260, 261, // 236 710
	262, 263, 265, // 237 713
	263, 264, 265, // 238 716
	226, 266, 227, // 239 719
	266, 267, 227, // 240 722
	115, 114, 269, // 241 725
	114, 268, 269, // 242 728
	119, 118, 271, // 243 731
	118, 270, 271, // 244 734
	123, 122, 273, // 245 737
	122, 272, 273, // 246 740
	127, 126, 275, // 247 743
	126, 274, 275, // 248 746
	131, 130, 277, // 249 749
	130, 276, 277, // 250 752
	130, 133, 276, // 251 755
	133, 278, 276, // 252 758
	137, 136, 280, // 253 761
	136, 279, 280, // 254 764
	141, 140, 282, // 255 767
	140, 281, 282, // 256 770
	145, 144, 284, // 257 773
	144, 283, 284, // 258 776
	147, 131, 285, // 259 779
	131, 277, 285, // 260 782
	151, 150, 287, // 261 785
	150, 286, 287, // 262 788
	155, 154, 289, // 263 791
	154, 288, 289, // 264 794
	159, 158, 290, // 265 797
	240, 290, 158, // 266 800
	163, 162, 292, // 267 803
	162, 291, 292, // 268 806
	150, 163, 286, // 269 809
	163, 292, 286, // 270 812
	167, 166, 294, // 271 815
	166, 293, 294, // 272 818
	162, 155, 291, // 273 821
	155, 289, 291, // 274 824
	169, 167, 295, // 275 827
	167, 294, 295, // 276 830
	171, 169, 296, // 277 833
	169, 295, 296, // 278 836
	133, 173, 278, // 279 839
	173, 297, 278, // 280 842
	173, 175, 297, // 281 845
	175, 298, 297, // 282 848
	166, 151, 293, // 283 851
	151, 287, 293, // 284 854
	154, 127, 288, // 285 857
	127, 275, 288, // 286 860
	179, 178, 300, // 287 863
	178, 299, 300, // 288 866
	183, 182, 302, // 289 869
	182, 301, 302, // 290 872
	187, 186, 304, // 291 875
	186, 303, 304, // 292 878
	269, 268, 188, // 293 881
	268, 189, 188, // 294 884
	271, 270, 192, // 295 887
	270, 193, 192, // 296 890
	273, 272, 196, // 297 893
	272, 197, 196, // 298 896
	275, 274, 200, // 299 899
	274, 201, 200, // 300 902
	277, 276, 209, // 301 905
	276, 210, 209, // 302 908
	276, 278, 210, // 303 911
	278, 213, 210, // 304 914
	280, 279, 215, // 305 917
	279, 216, 215, // 306 920
	282, 281, 219, // 307 923
	281, 220, 219, // 308 926
	281, 280, 220, // 309 929
	280, 215, 220, // 310 932
	285, 277, 223, // 311 935
	277, 209, 223, // 312 938
	305, 304, 225, // 313 941
	304, 226, 225, // 314 944
	287, 286, 229, // 315 947
	286, 230, 229, // 316 950
	289, 288, 235, // 317 953
	288, 236, 235, // 318 956
	290, 240, 239, // 319 959
	292, 291, 243, // 320 962
	291, 244, 243, // 321 965
	286, 292, 230, // 322 968
	292, 243, 230, // 323 971
	294, 293, 247, // 324 974
	293, 248, 247, // 325 977
	291, 289, 244, // 326 980
	289, 235, 244, // 327 983
	295, 294, 251, // 328 986
	294, 247, 251, // 329 989
	296, 295, 233, // 330 992
	295, 251, 233, // 331 995
	278, 297, 213, // 332 998
	297, 256, 213, // 333 1001
	297, 298, 256, // 334 1004
	298, 204, 256, // 335 1007
	293, 287, 248, // 336 1010
	287, 229, 248, // 337 1013
	288, 275, 236, // 338 1016
	275, 200, 236, // 339 1019
	300, 299, 258, // 340 1022
	299, 259, 258, // 341 1025
	302, 301, 262, // 342 1028
	301, 263, 262, // 343 1031
	304, 303, 226, // 344 1034
	303, 266, 226, // 345 1037
	45, 306, 43, // 346 1040
	306, 307, 43, // 347 1043
	308, 309, 311, // 348 1046
	309, 310, 311, // 349 1049
	309, 312, 310, // 350 1052
	312, 313, 310, // 351 1055
	314, 315, 317, // 352 1058
	315, 316, 317, // 353 1061
	318, 319, 321, // 354 1064
	319, 320, 321, // 355 1067
	311, 310, 323, // 356 1070
	310, 322, 323, // 357 1073
	310, 313, 322, // 358 1076
	313, 324, 322, // 359 1079
	317, 316, 326, // 360 1082
	316, 325, 326, // 361 1085
	321, 320, 328, // 362 1088
	320, 327, 328, // 363 1091
	329, 330, 332, // 364 1094
	330, 331, 332, // 365 1097
	333, 329, 334, // 366 1100
	329, 332, 334, // 367 1103
	1, 0, 4, // 368 1106
	313, 312, 336, // 369 1109
	312, 335, 336, // 370 1112
	324, 313, 337, // 371 1115
	313, 336, 337, // 372 1118
	338, 339, 329, // 373 1121
	339, 330, 329, // 374 1124
	340, 338, 333, // 375 1127
	338, 329, 333, // 376 1130
	254, 340, 255, // 377 1133
	340, 333, 255, // 378 1136
DX3DINDEX_END
#endif

#else
#define index_KEIA_BODYR1___carbodycolor_0	NULL
#endif




#if ((PT_KEIA_BODYR1___carbodycolor_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BODYR1___carbodycolor_0 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BODYR1___carbodycolor_0_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BODYR1___carbodycolor_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BODYR1___carbodycolor_0 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BODYR1___carbodycolor_0_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BODYR1___carbodycolor_0_VERTEXSTRIP 	NULL
#endif






#if ((PT_KEIA_BODYR1___carwindow_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR1___carwindow_1 == PT_TRILIST ) || ((PT_KEIA_BODYR1___carwindow_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BODYR1___carwindow_1 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BODYR1___carwindow_1 )
DX3DVERT( -6.10314, 11.6562, 11.5688 ) DX3DVNORM( -0.922308, 0.382136, 0.0576246 )  //0
DX3DVERT( -6.10314, 11.3399, 4.15916 ) DX3DVNORM( -0.940003, 0.34025, -0.0249735 )  //1
DX3DVERT( -5.30479, 13.2617, 11.3012 ) DX3DVNORM( -0.890367, 0.45258, 0.0491718 )  //2
DX3DVERT( -5.42864, 13.1938, 4.19159 ) DX3DVNORM( -0.917661, 0.39735, 0.00337504 )  //3
DX3DVERT( -6.10314, 10.756, -6.11994 ) DX3DVNORM( -0.973222, 0.229794, -0.00587407 )  //4
DX3DVERT( -5.73974, 12.2384, -5.95772 ) DX3DVNORM( -0.937569, 0.34286, 0.0584109 )  //5
DX3DVERT( -6.10314, 11.1959, 2.64114 ) DX3DVNORM( -0.95519, 0.295851, -0.00916885 )  //6
DX3DVERT( -5.42864, 13.2151, 2.78333 ) DX3DVNORM( -0.920267, 0.391143, -0.01074 )  //7
DX3DVERT( -4.95835, 14.2459, 9.95837 ) DX3DVNORM( -0.830101, 0.553889, 0.0643311 )  //8
DX3DVERT( -4.75679, 14.4766, 5.20322 ) DX3DVNORM( -0.852271, 0.523101, 0.000710866 )  //9
DX3DVERT( -4.75679, 14.5006, 4.137 ) DX3DVNORM( -0.831838, 0.554463, 0.0248353 )  //10
DX3DVERT( -5.07054, 13.6035, -3.61918 ) DX3DVNORM( -0.89591, 0.443898, -0.017292 )  //11
DX3DVERT( -4.72561, 14.3795, -1.92301 ) DX3DVNORM( -0.890196, 0.455314, -0.0155117 )  //12
DX3DVERT( -4.75679, 14.6343, 2.93016 ) DX3DVNORM( -0.839172, 0.54369, 0.0138297 )  //13
DX3DVERT( 0, 11.4407, -9.84271 ) DX3DVNORM( -0.0104821, 0.923228, -0.38411 )  //14
DX3DVERT( 0, 13.5163, -5.58214 ) DX3DVNORM( -0.00895116, 0.897776, -0.440362 )  //15
DX3DVERT( -1.75418, 13.5163, -5.58214 ) DX3DVNORM( -0.0252799, 0.895561, -0.444221 )  //16
DX3DVERT( -1.72025, 11.4407, -9.69568 ) DX3DVNORM( -0.0338921, 0.927828, -0.371466 )  //17
DX3DVERT( 0, 14.9056, -2.71533 ) DX3DVNORM( 0.000872635, 0.910911, -0.412601 )  //18
DX3DVERT( -1.88331, 14.9077, -2.71857 ) DX3DVNORM( -0.0204505, 0.914552, -0.403951 )  //19
DX3DVERT( 0, 13.7145, 14.3196 ) DX3DVNORM( 0.000587943, 0.486467, 0.873699 )  //20
DX3DVERT( 0, 11.0719, 15.5315 ) DX3DVNORM( 0.00208691, 0.417472, 0.908687 )  //21
DX3DVERT( -1.62906, 11.1081, 15.5191 ) DX3DVNORM( -0.034767, 0.421794, 0.906025 )  //22
DX3DVERT( -1.65623, 13.7145, 14.3196 ) DX3DVNORM( -0.0456145, 0.48821, 0.871533 )  //23
DX3DVERT( -2.55176, 13.5163, -5.58214 ) DX3DVNORM( -0.101096, 0.887225, -0.450123 )  //24
DX3DVERT( -3.68273, 11.4407, -9.27069 ) DX3DVNORM( -0.102888, 0.9325, -0.346204 )  //25
DX3DVERT( -2.5206, 14.8714, -2.75325 ) DX3DVNORM( -0.0894177, 0.920662, -0.379981 )  //26
DX3DVERT( -3.47739, 11.1352, 15.3697 ) DX3DVNORM( -0.10472, 0.431559, 0.895986 )  //27
DX3DVERT( -3.06045, 13.7192, 14.1511 ) DX3DVNORM( -0.114282, 0.502055, 0.857252 )  //28
DX3DVERT( -5.23328, 13.1799, -5.34817 ) DX3DVNORM( -0.523242, 0.777997, -0.347762 )  //29
DX3DVERT( -5.63174, 11.257, -8.58251 ) DX3DVNORM( -0.519827, 0.802721, -0.292263 )  //30
DX3DVERT( -4.55231, 14.5827, -2.84285 ) DX3DVNORM( -0.395874, 0.872556, -0.286232 )  //31
DX3DVERT( -5.18649, 11.1464, 15.0962 ) DX3DVNORM( -0.395394, 0.442533, 0.804878 )  //32
DX3DVERT( -4.73112, 13.6922, 13.9273 ) DX3DVNORM( -0.550785, 0.547563, 0.629929 )  //33
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BODYR1___carwindow_1 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BODYR1___carwindow_1 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 34 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BODYR1___carwindow_1	NULL
#define vertexbuff_KEIA_BODYR1___carwindow_1	NULL
#endif




#if ((PT_KEIA_BODYR1___carwindow_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR1___carwindow_1 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BODYR1___carwindow_1 )
	0, 1, 2, // 0 2
	1, 3, 2, // 1 5
	4, 5, 6, // 2 8
	5, 7, 6, // 3 11
	2, 3, 8, // 4 14
	8, 3, 9, // 5 17
	9, 3, 10, // 6 20
	5, 11, 7, // 7 23
	11, 12, 7, // 8 26
	7, 12, 13, // 9 29
	14, 15, 17, // 10 32
	15, 16, 17, // 11 35
	15, 18, 16, // 12 38
	18, 19, 16, // 13 41
	20, 21, 23, // 14 44
	21, 22, 23, // 15 47
	17, 16, 25, // 16 50
	16, 24, 25, // 17 53
	16, 19, 24, // 18 56
	19, 26, 24, // 19 59
	23, 22, 28, // 20 62
	22, 27, 28, // 21 65
	25, 24, 30, // 22 68
	24, 29, 30, // 23 71
	24, 26, 29, // 24 74
	26, 31, 29, // 25 77
	28, 27, 33, // 26 80
	27, 32, 33, // 27 83
DX3DINDEX_END
#endif

#else
#define index_KEIA_BODYR1___carwindow_1	NULL
#endif




#if ((PT_KEIA_BODYR1___carwindow_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BODYR1___carwindow_1 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BODYR1___carwindow_1_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BODYR1___carwindow_1 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BODYR1___carwindow_1 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BODYR1___carwindow_1_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BODYR1___carwindow_1_VERTEXSTRIP 	NULL
#endif






#if ((PT_KEIA_BODYR1___carwinker_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR1___carwinker_2 == PT_TRILIST ) || ((PT_KEIA_BODYR1___carwinker_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BODYR1___carwinker_2 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BODYR1___carwinker_2 )
DX3DVERT( -6.03974, 9.79518, 15.14 ) DX3DVNORM( -0.646828, 0.385477, 0.658044 )  //0
DX3DVERT( -5.42152, 9.83236, 15.6995 ) DX3DVNORM( -0.382655, 0.34797, 0.855858 )  //1
DX3DVERT( -5.54254, 8.46922, 15.9518 ) DX3DVNORM( -0.363497, 0.250906, 0.897171 )  //2
DX3DVERT( -6.242, 8.46922, 15.6291 ) DX3DVNORM( -0.539063, 0.283469, 0.793131 )  //3
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BODYR1___carwinker_2 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BODYR1___carwinker_2 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 4 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BODYR1___carwinker_2	NULL
#define vertexbuff_KEIA_BODYR1___carwinker_2	NULL
#endif




#if ((PT_KEIA_BODYR1___carwinker_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR1___carwinker_2 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BODYR1___carwinker_2 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
DX3DINDEX_END
#endif

#else
#define index_KEIA_BODYR1___carwinker_2	NULL
#endif




#if ((PT_KEIA_BODYR1___carwinker_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BODYR1___carwinker_2 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BODYR1___carwinker_2_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BODYR1___carwinker_2 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BODYR1___carwinker_2 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BODYR1___carwinker_2_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BODYR1___carwinker_2_VERTEXSTRIP 	NULL
#endif






#if ((PT_KEIA_BODYR1___carbodyblack_3 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR1___carbodyblack_3 == PT_TRILIST ) || ((PT_KEIA_BODYR1___carbodyblack_3 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BODYR1___carbodyblack_3 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BODYR1___carbodyblack_3 )
DX3DVERT( 0, 7.93467, -12.0314 ) DX3DVNORM( 0, -0.96727, 0.25375 )  //0
DX3DVERT( 0, 7.62735, -13.2029 ) DX3DVNORM( 0.0217593, -0.950934, 0.308627 )  //1
DX3DVERT( -1.64654, 7.62735, -13.2029 ) DX3DVNORM( 0.58901, -0.763993, 0.263404 )  //2
DX3DVERT( -1.65828, 7.93467, -12.0314 ) DX3DVNORM( 0.580879, -0.785899, 0.211995 )  //3
DX3DVERT( 0, 6.88511, 13.753 ) DX3DVNORM( 0.112346, -0.981522, -0.154899 )  //4
DX3DVERT( 0, 6.94861, 12.2451 ) DX3DVNORM( -0.0195186, -0.904144, 0.426782 )  //5
DX3DVERT( -1.61544, 6.29517, 11.0253 ) DX3DVNORM( 0.547934, -0.703056, 0.4533 )  //6
DX3DVERT( -1.60306, 7.12866, 13.6521 ) DX3DVNORM( 0.616773, -0.770641, -0.160324 )  //7
DX3DVERT( 0, 6.57468, 15.2085 ) DX3DVNORM( 0.219837, -0.795835, -0.564196 )  //8
DX3DVERT( -1.56823, 6.12401, 14.6084 ) DX3DVNORM( 0.620045, -0.622434, -0.477619 )  //9
DX3DVERT( 0, 2.98897, 10.0941 ) DX3DVNORM( 8.46506e-008, -0.998595, 0.0529903 )  //10
DX3DVERT( 0, 2.58843, 2.54585 ) DX3DVNORM( 1.58532e-007, -0.999753, 0.0222432 )  //11
DX3DVERT( -1.49538, 2.58843, 2.54585 ) DX3DVNORM( -0.00602875, -0.999828, 0.0175444 )  //12
DX3DVERT( -1.48551, 2.98897, 10.0941 ) DX3DVNORM( 0.045493, -0.997824, 0.0477188 )  //13
DX3DVERT( 0, 3.58986, 10.0744 ) DX3DVNORM( -0.0141741, -0.0400567, 0.999097 )  //14
DX3DVERT( 0, 2.98897, 10.0941 ) DX3DVNORM( 0, 0.0327704, 0.999463 )  //15
DX3DVERT( -1.48551, 2.98897, 10.0941 ) DX3DVNORM( 0.492441, 0.0470023, 0.869076 )  //16
DX3DVERT( -1.50809, 3.58986, 10.0744 ) DX3DVNORM( 0.488995, -0.00318352, 0.872281 )  //17
DX3DVERT( 0, 2.71001, -15.8935 ) DX3DVNORM( 0.00357888, -0.955984, -0.293396 )  //18
DX3DVERT( 0, 2.87959, -16.4276 ) DX3DVNORM( 0.00441769, -0.93151, -0.363688 )  //19
DX3DVERT( -1.52188, 2.87959, -16.4646 ) DX3DVNORM( -0.0253106, -0.949557, -0.312572 )  //20
DX3DVERT( -1.51699, 2.71001, -15.8935 ) DX3DVNORM( -0.0529906, -0.987003, -0.151716 )  //21
DX3DVERT( 0, 4.65833, -15.9023 ) DX3DVNORM( 0.0621376, 0.0527763, 0.996671 )  //22
DX3DVERT( 0, 2.71001, -15.8935 ) DX3DVNORM( 0.0628282, -0.0444171, 0.997036 )  //23
DX3DVERT( -1.51699, 2.71001, -15.8935 ) DX3DVNORM( 0.565402, -0.0348429, 0.824079 )  //24
DX3DVERT( -1.56942, 4.65833, -15.7079 ) DX3DVNORM( 0.547778, 0.0747048, 0.833281 )  //25
DX3DVERT( 0, 3.24899, -16.9902 ) DX3DVNORM( 6.80385e-005, -0.0657942, -0.997833 )  //26
DX3DVERT( 0, 4.84952, -17.0957 ) DX3DVNORM( 6.80385e-005, -0.0657942, -0.997833 )  //27
DX3DVERT( -1.56443, 4.84988, -17.0959 ) DX3DVNORM( -0.0304002, -0.0676416, -0.997246 )  //28
DX3DVERT( -1.52549, 3.24936, -16.9903 ) DX3DVNORM( -0.0304002, -0.0676416, -0.997246 )  //29
DX3DVERT( 0, 4.66434, -9.1048 ) DX3DVNORM( 1.71615e-007, -0.166176, -0.986096 )  //30
DX3DVERT( 0, 6.10662, -9.48058 ) DX3DVNORM( -1.1321e-007, -0.390041, -0.920798 )  //31
DX3DVERT( -1.59782, 6.10662, -9.48058 ) DX3DVNORM( 0.534065, -0.314516, -0.784764 )  //32
DX3DVERT( -1.55783, 4.66434, -9.1048 ) DX3DVNORM( 0.511652, -0.129289, -0.849409 )  //33
DX3DVERT( 0, 3.19556, 16.1895 ) DX3DVNORM( 0.0314737, -0.0123665, -0.999428 )  //34
DX3DVERT( 0, 5.27935, 16.2105 ) DX3DVNORM( 0.167935, -0.397951, -0.901905 )  //35
DX3DVERT( -1.53319, 5.1627, 16.1169 ) DX3DVNORM( 0.620733, -0.322181, -0.714766 )  //36
DX3DVERT( -1.48339, 3.19556, 16.1895 ) DX3DVNORM( 0.514657, -0.00503068, -0.857381 )  //37
DX3DVERT( 0, 7.29236, -14.261 ) DX3DVNORM( 0.0457522, -0.902874, 0.427464 )  //38
DX3DVERT( 0, 6.53304, -15.4513 ) DX3DVNORM( 0.0255471, -0.643256, 0.765225 )  //39
DX3DVERT( -1.60999, 6.53304, -15.4513 ) DX3DVNORM( 0.606657, -0.506032, 0.613106 )  //40
DX3DVERT( -1.63011, 7.19584, -14.1163 ) DX3DVNORM( 0.596364, -0.721059, 0.352736 )  //41
DX3DVERT( 0, 6.0611, 10.9679 ) DX3DVNORM( -0.0444855, -0.651814, 0.757073 )  //42
DX3DVERT( -1.61271, 6.0611, 10.9679 ) DX3DVNORM( 0.501892, -0.483597, 0.717105 )  //43
DX3DVERT( 0, 2.68697, -9.01331 ) DX3DVNORM( 2.32264e-007, -0.999964, -0.00852502 )  //44
DX3DVERT( -1.50979, 2.68697, -9.01331 ) DX3DVNORM( -0.0575608, -0.998261, -0.0127113 )  //45
DX3DVERT( 0, 2.68697, -9.01331 ) DX3DVNORM( 3.47741e-007, -0.00603051, -0.999982 )  //46
DX3DVERT( 0, 3.57674, -9.01868 ) DX3DVNORM( 4.57135e-007, -0.0425134, -0.999096 )  //47
DX3DVERT( -1.53138, 3.57674, -9.01868 ) DX3DVNORM( 0.503215, -0.0244972, -0.863814 )  //48
DX3DVERT( -1.50979, 2.68697, -9.01331 ) DX3DVNORM( 0.501786, 0.00696224, -0.864964 )  //49
DX3DVERT( 0, 5.14044, 10.4031 ) DX3DVNORM( -0.00720388, -0.412669, 0.910853 )  //50
DX3DVERT( -1.58215, 5.14044, 10.4031 ) DX3DVNORM( 0.521317, -0.337161, 0.783933 )  //51
DX3DVERT( 0, 7.15847, -10.1204 ) DX3DVNORM( 0, -0.747299, -0.664487 )  //52
DX3DVERT( 0, 7.67255, -11.2434 ) DX3DVNORM( 2.29025e-009, -0.930432, -0.366464 )  //53
DX3DVERT( -1.64934, 7.67255, -11.2434 ) DX3DVNORM( 0.577624, -0.756626, -0.306378 )  //54
DX3DVERT( -1.62987, 7.15847, -10.1204 ) DX3DVNORM( 0.577029, -0.598321, -0.555923 )  //55
DX3DVERT( 0, 4.46029, 10.216 ) DX3DVNORM( -0.0213773, -0.205235, 0.978479 )  //56
DX3DVERT( -1.5422, 4.25643, 10.1061 ) DX3DVNORM( 0.498286, -0.147408, 0.85439 )  //57
DX3DVERT( 0, 7.93467, -12.0314 ) DX3DVNORM( 4.57381e-009, -0.948883, -0.315628 )  //58
DX3DVERT( -1.65828, 7.93467, -12.0314 ) DX3DVNORM( 0.578871, -0.771747, -0.263277 )  //59
DX3DVERT( 0, 5.27403, -15.8979 ) DX3DVNORM( 0.031385, -0.095329, 0.994951 )  //60
DX3DVERT( -1.58438, 5.27403, -15.8979 ) DX3DVNORM( 0.557609, -0.0364505, 0.829303 )  //61
DX3DVERT( 0, 7.64479, -16.6563 ) DX3DVNORM( -0.0137569, 0.492402, -0.870259 )  //62
DX3DVERT( 0, 8.00616, -16.4774 ) DX3DVNORM( -0.0137569, 0.492402, -0.870259 )  //63
DX3DVERT( -1.65025, 8.00863, -16.4244 ) DX3DVNORM( -0.0394948, 0.48403, -0.87416 )  //64
DX3DVERT( -1.62592, 7.64479, -16.6562 ) DX3DVNORM( -0.0394948, 0.48403, -0.87416 )  //65
DX3DVERT( -3.41507, 7.93467, -12.0314 ) DX3DVNORM( -0.645977, -0.757294, 0.0960183 )  //66
DX3DVERT( -3.41121, 7.62735, -13.2029 ) DX3DVNORM( -0.657633, -0.727244, 0.196559 )  //67
DX3DVERT( -6.92038, 7.33589, -12.9482 ) DX3DVNORM( 0.115868, -0.95845, 0.260668 )  //68
DX3DVERT( -6.9191, 7.29136, -12.0314 ) DX3DVNORM( 0.135521, -0.983, 0.123871 )  //69
DX3DVERT( -3.37082, 7.12866, 13.6521 ) DX3DVNORM( -0.709921, -0.691754, -0.132241 )  //70
DX3DVERT( -3.37473, 6.29517, 11.0253 ) DX3DVNORM( -0.705888, -0.618226, 0.345713 )  //71
DX3DVERT( -6.9431, 6.82883, 12.0628 ) DX3DVNORM( 0.00276946, -0.884243, 0.467019 )  //72
DX3DVERT( -7.0516, 7.08147, 13.5271 ) DX3DVNORM( -0.00370696, -0.998855, -0.047689 )  //73
DX3DVERT( -3.85553, 6.53112, 15.2521 ) DX3DVNORM( -0.64733, -0.617843, -0.446356 )  //74
DX3DVERT( -7.04739, 6.45971, 15.1905 ) DX3DVNORM( 0.0347003, -0.792844, -0.608436 )  //75
DX3DVERT( -3.32111, 2.98897, 10.0941 ) DX3DVNORM( -0.0949176, -0.994656, 0.040612 )  //76
DX3DVERT( -3.33129, 2.58843, 2.54585 ) DX3DVNORM( 0.0132877, -0.999852, 0.0109561 )  //77
DX3DVERT( -6.65927, 2.58843, 2.54585 ) DX3DVNORM( 1.47623e-007, -0.999753, 0.0222431 )  //78
DX3DVERT( -6.65927, 2.98897, 10.0941 ) DX3DVNORM( 1.53192e-007, -0.998595, 0.0529903 )  //79
DX3DVERT( -3.33096, 3.58986, 10.0744 ) DX3DVNORM( -0.701246, -0.0187405, 0.712673 )  //80
DX3DVERT( -3.32111, 2.98897, 10.0941 ) DX3DVNORM( -0.70094, 0.0118943, 0.713121 )  //81
DX3DVERT( -6.65927, 2.98897, 10.0941 ) DX3DVNORM( 3.48054e-008, 0.0327696, 0.999463 )  //82
DX3DVERT( -6.77061, 3.58986, 10.0744 ) DX3DVNORM( 3.87255e-008, -0.0073835, 0.999973 )  //83
DX3DVERT( -3.26486, 2.73303, -15.8666 ) DX3DVNORM( 0.148363, -0.976778, -0.154575 )  //84
DX3DVERT( -5.03208, 2.90261, -16.3434 ) DX3DVNORM( 0.0395118, -0.909373, -0.414101 )  //85
DX3DVERT( -6.46395, 2.87958, -16.2969 ) DX3DVNORM( -0.0403522, -0.882535, -0.468512 )  //86
DX3DVERT( -6.69345, 2.79517, -15.7022 ) DX3DVNORM( -0.0168793, -0.978069, -0.207595 )  //87
DX3DVERT( -3.3782, 4.75598, -16.0732 ) DX3DVNORM( -0.665441, -0.100838, 0.739608 )  //88
DX3DVERT( -3.26486, 2.73303, -15.8666 ) DX3DVNORM( -0.67625, -0.00370702, 0.736663 )  //89
DX3DVERT( -6.69345, 2.79517, -15.7022 ) DX3DVNORM( 0.0814974, 0.0505603, 0.99539 )  //90
DX3DVERT( -7.00588, 4.24239, -15.6369 ) DX3DVNORM( 0.110975, -0.0962459, 0.989152 )  //91
DX3DVERT( -3.36867, 4.66434, -9.1048 ) DX3DVNORM( -0.697964, -0.130783, -0.704089 )  //92
DX3DVERT( -3.38625, 6.10662, -9.48058 ) DX3DVNORM( -0.689906, -0.313522, -0.652482 )  //93
DX3DVERT( -7.03226, 5.72437, -9.41341 ) DX3DVNORM( 0.0359079, -0.423318, -0.905269 )  //94
DX3DVERT( -6.995, 4.66434, -9.1048 ) DX3DVNORM( 0.00248742, -0.172084, -0.985079 )  //95
DX3DVERT( -4.24627, 3.19556, 16.1895 ) DX3DVNORM( -0.523016, 0.210363, -0.825955 )  //96
DX3DVERT( -3.33653, 5.27935, 16.2105 ) DX3DVNORM( -0.653746, -0.188344, -0.7329 )  //97
DX3DVERT( -6.9507, 5.27935, 15.983 ) DX3DVNORM( 0.0413813, -0.325761, -0.944546 )  //98
DX3DVERT( -6.48849, 3.19556, 16.1895 ) DX3DVNORM( 0.038763, -0.0486091, -0.998065 )  //99
DX3DVERT( -3.40614, 7.19584, -14.1163 ) DX3DVNORM( -0.657246, -0.670799, 0.343592 )  //100
DX3DVERT( -3.39818, 6.53304, -15.4513 ) DX3DVNORM( -0.662737, -0.49785, 0.559397 )  //101
DX3DVERT( -6.98288, 6.19521, -14.8777 ) DX3DVNORM( 0.125013, -0.843901, 0.52173 )  //102
DX3DVERT( -6.96398, 6.96348, -13.9006 ) DX3DVNORM( 0.109786, -0.881972, 0.458336 )  //103
DX3DVERT( -3.37859, 6.0611, 10.9679 ) DX3DVNORM( -0.691799, -0.459002, 0.557433 )  //104
DX3DVERT( -7.0377, 6.0611, 10.9679 ) DX3DVNORM( 0.0192543, -0.647053, 0.762202 )  //105
DX3DVERT( -3.3478, 2.68697, -9.01331 ) DX3DVNORM( 0.12164, -0.992394, -0.0189251 )  //106
DX3DVERT( -6.65927, 2.68697, -9.01331 ) DX3DVNORM( 1.41914e-007, -0.999964, -0.00852506 )  //107
DX3DVERT( -3.3478, 2.68697, -9.01331 ) DX3DVNORM( -0.697438, -0.0116589, -0.71655 )  //108
DX3DVERT( -3.35716, 3.57674, -9.01868 ) DX3DVNORM( -0.697586, -0.0378036, -0.715503 )  //109
DX3DVERT( -6.8808, 3.57674, -9.01867 ) DX3DVNORM( -2.38698e-007, -0.0425139, -0.999096 )  //110
DX3DVERT( -6.65927, 2.68697, -9.01331 ) DX3DVNORM( -4.72512e-007, -0.0060316, -0.999982 )  //111
DX3DVERT( -3.3654, 5.14044, 10.4031 ) DX3DVNORM( -0.700488, -0.31281, 0.641457 )  //112
DX3DVERT( -7.03608, 5.14044, 10.4031 ) DX3DVNORM( 4.16256e-007, -0.423413, 0.905937 )  //113
DX3DVERT( -3.40081, 7.15847, -10.1204 ) DX3DVNORM( -0.673325, -0.568322, -0.47291 )  //114
DX3DVERT( -3.41032, 7.67255, -11.2434 ) DX3DVNORM( -0.643023, -0.719387, -0.262685 )  //115
DX3DVERT( -6.9191, 7.0469, -10.9858 ) DX3DVNORM( 0.148107, -0.926904, -0.344838 )  //116
DX3DVERT( -7.03124, 6.60482, -10.1204 ) DX3DVNORM( 0.102722, -0.758788, -0.643187 )  //117
DX3DVERT( -3.34571, 4.25643, 10.1061 ) DX3DVNORM( -0.703421, -0.146341, 0.695546 )  //118
DX3DVERT( -7.02576, 4.25643, 10.1061 ) DX3DVNORM( 7.81195e-008, -0.18479, 0.982778 )  //119
DX3DVERT( -3.41507, 7.93467, -12.0314 ) DX3DVNORM( -0.635705, -0.744817, -0.202798 )  //120
DX3DVERT( -6.9191, 7.29136, -12.0314 ) DX3DVNORM( 0.162415, -0.950985, -0.26315 )  //121
DX3DVERT( -3.38741, 5.27403, -15.8979 ) DX3DVNORM( -0.64572, -0.258891, 0.718347 )  //122
DX3DVERT( -6.96771, 5.20149, -15.4461 ) DX3DVNORM( 0.145645, -0.323943, 0.934799 )  //123
DX3DVERT( -6.98288, 6.19521, -14.8777 ) DX3DVNORM( 0.152219, -0.404524, 0.90177 )  //124
DX3DVERT( -3.26886, 3.0418, -12.0772 ) DX3DVNORM( 0.947842, -0.146039, 0.283316 )  //125
DX3DVERT( -3.26665, 2.87499, 13.0805 ) DX3DVNORM( 0.970544, -0.17054, 0.170178 )  //126
DX3DVERT( -2.35337, 2.58843, 2.54585 ) DX3DVNORM( 0.00722249, -0.999955, 0.00617041 )  //127
DX3DVERT( -3.26665, 2.87499, 13.0805 ) DX3DVNORM( -0.0495266, -0.998143, 0.0354546 )  //128
DX3DVERT( -3.03456, 2.87958, -16.5627 ) DX3DVNORM( 0.0314165, -0.950929, -0.307811 )  //129
DX3DVERT( -3.26886, 3.0418, -12.0772 ) DX3DVNORM( 0.102833, -0.993293, -0.0528645 )  //130
DX3DVERT( -3.20009, 4.85025, -16.9996 ) DX3DVNORM( -0.0608401, -0.0694261, -0.99573 )  //131
DX3DVERT( -3.04077, 3.24972, -16.8941 ) DX3DVNORM( -0.0608401, -0.0694261, -0.99573 )  //132
DX3DVERT( -3.26886, 3.0418, -12.0772 ) DX3DVNORM( 0.923007, -0.15275, -0.353164 )  //133
DX3DVERT( -3.26886, 3.0418, -12.0772 ) DX3DVNORM( 0.0642997, -0.997658, -0.0233239 )  //134
DX3DVERT( -3.61496, 8.05554, -16.2859 ) DX3DVNORM( -0.14209, 0.474837, -0.868528 )  //135
DX3DVERT( -3.58793, 7.64479, -16.4775 ) DX3DVNORM( -0.14209, 0.474837, -0.868528 )  //136
DX3DVERT( -3.26886, 3.0418, -12.0772 ) DX3DVNORM( -0.999478, -0.0305413, 0.0105638 )  //137
DX3DVERT( -3.26665, 2.87499, 13.0805 ) DX3DVNORM( -0.999447, 0.00296687, -0.0331125 )  //138
DX3DVERT( -3.26886, 3.0418, -12.0772 ) DX3DVNORM( -0.999635, -0.0208675, -0.0171651 )  //139
DX3DVERT( -1.48339, 3.19556, 16.1895 ) DX3DVNORM( -0.0074266, -0.850427, 0.52604 )  //140
DX3DVERT( -3.26665, 2.87499, 13.0805 ) DX3DVNORM( 0, -0.994726, 0.102564 )  //141
DX3DVERT( -4.24627, 3.19556, 16.1895 ) DX3DVNORM( -0.00692238, -0.817145, 0.576391 )  //142
DX3DVERT( 0, 4.83635, -17.2955 ) DX3DVNORM( -0.000116965, -0.997771, 0.0667319 )  //143
DX3DVERT( -1.57051, 4.83635, -17.2954 ) DX3DVNORM( 0.00189778, -0.997712, 0.0675808 )  //144
DX3DVERT( -1.56443, 4.84988, -17.0959 ) DX3DVNORM( 0.00189778, -0.997712, 0.0675808 )  //145
DX3DVERT( 0, 4.84952, -17.0957 ) DX3DVNORM( -0.000116965, -0.997771, 0.0667319 )  //146
DX3DVERT( -1.53157, 3.23582, -17.1899 ) DX3DVNORM( -0.00205121, 0.997712, -0.067574 )  //147
DX3DVERT( 0, 3.23582, -17.19 ) DX3DVNORM( 0.00011936, 0.997771, -0.0667333 )  //148
DX3DVERT( 0, 3.24899, -16.9902 ) DX3DVNORM( 0.00011936, 0.997771, -0.0667333 )  //149
DX3DVERT( -1.52549, 3.24936, -16.9903 ) DX3DVNORM( -0.00205121, 0.997712, -0.067574 )  //150
DX3DVERT( -3.21224, 4.83635, -17.199 ) DX3DVNORM( 0.00391252, -0.997648, 0.0684294 )  //151
DX3DVERT( -3.20009, 4.85025, -16.9996 ) DX3DVNORM( 0.00391252, -0.997648, 0.0684294 )  //152
DX3DVERT( -3.21224, 4.83635, -17.199 ) DX3DVNORM( 0.993263, 0.0944394, -0.067153 )  //153
DX3DVERT( -3.05293, 3.23582, -17.0934 ) DX3DVNORM( 0.993263, 0.0944394, -0.067153 )  //154
DX3DVERT( -3.04077, 3.24972, -16.8941 ) DX3DVNORM( 0.993263, 0.0944394, -0.067153 )  //155
DX3DVERT( -3.20009, 4.85025, -16.9996 ) DX3DVNORM( 0.993263, 0.0944394, -0.067153 )  //156
DX3DVERT( -3.05293, 3.23582, -17.0934 ) DX3DVNORM( -0.00422176, 0.997648, -0.0684143 )  //157
DX3DVERT( -3.04077, 3.24972, -16.8941 ) DX3DVNORM( -0.00422176, 0.997648, -0.0684143 )  //158
DX3DVERT( 0, 4.57057, 16.9654 ) DX3DVNORM( 2.35774e-005, 0.999993, -0.00375271 )  //159
DX3DVERT( -1.51125, 4.57057, 16.9654 ) DX3DVNORM( 0.000101241, 0.999994, -0.00354245 )  //160
DX3DVERT( -1.50724, 4.56996, 16.7937 ) DX3DVNORM( 0.000101241, 0.999994, -0.00354245 )  //161
DX3DVERT( 0, 4.56989, 16.7937 ) DX3DVNORM( 2.35774e-005, 0.999993, -0.00375271 )  //162
DX3DVERT( -1.5504, 6.21291, 16.9589 ) DX3DVNORM( -0.000102162, -0.999994, 0.00354291 )  //163
DX3DVERT( 0, 6.21291, 16.9589 ) DX3DVNORM( -2.29812e-005, -0.999993, 0.0037524 )  //164
DX3DVERT( 0, 6.21223, 16.7872 ) DX3DVNORM( -2.29812e-005, -0.999993, 0.0037524 )  //165
DX3DVERT( -1.54639, 6.21231, 16.7872 ) DX3DVNORM( -0.000102162, -0.999994, 0.00354291 )  //166
DX3DVERT( -2.99814, 4.57057, 16.8963 ) DX3DVNORM( 0.000178904, 0.999994, -0.00333219 )  //167
DX3DVERT( -2.99012, 4.57003, 16.7248 ) DX3DVNORM( 0.000178904, 0.999994, -0.00333219 )  //168
DX3DVERT( -2.99814, 4.57057, 16.8963 ) DX3DVNORM( 0.998841, 0.0117553, 0.0466629 )  //169
DX3DVERT( -3.01716, 6.21291, 16.8898 ) DX3DVNORM( 0.998841, 0.0117553, 0.0466629 )  //170
DX3DVERT( -3.00914, 6.21238, 16.7183 ) DX3DVNORM( 0.998841, 0.0117553, 0.0466629 )  //171
DX3DVERT( -2.99012, 4.57003, 16.7248 ) DX3DVNORM( 0.998841, 0.0117553, 0.0466629 )  //172
DX3DVERT( -3.01716, 6.21291, 16.8898 ) DX3DVNORM( -0.000181343, -0.999994, 0.00333341 )  //173
DX3DVERT( -3.00914, 6.21238, 16.7183 ) DX3DVNORM( -0.000181343, -0.999994, 0.00333341 )  //174
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BODYR1___carbodyblack_3 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BODYR1___carbodyblack_3 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 175 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BODYR1___carbodyblack_3	NULL
#define vertexbuff_KEIA_BODYR1___carbodyblack_3	NULL
#endif




#if ((PT_KEIA_BODYR1___carbodyblack_3 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR1___carbodyblack_3 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BODYR1___carbodyblack_3 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
	4, 5, 7, // 2 8
	5, 6, 7, // 3 11
	8, 4, 9, // 4 14
	4, 7, 9, // 5 17
	10, 11, 13, // 6 20
	11, 12, 13, // 7 23
	14, 15, 17, // 8 26
	15, 16, 17, // 9 29
	18, 19, 21, // 10 32
	19, 20, 21, // 11 35
	22, 23, 25, // 12 38
	23, 24, 25, // 13 41
	26, 27, 29, // 14 44
	27, 28, 29, // 15 47
	30, 31, 33, // 16 50
	31, 32, 33, // 17 53
	34, 35, 37, // 18 56
	35, 36, 37, // 19 59
	38, 39, 41, // 20 62
	39, 40, 41, // 21 65
	5, 42, 6, // 22 68
	42, 43, 6, // 23 71
	1, 38, 2, // 24 74
	38, 41, 2, // 25 77
	11, 44, 12, // 26 80
	44, 45, 12, // 27 83
	46, 47, 49, // 28 86
	47, 48, 49, // 29 89
	42, 50, 43, // 30 92
	50, 51, 43, // 31 95
	52, 53, 55, // 32 98
	53, 54, 55, // 33 101
	31, 52, 32, // 34 104
	52, 55, 32, // 35 107
	50, 56, 51, // 36 110
	56, 57, 51, // 37 113
	56, 14, 57, // 38 116
	14, 17, 57, // 39 119
	47, 30, 48, // 40 122
	30, 33, 48, // 41 125
	35, 8, 36, // 42 128
	8, 9, 36, // 43 131
	53, 58, 54, // 44 134
	58, 59, 54, // 45 137
	39, 60, 40, // 46 140
	60, 61, 40, // 47 143
	60, 22, 61, // 48 146
	22, 25, 61, // 49 149
	62, 63, 65, // 50 152
	63, 64, 65, // 51 155
	66, 67, 69, // 52 158
	67, 68, 69, // 53 161
	70, 71, 73, // 54 164
	71, 72, 73, // 55 167
	74, 70, 75, // 56 170
	70, 73, 75, // 57 173
	76, 77, 79, // 58 176
	77, 78, 79, // 59 179
	80, 81, 83, // 60 182
	81, 82, 83, // 61 185
	84, 85, 87, // 62 188
	85, 86, 87, // 63 191
	88, 89, 91, // 64 194
	89, 90, 91, // 65 197
	92, 93, 95, // 66 200
	93, 94, 95, // 67 203
	96, 97, 99, // 68 206
	97, 98, 99, // 69 209
	100, 101, 103, // 70 212
	101, 102, 103, // 71 215
	71, 104, 72, // 72 218
	104, 105, 72, // 73 221
	67, 100, 68, // 74 224
	100, 103, 68, // 75 227
	77, 106, 78, // 76 230
	106, 107, 78, // 77 233
	108, 109, 111, // 78 236
	109, 110, 111, // 79 239
	104, 112, 105, // 80 242
	112, 113, 105, // 81 245
	114, 115, 117, // 82 248
	115, 116, 117, // 83 251
	93, 114, 94, // 84 254
	114, 117, 94, // 85 257
	112, 118, 113, // 86 260
	118, 119, 113, // 87 263
	118, 80, 119, // 88 266
	80, 83, 119, // 89 269
	109, 92, 110, // 90 272
	92, 95, 110, // 91 275
	97, 74, 98, // 92 278
	74, 75, 98, // 93 281
	115, 120, 116, // 94 284
	120, 121, 116, // 95 287
	101, 122, 124, // 96 290
	122, 123, 124, // 97 293
	122, 88, 123, // 98 296
	88, 91, 123, // 99 299
	3, 2, 125, // 100 302
	7, 6, 126, // 101 305
	9, 7, 126, // 102 308
	13, 12, 128, // 103 311
	12, 127, 128, // 104 314
	17, 16, 126, // 105 317
	21, 20, 130, // 106 320
	20, 129, 130, // 107 323
	25, 24, 125, // 108 326
	29, 28, 132, // 109 329
	28, 131, 132, // 110 332
	33, 32, 133, // 111 335
	37, 36, 126, // 112 338
	41, 40, 125, // 113 341
	6, 43, 126, // 114 344
	2, 41, 125, // 115 347
	12, 45, 127, // 116 350
	45, 134, 127, // 117 353
	49, 48, 133, // 118 356
	43, 51, 126, // 119 359
	55, 54, 133, // 120 362
	32, 55, 133, // 121 365
	51, 57, 126, // 122 368
	57, 17, 126, // 123 371
	48, 33, 133, // 124 374
	36, 9, 126, // 125 377
	54, 59, 133, // 126 380
	40, 61, 125, // 127 383
	61, 25, 125, // 128 386
	65, 64, 136, // 129 389
	64, 135, 136, // 130 392
	137, 67, 66, // 131 395
	138, 71, 70, // 132 398
	138, 70, 74, // 133 401
	128, 127, 76, // 134 404
	127, 77, 76, // 135 407
	138, 81, 80, // 136 410
	130, 129, 84, // 137 413
	129, 85, 84, // 138 416
	137, 89, 88, // 139 419
	139, 93, 92, // 140 422
	138, 97, 96, // 141 425
	140, 141, 142, // 142 428
	137, 101, 100, // 143 431
	138, 104, 71, // 144 434
	137, 100, 67, // 145 437
	127, 134, 77, // 146 440
	134, 106, 77, // 147 443
	139, 109, 108, // 148 446
	138, 112, 104, // 149 449
	139, 115, 114, // 150 452
	139, 114, 93, // 151 455
	138, 118, 112, // 152 458
	138, 80, 118, // 153 461
	139, 92, 109, // 154 464
	138, 74, 97, // 155 467
	139, 120, 115, // 156 470
	137, 122, 101, // 157 473
	137, 88, 122, // 158 476
	143, 144, 146, // 159 479
	144, 145, 146, // 160 482
	147, 148, 150, // 161 485
	148, 149, 150, // 162 488
	144, 151, 145, // 163 491
	151, 152, 145, // 164 494
	153, 154, 156, // 165 497
	154, 155, 156, // 166 500
	157, 147, 158, // 167 503
	147, 150, 158, // 168 506
	159, 160, 162, // 169 509
	160, 161, 162, // 170 512
	163, 164, 166, // 171 515
	164, 165, 166, // 172 518
	160, 167, 161, // 173 521
	167, 168, 161, // 174 524
	169, 170, 172, // 175 527
	170, 171, 172, // 176 530
	173, 163, 174, // 177 533
	163, 166, 174, // 178 536
DX3DINDEX_END
#endif

#else
#define index_KEIA_BODYR1___carbodyblack_3	NULL
#endif




#if ((PT_KEIA_BODYR1___carbodyblack_3 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BODYR1___carbodyblack_3 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BODYR1___carbodyblack_3_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BODYR1___carbodyblack_3 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BODYR1___carbodyblack_3 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BODYR1___carbodyblack_3_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BODYR1___carbodyblack_3_VERTEXSTRIP 	NULL
#endif






#if ((PT_KEIA_BODYR1___carlight_4 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR1___carlight_4 == PT_TRILIST ) || ((PT_KEIA_BODYR1___carlight_4 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BODYR1___carlight_4 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BODYR1___carlight_4 )
DX3DVERT( -4.96185, 7.57884, -16.2051 ) DX3DVNORM( -0.221852, 0.478803, -0.849429 )  //0
DX3DVERT( -4.72208, 8.66714, -15.6238 ) DX3DVNORM( -0.221852, 0.478803, -0.849429 )  //1
DX3DVERT( -5.74182, 8.72143, -15.339 ) DX3DVNORM( -0.225559, 0.486028, -0.844334 )  //2
DX3DVERT( -5.73379, 7.60088, -15.9673 ) DX3DVNORM( -0.225559, 0.486028, -0.844334 )  //3
DX3DVERT( -3.58793, 7.64479, -16.4775 ) DX3DVNORM( -0.14209, 0.474837, -0.868528 )  //4
DX3DVERT( -3.61496, 8.05554, -16.2859 ) DX3DVNORM( -0.14209, 0.474837, -0.868528 )  //5
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BODYR1___carlight_4 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BODYR1___carlight_4 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 6 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BODYR1___carlight_4	NULL
#define vertexbuff_KEIA_BODYR1___carlight_4	NULL
#endif




#if ((PT_KEIA_BODYR1___carlight_4 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR1___carlight_4 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BODYR1___carlight_4 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
	4, 5, 0, // 2 8
	5, 1, 0, // 3 11
DX3DINDEX_END
#endif

#else
#define index_KEIA_BODYR1___carlight_4	NULL
#endif




#if ((PT_KEIA_BODYR1___carlight_4 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BODYR1___carlight_4 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BODYR1___carlight_4_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BODYR1___carlight_4 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BODYR1___carlight_4 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BODYR1___carlight_4_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BODYR1___carlight_4_VERTEXSTRIP 	NULL
#endif






#if ((PT_KEIA_BODYR1___carwinker_5 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR1___carwinker_5 == PT_TRILIST ) || ((PT_KEIA_BODYR1___carwinker_5 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BODYR1___carwinker_5 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BODYR1___carwinker_5 )
DX3DVERT( -6.35264, 7.52912, -15.404 ) DX3DVNORM( -0.654132, 0.472062, -0.590989 )  //0
DX3DVERT( -5.98553, 7.57004, -15.7938 ) DX3DVNORM( -0.588225, 0.471864, -0.656762 )  //1
DX3DVERT( -6.26894, 8.68022, -15.083 ) DX3DVNORM( -0.633886, 0.376958, -0.675345 )  //2
DX3DVERT( -5.73379, 7.60088, -15.9673 ) DX3DVNORM( -0.445939, 0.51329, -0.733261 )  //3
DX3DVERT( -5.74182, 8.72143, -15.339 ) DX3DVNORM( -0.430799, 0.508105, -0.745816 )  //4
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BODYR1___carwinker_5 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BODYR1___carwinker_5 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 5 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BODYR1___carwinker_5	NULL
#define vertexbuff_KEIA_BODYR1___carwinker_5	NULL
#endif




#if ((PT_KEIA_BODYR1___carwinker_5 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR1___carwinker_5 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BODYR1___carwinker_5 )
	0, 1, 2, // 0 2
	2, 1, 4, // 1 5
	1, 3, 4, // 2 8
DX3DINDEX_END
#endif

#else
#define index_KEIA_BODYR1___carwinker_5	NULL
#endif




#if ((PT_KEIA_BODYR1___carwinker_5 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BODYR1___carwinker_5 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BODYR1___carwinker_5_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BODYR1___carwinker_5 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BODYR1___carwinker_5 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BODYR1___carwinker_5_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BODYR1___carwinker_5_VERTEXSTRIP 	NULL
#endif






#if ((PT_KEIA_BODYR1___carlight_6 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR1___carlight_6 == PT_TRILIST ) || ((PT_KEIA_BODYR1___carlight_6 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_BODYR1___carlight_6 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_BODYR1___carlight_6 )
DX3DVERT( -5.42152, 9.83236, 15.6995 ) DX3DVNORM( -0.382655, 0.34797, 0.855858 )  //0
DX3DVERT( -3.69095, 9.81167, 15.9939 ) DX3DVNORM( -0.112437, 0.327136, 0.938264 )  //1
DX3DVERT( -3.72156, 8.46922, 16.2978 ) DX3DVNORM( -0.122455, 0.218408, 0.968144 )  //2
DX3DVERT( -5.54254, 8.46922, 15.9518 ) DX3DVNORM( -0.363497, 0.250906, 0.897171 )  //3
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_BODYR1___carlight_6 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_BODYR1___carlight_6 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 4 )
DX3DVERTEX_END


#else
#define vertex_KEIA_BODYR1___carlight_6	NULL
#define vertexbuff_KEIA_BODYR1___carlight_6	NULL
#endif




#if ((PT_KEIA_BODYR1___carlight_6 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_BODYR1___carlight_6 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_BODYR1___carlight_6 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
DX3DINDEX_END
#endif

#else
#define index_KEIA_BODYR1___carlight_6	NULL
#endif




#if ((PT_KEIA_BODYR1___carlight_6 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_BODYR1___carlight_6 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_BODYR1___carlight_6_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_BODYR1___carlight_6 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_BODYR1___carlight_6 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_BODYR1___carlight_6_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_BODYR1___carlight_6_VERTEXSTRIP 	NULL
#endif




DX3DMODELTBL_START( modeltbl_KEIA_BODYR1__ )
DX3DMODEL_START( model_KEIA_BODYR1___carbodycolor_0 )
DX3DMODEL_VERTEX( vertex_KEIA_BODYR1___carbodycolor_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BODYR1___carbodycolor_0 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 1137 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carbodycolor )
DX3DMODEL_END
DX3DMODEL_START( model_KEIA_BODYR1___carwindow_1 )
DX3DMODEL_VERTEX( vertex_KEIA_BODYR1___carwindow_1 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BODYR1___carwindow_1 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 84 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carwindow )
DX3DMODEL_END
DX3DMODEL_START( model_KEIA_BODYR1___carwinker_2 )
DX3DMODEL_VERTEX( vertex_KEIA_BODYR1___carwinker_2 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BODYR1___carwinker_2 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 6 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carwinker )
DX3DMODEL_END
DX3DMODEL_START( model_KEIA_BODYR1___carbodyblack_3 )
DX3DMODEL_VERTEX( vertex_KEIA_BODYR1___carbodyblack_3 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BODYR1___carbodyblack_3 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 537 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carbodyblack )
DX3DMODEL_END
DX3DMODEL_START( model_KEIA_BODYR1___carlight_4 )
DX3DMODEL_VERTEX( vertex_KEIA_BODYR1___carlight_4 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BODYR1___carlight_4 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 12 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carlight )
DX3DMODEL_END
DX3DMODEL_START( model_KEIA_BODYR1___carwinker_5 )
DX3DMODEL_VERTEX( vertex_KEIA_BODYR1___carwinker_5 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BODYR1___carwinker_5 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 9 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carwinker )
DX3DMODEL_END
DX3DMODEL_START( model_KEIA_BODYR1___carlight_6 )
DX3DMODEL_VERTEX( vertex_KEIA_BODYR1___carlight_6 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_BODYR1___carlight_6 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 6 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carlight )
DX3DMODEL_END
DX3DMODELTBL_END




DX3DOBJECT_START_HASH( object_KEIA_BODYR1__, 1480201437 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_KEIA_BODYR1__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	0, -0.673368, -0, 
	-0, -0, 0,                // -0, -0, 0
	-1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	0, -0.673368, -0, 
	-0, -0, 0,                // -0, -0, 0
	-1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_KEIA_BASE_WIPERLBASE__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_KEIA_DRIVER__
/////////////////////////////////////////////
#if 0
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 7.20244, -5.29417, 1
#endif



#if ((PT_KEIA_DRIVER___carbodyblack_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_DRIVER___carbodyblack_0 == PT_TRILIST ) || ((PT_KEIA_DRIVER___carbodyblack_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_KEIA_DRIVER___carbodyblack_0 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_KEIA_DRIVER___carbodyblack_0 )
DX3DVERT( -4.32111, 4.02708, -5.25431 ) DX3DVNORM( -0.190904, 0.981402, -0.0201232 )  //0
DX3DVERT( -3.22854, 4.22325, -5.25431 ) DX3DVNORM( -0.190904, 0.981402, -0.0201232 )  //1
DX3DVERT( -3.39672, 4.22325, -4.45653 ) DX3DVNORM( -0.190904, 0.981402, -0.0201232 )  //2
DX3DVERT( -4.32111, 4.02708, -4.45653 ) DX3DVNORM( -0.190904, 0.981402, -0.0201232 )  //3
DX3DVERT( -3.32229, 6.68998, -5.42688 ) DX3DVNORM( 0, 1, -0 )  //4
DX3DVERT( -2.2281, 6.68998, -5.42688 ) DX3DVNORM( 0, 1, -0 )  //5
DX3DVERT( -2.2281, 6.68998, -4.29681 ) DX3DVNORM( 0, 1, -0 )  //6
DX3DVERT( -3.32229, 6.68998, -4.29681 ) DX3DVNORM( 0, 1, -0 )  //7
DX3DVERT( -2.22082, 4.22325, -5.25431 ) DX3DVNORM( 0.244396, 0.969271, -0.027998 )  //8
DX3DVERT( -1.08528, 3.95998, -5.25431 ) DX3DVNORM( 0.244396, 0.969271, -0.027998 )  //9
DX3DVERT( -1.08528, 3.95998, -4.45653 ) DX3DVNORM( 0.244396, 0.969271, -0.027998 )  //10
DX3DVERT( -2.03803, 4.22325, -4.45653 ) DX3DVNORM( 0.244396, 0.969271, -0.027998 )  //11
DX3DVERT( -4.75541, 0, -6.76009 ) DX3DVNORM( -0.027573, 0.344539, -0.938367 )  //12
DX3DVERT( -3.39672, 0, -6.76009 ) DX3DVNORM( -0.013788, 0.340224, -0.940243 )  //13
DX3DVERT( -3.22854, 4.22325, -5.25431 ) DX3DVNORM( -0.0249009, -0.0665399, -0.997473 )  //14
DX3DVERT( -4.32111, 4.02708, -5.25431 ) DX3DVNORM( -0.027573, 0.344539, -0.938367 )  //15
DX3DVERT( -3.39672, 0, -4.82864 ) DX3DVNORM( 0.00387706, -0.0890054, 0.996024 )  //16
DX3DVERT( -4.75541, 0, -4.82864 ) DX3DVNORM( 0.00775407, -0.0902409, 0.99589 )  //17
DX3DVERT( -4.32111, 4.02708, -4.45653 ) DX3DVNORM( 0.00775407, -0.0902409, 0.99589 )  //18
DX3DVERT( -3.39672, 4.22325, -4.45653 ) DX3DVNORM( -0.00472117, -0.301307, 0.953515 )  //19
DX3DVERT( -4.75541, 0, -4.82864 ) DX3DVNORM( -0.994235, 0.107224, -0 )  //20
DX3DVERT( -4.75541, 0, -6.76009 ) DX3DVNORM( -0.994235, 0.107224, -0 )  //21
DX3DVERT( -4.32111, 4.02708, -5.25431 ) DX3DVNORM( -0.994235, 0.107224, -0 )  //22
DX3DVERT( -4.32111, 4.02708, -4.45653 ) DX3DVNORM( -0.994235, 0.107224, -0 )  //23
DX3DVERT( -2.03803, 0, -6.76009 ) DX3DVNORM( 0.0183415, 0.341714, -0.939625 )  //24
DX3DVERT( -2.22082, 4.22325, -5.25431 ) DX3DVNORM( 0.00159212, -0.0653978, -0.997858 )  //25
DX3DVERT( -2.03803, 0, -4.82864 ) DX3DVNORM( -0.00518679, -0.089423, 0.99598 )  //26
DX3DVERT( -2.03803, 4.22325, -4.45653 ) DX3DVNORM( -0.0110683, -0.301568, 0.953381 )  //27
DX3DVERT( -0.679345, 0, -6.76009 ) DX3DVNORM( 0.0366761, 0.347462, -0.936977 )  //28
DX3DVERT( -1.08528, 3.95998, -5.25431 ) DX3DVNORM( 0.0366761, 0.347462, -0.936977 )  //29
DX3DVERT( -0.679345, 0, -6.76009 ) DX3DVNORM( 0.994787, 0.101975, -0 )  //30
DX3DVERT( -0.679345, 0, -4.82864 ) DX3DVNORM( 0.994787, 0.101975, -0 )  //31
DX3DVERT( -1.08528, 3.95998, -4.45653 ) DX3DVNORM( 0.994787, 0.101975, -0 )  //32
DX3DVERT( -1.08528, 3.95998, -5.25431 ) DX3DVNORM( 0.994787, 0.101975, -0 )  //33
DX3DVERT( -0.679345, 0, -4.82864 ) DX3DVNORM( -0.0103734, -0.0910749, 0.99579 )  //34
DX3DVERT( -1.08528, 3.95998, -4.45653 ) DX3DVNORM( -0.0103734, -0.0910749, 0.99579 )  //35
DX3DVERT( -1.70209, 4.61446, -5.95838 ) DX3DVNORM( -0.0187183, -0.470856, -0.882012 )  //36
DX3DVERT( -3.73267, 4.73292, -5.95838 ) DX3DVNORM( -0.0187183, -0.470856, -0.882012 )  //37
DX3DVERT( -2.22082, 4.22325, -5.25431 ) DX3DVNORM( 0.752442, -0.65865, -0.00325504 )  //38
DX3DVERT( -2.03803, 4.22325, -4.45653 ) DX3DVNORM( 0.752442, -0.65865, -0.00325504 )  //39
DX3DVERT( -1.49349, 5.04615, -3.63277 ) DX3DVNORM( 0.946195, -0.322362, -0.0282272 )  //40
DX3DVERT( -1.70209, 4.61446, -5.95838 ) DX3DVNORM( 0.946195, -0.322362, -0.0282272 )  //41
DX3DVERT( -3.94127, 5.1646, -3.63277 ) DX3DVNORM( -0.00715037, -0.26111, 0.965282 )  //42
DX3DVERT( -1.49349, 5.04615, -3.63277 ) DX3DVNORM( -0.00715037, -0.26111, 0.965282 )  //43
DX3DVERT( -3.39672, 4.22325, -4.45653 ) DX3DVNORM( -0.811036, -0.584748, -0.0170198 )  //44
DX3DVERT( -3.22854, 4.22325, -5.25431 ) DX3DVNORM( -0.811036, -0.584748, -0.0170198 )  //45
DX3DVERT( -3.73267, 4.73292, -5.95838 ) DX3DVNORM( -0.953008, -0.301186, -0.0325978 )  //46
DX3DVERT( -3.94127, 5.1646, -3.63277 ) DX3DVNORM( -0.953008, -0.301186, -0.0325978 )  //47
DX3DVERT( -1.6533, 5.78924, -5.93653 ) DX3DVNORM( 0.00615733, 0.273554, -0.961837 )  //48
DX3DVERT( -3.82889, 5.87043, -5.93316 ) DX3DVNORM( 0.00615733, 0.273554, -0.961837 )  //49
DX3DVERT( -1.67394, 5.84607, -3.80711 ) DX3DVNORM( 0.949272, 0.313256, -0.0274416 )  //50
DX3DVERT( -1.6533, 5.78924, -5.93653 ) DX3DVNORM( 0.949272, 0.313256, -0.0274416 )  //51
DX3DVERT( -3.81394, 5.92573, -3.81153 ) DX3DVNORM( 0.0102351, 0.374678, 0.927098 )  //52
DX3DVERT( -1.67394, 5.84607, -3.80711 ) DX3DVNORM( 0.0102351, 0.374678, 0.927098 )  //53
DX3DVERT( -3.82889, 5.87043, -5.93316 ) DX3DVNORM( -0.958563, 0.283689, -0.0260141 )  //54
DX3DVERT( -3.81394, 5.92573, -3.81153 ) DX3DVNORM( -0.958563, 0.283689, -0.0260141 )  //55
DX3DVERT( -2.2281, 6.68998, -5.42688 ) DX3DVNORM( 0.0117462, 0.508813, -0.860797 )  //56
DX3DVERT( -3.32229, 6.68998, -5.42688 ) DX3DVNORM( 0.0117462, 0.508813, -0.860797 )  //57
DX3DVERT( -2.2281, 6.68998, -4.29681 ) DX3DVNORM( 0.839524, 0.543306, -0.00415572 )  //58
DX3DVERT( -2.2281, 6.68998, -5.42688 ) DX3DVNORM( 0.839524, 0.543306, -0.00415572 )  //59
DX3DVERT( -3.32229, 6.68998, -4.29681 ) DX3DVNORM( 0.0116062, 0.518727, 0.854861 )  //60
DX3DVERT( -2.2281, 6.68998, -4.29681 ) DX3DVNORM( 0.0116062, 0.518727, 0.854861 )  //61
DX3DVERT( -3.32229, 6.68998, -5.42688 ) DX3DVNORM( -0.845941, 0.533252, -0.00517703 )  //62
DX3DVERT( -3.32229, 6.68998, -4.29681 ) DX3DVNORM( -0.845941, 0.533252, -0.00517703 )  //63
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_KEIA_DRIVER___carbodyblack_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_KEIA_DRIVER___carbodyblack_0 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 64 )
DX3DVERTEX_END


#else
#define vertex_KEIA_DRIVER___carbodyblack_0	NULL
#define vertexbuff_KEIA_DRIVER___carbodyblack_0	NULL
#endif




#if ((PT_KEIA_DRIVER___carbodyblack_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_KEIA_DRIVER___carbodyblack_0 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_KEIA_DRIVER___carbodyblack_0 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
	4, 5, 7, // 2 8
	5, 6, 7, // 3 11
	8, 9, 11, // 4 14
	9, 10, 11, // 5 17
	12, 13, 15, // 6 20
	13, 14, 15, // 7 23
	16, 17, 19, // 8 26
	17, 18, 19, // 9 29
	20, 21, 23, // 10 32
	21, 22, 23, // 11 35
	13, 24, 14, // 12 38
	24, 25, 14, // 13 41
	26, 16, 27, // 14 44
	16, 19, 27, // 15 47
	24, 28, 25, // 16 50
	28, 29, 25, // 17 53
	30, 31, 33, // 18 56
	31, 32, 33, // 19 59
	34, 26, 35, // 20 62
	26, 27, 35, // 21 65
	14, 25, 37, // 22 68
	25, 36, 37, // 23 71
	38, 39, 41, // 24 74
	39, 40, 41, // 25 77
	27, 19, 43, // 26 80
	19, 42, 43, // 27 83
	44, 45, 47, // 28 86
	45, 46, 47, // 29 89
	37, 36, 49, // 30 92
	36, 48, 49, // 31 95
	41, 40, 51, // 32 98
	40, 50, 51, // 33 101
	43, 42, 53, // 34 104
	42, 52, 53, // 35 107
	47, 46, 55, // 36 110
	46, 54, 55, // 37 113
	49, 48, 57, // 38 116
	48, 56, 57, // 39 119
	51, 50, 59, // 40 122
	50, 58, 59, // 41 125
	53, 52, 61, // 42 128
	52, 60, 61, // 43 131
	55, 54, 63, // 44 134
	54, 62, 63, // 45 137
DX3DINDEX_END
#endif

#else
#define index_KEIA_DRIVER___carbodyblack_0	NULL
#endif




#if ((PT_KEIA_DRIVER___carbodyblack_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_KEIA_DRIVER___carbodyblack_0 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_KEIA_DRIVER___carbodyblack_0_INDEXSTRIP 	NULL
#endif




#if ((PT_KEIA_DRIVER___carbodyblack_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_KEIA_DRIVER___carbodyblack_0 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_KEIA_DRIVER___carbodyblack_0_VERTEXSTRIP 	NULL
#define vertexbuff_KEIA_DRIVER___carbodyblack_0_VERTEXSTRIP 	NULL
#endif




DX3DMODELTBL_START( modeltbl_KEIA_DRIVER__ )
DX3DMODEL_START( model_KEIA_DRIVER___carbodyblack_0 )
DX3DMODEL_VERTEX( vertex_KEIA_DRIVER___carbodyblack_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_KEIA_DRIVER___carbodyblack_0 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 138 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carbodyblack )
DX3DMODEL_END
DX3DMODELTBL_END




DX3DOBJECT_START_HASH( object_KEIA_DRIVER__, 3510229241 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_KEIA_DRIVER__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	0, 7.20244, 5.29417, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	0, 7.20244, 5.29417, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_KEIA_BODYR1__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_KEIA_BASE__
/////////////////////////////////////////////
#if 0
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 13.14, 1
#endif



DX3DOBJECT_START_HASH( object_KEIA_BASE__, 3384212037 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_NULL__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	0, 0, -13.14, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	0, 0, -13.14, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_NULL__ )
DX3DOBJECT_CHILD( object_KEIA_DRIVER__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_KEIA__
/////////////////////////////////////////////
#if 0
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
#endif



DX3DOBJECT_START_HASH( object_KEIA__, 1795647909 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_NULL__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	0, 0, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	0, 0, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_NOEXP_WAGONA__ )
DX3DOBJECT_CHILD( object_KEIA_BASE__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_NOEXP_ONEBOXA__
/////////////////////////////////////////////


DX3DOBJECT_START_HASH( object_NOEXP_ONEBOXA__, 3752187213 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_NULL__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	65.7986, 0, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	65.7986, 0, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_KEIA__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_NOEXP_PRIUSA__
/////////////////////////////////////////////


DX3DOBJECT_START_HASH( object_NOEXP_PRIUSA__, 1456560341 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_NULL__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	-55.914, 0, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	-55.914, 0, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_NOEXP_ONEBOXA__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_BGOBJ_CAR_ROOT__
/////////////////////////////////////////////
#if 0
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
#endif



DX3DOBJECT_START_HASH( object_BGOBJ_CAR_ROOT__, 2606427105 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_NULL__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	0, 0, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	0, 0, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_NULL__ )
DX3DOBJECT_CHILD( object_NOEXP_PRIUSA__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_BGOBJ__
/////////////////////////////////////////////
#if 0
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
#endif



DX3DOBJECT_START_HASH( object_BGOBJ__, 2652493217 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_NULL__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	0, 0, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	0, 0, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_NULL__ )
DX3DOBJECT_CHILD( object_BGOBJ_CAR_ROOT__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_BGTEMP__
/////////////////////////////////////////////
#if 0
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
#endif



DX3DOBJECT_START_HASH( object_BGTEMP__, 2413068737 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_NULL__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	0, 0, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	0, 0, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_NULL__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_LightOff__
/////////////////////////////////////////////
#if 0
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	-101.435, 0.968433, 13.7246, 1
#endif

DX3DMATERIAL_START( material_carlightoff )
DX3DMATERIAL_DIFF( 1, 0.51543, 0.54, 0 )
DX3DMATERIAL_SPEC( 1, 0.5, 0.5, 0.5 )
DX3DMATERIAL_TEX( NULL )
DX3DMATERIAL_SHADER( DEFAULT )
DX3DMATERIAL_FLG( 0 )
DX3DMATERIAL_CALLBACK( -1 )
DX3DMATERIAL_END




#if ((PT_LightOff___carlightoff_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_LightOff___carlightoff_0 == PT_TRILIST ) || ((PT_LightOff___carlightoff_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_LightOff___carlightoff_0 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_LightOff___carlightoff_0 )
DX3DVERT( -1.04401, -0.968433, -1.06197 ) DX3DVNORM( 0, 0, -1 )  //0
DX3DVERT( 1.04401, -0.968433, -1.06197 ) DX3DVNORM( 0, 0, -1 )  //1
DX3DVERT( 1.04401, 0.968433, -1.06197 ) DX3DVNORM( 0, 0, -1 )  //2
DX3DVERT( -1.04401, 0.968433, -1.06197 ) DX3DVNORM( 0, 0, -1 )  //3
DX3DVERT( -1.04401, 0.968433, -1.06197 ) DX3DVNORM( 0, 1, -0 )  //4
DX3DVERT( 1.04401, 0.968433, -1.06197 ) DX3DVNORM( 0, 1, -0 )  //5
DX3DVERT( 1.04401, 0.968433, 1.06197 ) DX3DVNORM( 0, 1, -0 )  //6
DX3DVERT( -1.04401, 0.968433, 1.06197 ) DX3DVNORM( 0, 1, -0 )  //7
DX3DVERT( -1.04401, 0.968433, 1.06197 ) DX3DVNORM( 0, 0, 1 )  //8
DX3DVERT( 1.04401, 0.968433, 1.06197 ) DX3DVNORM( 0, 0, 1 )  //9
DX3DVERT( 1.04401, -0.968433, 1.06197 ) DX3DVNORM( 0, 0, 1 )  //10
DX3DVERT( -1.04401, -0.968433, 1.06197 ) DX3DVNORM( 0, 0, 1 )  //11
DX3DVERT( -1.04401, -0.968433, 1.06197 ) DX3DVNORM( 0, -1, -0 )  //12
DX3DVERT( 1.04401, -0.968433, 1.06197 ) DX3DVNORM( 0, -1, -0 )  //13
DX3DVERT( 1.04401, -0.968433, -1.06197 ) DX3DVNORM( 0, -1, -0 )  //14
DX3DVERT( -1.04401, -0.968433, -1.06197 ) DX3DVNORM( 0, -1, -0 )  //15
DX3DVERT( 1.04401, -0.968433, -1.06197 ) DX3DVNORM( 1, 0, -0 )  //16
DX3DVERT( 1.04401, -0.968433, 1.06197 ) DX3DVNORM( 1, 0, -0 )  //17
DX3DVERT( 1.04401, 0.968433, 1.06197 ) DX3DVNORM( 1, 0, -0 )  //18
DX3DVERT( 1.04401, 0.968433, -1.06197 ) DX3DVNORM( 1, 0, -0 )  //19
DX3DVERT( -1.04401, -0.968433, 1.06197 ) DX3DVNORM( -1, 0, -0 )  //20
DX3DVERT( -1.04401, -0.968433, -1.06197 ) DX3DVNORM( -1, 0, -0 )  //21
DX3DVERT( -1.04401, 0.968433, -1.06197 ) DX3DVNORM( -1, 0, -0 )  //22
DX3DVERT( -1.04401, 0.968433, 1.06197 ) DX3DVNORM( -1, 0, -0 )  //23
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_LightOff___carlightoff_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_LightOff___carlightoff_0 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 24 )
DX3DVERTEX_END


#else
#define vertex_LightOff___carlightoff_0	NULL
#define vertexbuff_LightOff___carlightoff_0	NULL
#endif




#if ((PT_LightOff___carlightoff_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_LightOff___carlightoff_0 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_LightOff___carlightoff_0 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
	4, 5, 7, // 2 8
	5, 6, 7, // 3 11
	8, 9, 11, // 4 14
	9, 10, 11, // 5 17
	12, 13, 15, // 6 20
	13, 14, 15, // 7 23
	16, 17, 19, // 8 26
	17, 18, 19, // 9 29
	20, 21, 23, // 10 32
	21, 22, 23, // 11 35
DX3DINDEX_END
#endif

#else
#define index_LightOff___carlightoff_0	NULL
#endif




#if ((PT_LightOff___carlightoff_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_LightOff___carlightoff_0 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_LightOff___carlightoff_0_INDEXSTRIP 	NULL
#endif




#if ((PT_LightOff___carlightoff_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_LightOff___carlightoff_0 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_LightOff___carlightoff_0_VERTEXSTRIP 	NULL
#define vertexbuff_LightOff___carlightoff_0_VERTEXSTRIP 	NULL
#endif




DX3DMODELTBL_START( modeltbl_LightOff__ )
DX3DMODEL_START( model_LightOff___carlightoff_0 )
DX3DMODEL_VERTEX( vertex_LightOff___carlightoff_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_LightOff___carlightoff_0 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 36 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carlightoff )
DX3DMODEL_END
DX3DMODELTBL_END




DX3DOBJECT_START_HASH( object_LightOff__, 2503794129 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_LightOff__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	-101.435, 0.968433, -13.7246, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	-101.435, 0.968433, -13.7246, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_NULL__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_LightOn__
/////////////////////////////////////////////
#if 0
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	-98.9145, 0.683757, 13.7121, 1
#endif

DX3DMATERIAL_START( material_carlighton )
DX3DMATERIAL_DIFF( 1, 0.8, 0.769182, 0.00640001 )
DX3DMATERIAL_SPEC( 1, 0.5, 0.5, 0.5 )
DX3DMATERIAL_TEX( NULL )
DX3DMATERIAL_SHADER( DEFAULT )
DX3DMATERIAL_FLG( 0 )
DX3DMATERIAL_CALLBACK( -1 )
DX3DMATERIAL_END




#if ((PT_LightOn___carlighton_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_LightOn___carlighton_0 == PT_TRILIST ) || ((PT_LightOn___carlighton_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP))  || (PT_LightOn___carlighton_0 == PT_INDEXSTRIP)


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERT_START( VN, vertexbuff_LightOn___carlighton_0 )
DX3DVERT( -0.974121, -0.683757, -1.13769 ) DX3DVNORM( 0, 0, -1 )  //0
DX3DVERT( 0.974121, -0.683757, -1.13769 ) DX3DVNORM( 0, 0, -1 )  //1
DX3DVERT( 0.974121, 0.683757, -1.13769 ) DX3DVNORM( 0, 0, -1 )  //2
DX3DVERT( -0.974121, 0.683757, -1.13769 ) DX3DVNORM( 0, 0, -1 )  //3
DX3DVERT( -0.974121, 0.683757, -1.13769 ) DX3DVNORM( 0, 1, -0 )  //4
DX3DVERT( 0.974121, 0.683757, -1.13769 ) DX3DVNORM( 0, 1, -0 )  //5
DX3DVERT( 0.974121, 0.683757, 1.13769 ) DX3DVNORM( 0, 1, -0 )  //6
DX3DVERT( -0.974121, 0.683757, 1.13769 ) DX3DVNORM( 0, 1, -0 )  //7
DX3DVERT( -0.974121, 0.683757, 1.13769 ) DX3DVNORM( 0, 0, 1 )  //8
DX3DVERT( 0.974121, 0.683757, 1.13769 ) DX3DVNORM( 0, 0, 1 )  //9
DX3DVERT( 0.974121, -0.683757, 1.13769 ) DX3DVNORM( 0, 0, 1 )  //10
DX3DVERT( -0.974121, -0.683757, 1.13769 ) DX3DVNORM( 0, 0, 1 )  //11
DX3DVERT( -0.974121, -0.683757, 1.13769 ) DX3DVNORM( 0, -1, -0 )  //12
DX3DVERT( 0.974121, -0.683757, 1.13769 ) DX3DVNORM( 0, -1, -0 )  //13
DX3DVERT( 0.974121, -0.683757, -1.13769 ) DX3DVNORM( 0, -1, -0 )  //14
DX3DVERT( -0.974121, -0.683757, -1.13769 ) DX3DVNORM( 0, -1, -0 )  //15
DX3DVERT( 0.974121, -0.683757, -1.13769 ) DX3DVNORM( 1, 0, -0 )  //16
DX3DVERT( 0.974121, -0.683757, 1.13769 ) DX3DVNORM( 1, 0, -0 )  //17
DX3DVERT( 0.974121, 0.683757, 1.13769 ) DX3DVNORM( 1, 0, -0 )  //18
DX3DVERT( 0.974121, 0.683757, -1.13769 ) DX3DVNORM( 1, 0, -0 )  //19
DX3DVERT( -0.974121, -0.683757, 1.13769 ) DX3DVNORM( -1, 0, -0 )  //20
DX3DVERT( -0.974121, -0.683757, -1.13769 ) DX3DVNORM( -1, 0, -0 )  //21
DX3DVERT( -0.974121, 0.683757, -1.13769 ) DX3DVNORM( -1, 0, -0 )  //22
DX3DVERT( -0.974121, 0.683757, 1.13769 ) DX3DVNORM( -1, 0, -0 )  //23
DX3DVERT_END
#endif


DX3DVERTEX_START( vertex_LightOn___carlighton_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DVERTEX_VERTBUFFER( vertexbuff_LightOn___carlighton_0 )
#else
DX3DVERTEX_VERTBUFFER( 0 )
#endif
DX3DVERTEX_VERTNUM_iZ( VN, 24 )
DX3DVERTEX_END


#else
#define vertex_LightOn___carlighton_0	NULL
#define vertexbuff_LightOn___carlighton_0	NULL
#endif




#if ((PT_LightOn___carlighton_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_TRILIST) ) || (PT_LightOn___carlighton_0 == PT_TRILIST )


#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DINDEX_START( index_LightOn___carlighton_0 )
	0, 1, 3, // 0 2
	1, 2, 3, // 1 5
	4, 5, 7, // 2 8
	5, 6, 7, // 3 11
	8, 9, 11, // 4 14
	9, 10, 11, // 5 17
	12, 13, 15, // 6 20
	13, 14, 15, // 7 23
	16, 17, 19, // 8 26
	17, 18, 19, // 9 29
	20, 21, 23, // 10 32
	21, 22, 23, // 11 35
DX3DINDEX_END
#endif

#else
#define index_LightOn___carlighton_0	NULL
#endif




#if ((PT_LightOn___carlighton_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_INDEXSTRIP) ) || (PT_LightOn___carlighton_0 == PT_INDEXSTRIP )


//NO INDEX STRIP
#else
#define index_LightOn___carlighton_0_INDEXSTRIP 	NULL
#endif




#if ((PT_LightOn___carlighton_0 == PT_FOLLOWALL) && (PT_ALL_GachanGameObjectCar_tst__ == PT_VERTEXSTRIP) ) || (PT_LightOn___carlighton_0 == PT_VERTEXSTRIP )


//NO VERTEX STRIP
#else
#define vertex_LightOn___carlighton_0_VERTEXSTRIP 	NULL
#define vertexbuff_LightOn___carlighton_0_VERTEXSTRIP 	NULL
#endif




DX3DMODELTBL_START( modeltbl_LightOn__ )
DX3DMODEL_START( model_LightOn___carlighton_0 )
DX3DMODEL_VERTEX( vertex_LightOn___carlighton_0 )
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DMODEL_INDEX( index_LightOn___carlighton_0 )
#else
DX3DMODEL_INDEX( 0 )
#endif
DX3DMODEL_INDEXNUM( 36 )
DX3DMODEL_INDEXSTRIP( NULL )
DX3DMODEL_INDEXSTRIPNUM( 0 )
DX3DMODEL_VERTEXSTRIP( NULL )
DX3DMODEL_MATERIAL( material_carlighton )
DX3DMODEL_END
DX3DMODELTBL_END




DX3DOBJECT_START_HASH( object_LightOn__, 291951513 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_LightOn__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	-98.9145, 0.683757, -13.7121, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	-98.9145, 0.683757, -13.7121, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_LightOff__ )
DX3DOBJECT_CHILD( object_NULL__ )
DX3DOBJECT_END



/////////////////////////////////////////////
// object_BGOBJ_CAR_MATERIAL__
/////////////////////////////////////////////
#if 0
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
#endif



DX3DOBJECT_START_HASH( object_BGOBJ_CAR_MATERIAL__, 3816584209 )
DX3DOBJECT_ROTORDER( RO_XYZ )
DX3DOBJECT_MODEL( modeltbl_NULL__ )
DX3DOBJECT_MATRIXBIND( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXBIND_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSBIND_ROTORDER( RO_XYZ,
	0, 0, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_MATRIXPOSE( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_MATRIXPOSE_ABS( 
	1, 0, 0, 0, 
	0, 1, 0, 0, 
	0, 0, 1, 0, 
	0, 0, 0, 1
)
DX3DOBJECT_TRSPOSE_ROTORDER( RO_XYZ,
	0, 0, -0, 
	-0, -0, 0,                // -0, -0, 0
	1, 1, 1
)
DX3DOBJECT_NORMAL
DX3DOBJECT_FLG_iZiR( NONE )
DX3DOBJECT_CALLBACK( 0 )
DX3DOBJECT_SIBLING( object_NULL__ )
DX3DOBJECT_CHILD( object_LightOn__ )
DX3DOBJECT_END




//////////// export info ///////////////
DX3DOBJECT_JOINTCOUNT( jointcnt_GachanGameObjectCar_tst___0, 0 )
DX3DOBJECT_JOINTCOUNT( jointcnt_GachanGameObjectCar_tst___1, 0 )
DX3DOBJECT_JOINTCOUNT( jointcnt_GachanGameObjectCar_tst___2, 0 )
DX3DOBJECT_JOINTCOUNT( jointcnt_GachanGameObjectCar_tst___3, 0 )
DX3DOBJECT_JOINTCOUNT( jointcnt_GachanGameObjectCar_tst___4, 0 )
DX3DOBJECT_JOINTCOUNT( jointcnt_GachanGameObjectCar_tst___5, 0 )
DX3DOBJECT_JOINTCOUNT( jointcnt_GachanGameObjectCar_tst___6, 0 )
DX3DOBJECT_JOINTCOUNT( jointcnt_GachanGameObjectCar_tst___7, 0 )




/////////////////////////////////////////////
#if ( !BINARY_GachanGameObjectCar_tst__ )
DX3DBINARYFILE( binaryfile_GachanGameObjectCar_tst__, NULL )
#else
DX3DBINARYFILE( binaryfile_GachanGameObjectCar_tst__, "Z:/toshi2gachan/_GachanWorkspace/object/" )
#endif


DX3DBINARYSIZE( binarysize_GachanGameObjectCar_tst__, 0 )


